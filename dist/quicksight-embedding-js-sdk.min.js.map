{"version":3,"file":"quicksight-embedding-js-sdk.min.js","sources":["../src/common/events/messages/info/index.ts","../src/common/events/messages/change/index.ts","../src/common/events/messages/setters/index.ts","../src/common/events/messages/getters/index.ts","../src/common/events/messages/invokers/index.ts","../src/common/events/types.ts","../src/experiences/base-experience/types.ts","../src/experiences/dashboard-experience/types.ts","../src/experiences/generative-qna-experience/types.ts","../src/common/events/events.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/v4.js","../src/experiences/base-experience/base-experience.ts","../node_modules/punycode/punycode.es6.js","../src/common/iframe/iframe.ts","../src/experiences/base-experience/frame/experience-frame.ts","../src/experiences/visual-experience/frame/visual-experience-frame.ts","../src/experiences/visual-experience/visual-experience.ts","../src/experiences/console-experience/frame/console-experience-frame.ts","../src/experiences/console-experience/console-experience.ts","../src/experiences/dashboard-experience/frame/dashboard-experience-frame.ts","../src/experiences/dashboard-experience/dashboard-experience.ts","../src/experiences/q-search-experience/frame/q-search-experience-frame.ts","../src/experiences/internal-q-base-experience/internal-q-base-experience.ts","../src/experiences/q-search-experience/q-search-experience.ts","../src/experiences/generative-qna-experience/frame/generative-qna-experience-frame.ts","../src/experiences/generative-qna-experience/generative-qna-experience.ts","../src/experiences/control-experience/frame/control-experience-frame.ts","../src/experiences/control-experience/control-experience.ts","../src/common/event-manager/event-manager.ts","../src/common/log-provider/log-provider.ts","../src/common/embedding-context/embedding-context.ts","../src/index.ts"],"sourcesContent":["import {EmbeddingEvent, TargetedMessageEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {Datapoint} from '@experience/dashboard-experience/types';\n\nexport const InfoMessageEventName = {\n    CALLBACK_OPERATION_INVOKED: 'CALLBACK_OPERATION_INVOKED',\n    CONTENT_LOADED: 'CONTENT_LOADED',\n    EXPERIENCE_INITIALIZED: 'EXPERIENCE_INITIALIZED',\n    ERROR_OCCURRED: 'ERROR_OCCURRED',\n    SIZE_CHANGED: 'SIZE_CHANGED',\n    PARAMETERS_CHANGED: 'PARAMETERS_CHANGED',\n    SELECTED_SHEET_CHANGED: 'SELECTED_SHEET_CHANGED',\n    MODAL_OPENED: 'MODAL_OPENED',\n    Q_SEARCH_CLOSED: 'Q_SEARCH_CLOSED',\n    Q_SEARCH_OPENED: 'Q_SEARCH_OPENED',\n    Q_SEARCH_FOCUSED: 'Q_SEARCH_FOCUSED',\n    Q_SEARCH_SIZE_CHANGED: 'Q_SEARCH_SIZE_CHANGED',\n    Q_SEARCH_ENTERED_FULLSCREEN: 'Q_SEARCH_ENTERED_FULLSCREEN',\n    Q_SEARCH_EXITED_FULLSCREEN: 'Q_SEARCH_EXITED_FULLSCREEN',\n    Q_PANEL_ENTERED_FULLSCREEN: 'Q_PANEL_ENTERED_FULLSCREEN',\n    Q_PANEL_EXITED_FULLSCREEN: 'Q_PANEL_EXITED_FULLSCREEN',\n    PAGE_NAVIGATION: 'PAGE_NAVIGATION',\n} as const;\n\nexport type InfoMessageEventName = (typeof InfoMessageEventName)[keyof typeof InfoMessageEventName];\n\nexport type InfoMessageEvents =\n    | EmbeddingEvent<typeof InfoMessageEventName.CONTENT_LOADED, {title?: string}>\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.CALLBACK_OPERATION_INVOKED,\n          {\n              CustomActionId: string;\n              DashboardId: string;\n              VisualId: string;\n              SheetId: string;\n              Datapoints: Datapoint[];\n          }\n      >\n    | EmbeddingEvent<typeof InfoMessageEventName.SIZE_CHANGED, {height?: string; width?: string}>\n    | TargetedMessageEvent<typeof InfoMessageEventName.EXPERIENCE_INITIALIZED, object>\n    | EmbeddingEvent<typeof InfoMessageEventName.ERROR_OCCURRED, {errorCode?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.MODAL_OPENED, undefined>\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.PARAMETERS_CHANGED,\n          {\n              changedParameters: Parameter[];\n          }\n      >\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.SELECTED_SHEET_CHANGED,\n          {selectedSheet: {Name?: string; SheetId: string}}\n      >\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_CLOSED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_OPENED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_FOCUSED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_SIZE_CHANGED, {height?: number}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_ENTERED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_EXITED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_PANEL_ENTERED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_PANEL_EXITED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.PAGE_NAVIGATION, {pageType?: string}>;\n","import {ChangeEvent} from '@common/events/events';\n\nexport const InfoChangeEventName = {\n    FRAME_STARTED: 'FRAME_STARTED',\n    FRAME_MOUNTED: 'FRAME_MOUNTED',\n    FRAME_LOADED: 'FRAME_LOADED',\n    FRAME_REMOVED: 'FRAME_REMOVED',\n} as const;\n\nexport type InfoChangeEventName = (typeof InfoChangeEventName)[keyof typeof InfoChangeEventName];\n\nexport const ErrorChangeEventName = {\n    FRAME_NOT_CREATED: 'FRAME_NOT_CREATED',\n    NO_BODY: 'NO_BODY',\n    NO_CONTAINER: 'NO_CONTAINER',\n    INVALID_CONTAINER: 'INVALID_CONTAINER',\n    NO_URL: 'NO_URL',\n    INVALID_URL: 'INVALID_URL',\n    NO_FRAME_OPTIONS: 'NO_FRAME_OPTIONS',\n    INVALID_FRAME_OPTIONS: 'INVALID_FRAME_OPTIONS',\n} as const;\n\nexport type ErrorChangeEventName = (typeof ErrorChangeEventName)[keyof typeof ErrorChangeEventName];\n\nexport const WarnChangeEventName = {\n    UNRECOGNIZED_CONTENT_OPTIONS: 'UNRECOGNIZED_CONTENT_OPTIONS',\n    UNRECOGNIZED_FRAME_OPTIONS: 'UNRECOGNIZED_FRAME_OPTIONS',\n    UNRECOGNIZED_EVENT_TARGET: 'UNRECOGNIZED_EVENT_TARGET',\n} as const;\n\nexport type WarnChangeEventName = (typeof WarnChangeEventName)[keyof typeof WarnChangeEventName];\n\nexport type ChangeMessageEvents =\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_LOADED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_MOUNTED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_STARTED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_REMOVED, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_CONTENT_OPTIONS, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_FRAME_OPTIONS, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_EVENT_TARGET, string>\n    | ChangeEvent<typeof ErrorChangeEventName.FRAME_NOT_CREATED, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_BODY, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_CONTAINER, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_CONTAINER, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_URL, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_URL, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_FRAME_OPTIONS, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_FRAME_OPTIONS, string>;\n","import {EmbeddingMessageEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {VisualAction} from '@experience/dashboard-experience/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport const SetterMessageEventName = {\n    SET_PARAMETERS: 'SET_PARAMETERS',\n    SET_SELECTED_SHEET_ID: 'SET_SELECTED_SHEET_ID',\n    SET_Q_SEARCH_QUESTION: 'SET_Q_SEARCH_QUESTION',\n    SET_VISUAL_ACTIONS: 'SET_VISUAL_ACTIONS',\n    SET_THEME: 'SET_THEME',\n    ADD_FILTER_GROUPS: 'ADD_FILTER_GROUPS',\n    UPDATE_FILTER_GROUPS: 'UPDATE_FILTER_GROUPS',\n    REMOVE_FILTER_GROUPS: 'REMOVE_FILTER_GROUPS',\n    ADD_VISUAL_ACTIONS: 'ADD_VISUAL_ACTIONS',\n    REMOVE_VISUAL_ACTIONS: 'REMOVE_VISUAL_ACTIONS',\n    SET_THEME_OVERRIDE: 'SET_THEME_OVERRIDE',\n    PRELOAD_THEMES: 'PRELOAD_THEMES',\n    CREATE_SHARED_VIEW: 'CREATE_SHARED_VIEW',\n} as const;\n\nexport type SetterMessageEventName = (typeof SetterMessageEventName)[keyof typeof SetterMessageEventName];\n\nexport type SetterMessageEvents =\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_PARAMETERS, Parameter[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.REMOVE_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.ADD_FILTER_GROUPS, FilterGroup[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.UPDATE_FILTER_GROUPS, FilterGroup[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.REMOVE_FILTER_GROUPS, FilterGroup[] | string[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.ADD_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_THEME, {themeArn?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_Q_SEARCH_QUESTION, {question?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_SELECTED_SHEET_ID, {sheetId?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.PRELOAD_THEMES, string[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_THEME_OVERRIDE, ThemeConfiguration>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.CREATE_SHARED_VIEW, {viewId?: string}>;\n","import {EmbeddingEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {Sheet, Visual, VisualAction} from '@experience/dashboard-experience/types';\nimport type {FilterGroup} from '@aws-sdk/client-quicksight';\n\nexport const GetterMessageEventName = {\n    GET_PARAMETERS: 'GET_PARAMETERS',\n    GET_SHEETS: 'GET_SHEETS',\n    GET_SHEET_VISUALS: 'GET_SHEET_VISUALS',\n    GET_VISUAL_ACTIONS: 'GET_VISUAL_ACTIONS',\n    GET_SELECTED_SHEET_ID: 'GET_SELECTED_SHEET_ID',\n    GET_FILTER_GROUPS_FOR_SHEET: 'GET_FILTER_GROUPS_FOR_SHEET',\n    GET_FILTER_GROUPS_FOR_VISUAL: 'GET_FILTER_GROUPS_FOR_VISUAL',\n} as const;\n\nexport type GetterMessageEventName = (typeof GetterMessageEventName)[keyof typeof GetterMessageEventName];\n\nexport type GetterMessageEvents =\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_PARAMETERS, Parameter[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SHEETS, Sheet[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SHEET_VISUALS, Visual[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SELECTED_SHEET_ID, string>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_FILTER_GROUPS_FOR_SHEET, FilterGroup[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_FILTER_GROUPS_FOR_VISUAL, FilterGroup[]>;\n","import {InternalExperiences} from '@experience/base-experience/types';\nimport {EmbeddingMessageEvent, ErrorResponse, SuccessResponse, TargetedMessageEvent} from '@common/events/events';\n\nexport const InvokerMessageEventName = {\n    ACKNOWLEDGE: 'ACKNOWLEDGE',\n    INITIATE_PRINT: 'INITIATE_PRINT',\n    NAVIGATE_TO_DASHBOARD: 'NAVIGATE_TO_DASHBOARD',\n    CLOSE_Q_SEARCH: 'CLOSE_Q_SEARCH',\n    UNDO: 'UNDO',\n    REDO: 'REDO',\n    RESET: 'RESET',\n    TOGGLE_BOOKMARKS_PANE: 'TOGGLE_BOOKMARKS_PANE',\n} as const;\n\nexport type InvokerMessageEventName = (typeof InvokerMessageEventName)[keyof typeof InvokerMessageEventName];\n\nexport type InvokerMessageEvents =\n    | TargetedMessageEvent<\n          typeof InvokerMessageEventName.ACKNOWLEDGE,\n          {eventName: string; eventTarget?: InternalExperiences}\n      >\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.INITIATE_PRINT, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.NAVIGATE_TO_DASHBOARD, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.CLOSE_Q_SEARCH, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.UNDO, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.REDO, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.RESET, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.TOGGLE_BOOKMARKS_PANE, SuccessResponse | ErrorResponse>;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Sheet, Visual, VisualAction} from '../../experiences/dashboard-experience';\nimport {EmbeddingIFrameElement} from '../iframe';\nimport {InternalExperiences} from '../../experiences/base-experience';\nimport {Parameter} from '../types';\nimport {\n    InvokerMessageEventName,\n    GetterMessageEventName,\n    SetterMessageEventName,\n    InfoMessageEventName,\n    InfoChangeEventName,\n    ErrorChangeEventName,\n    WarnChangeEventName,\n    ChangeMessageEvents,\n    GetterMessageEvents,\n    SetterMessageEvents,\n    InfoMessageEvents,\n    InvokerMessageEvents,\n} from './messages';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport const ChangeEventName = {\n    ...InfoChangeEventName,\n    ...ErrorChangeEventName,\n    ...WarnChangeEventName,\n} as const;\n\nexport type ChangeEventName = (typeof ChangeEventName)[keyof typeof ChangeEventName];\n\nexport const MessageEventName = {\n    ...InfoMessageEventName,\n    ...SetterMessageEventName,\n    ...GetterMessageEventName,\n    ...InvokerMessageEventName,\n} as const;\n\nexport type MessageEventName = (typeof MessageEventName)[keyof typeof MessageEventName];\n\nexport const ChangeEventLevel = {\n    ERROR: 'ERROR',\n    INFO: 'INFO',\n    WARN: 'WARN',\n} as const;\n\nexport type ChangeEventLevel = (typeof ChangeEventLevel)[keyof typeof ChangeEventLevel];\n\nexport type EventNames = MessageEventName | ChangeEventName;\n\nexport type EventMessageValues =\n    | string\n    | string[]\n    | {height?: string}\n    | Visual[]\n    | number\n    | EmbeddingIFrameElement\n    | InternalExperiences\n    | Record<string, unknown>\n    | Parameter[]\n    | VisualAction[]\n    | FilterGroup[]\n    | Sheet[]\n    | undefined\n    | {success?: boolean}\n    | ThemeConfiguration;\n\nexport type EventData = Record<\n    string,\n    string | number | string[] | InternalExperiences | {frame?: EmbeddingIFrameElement} | unknown\n>;\n\nexport type EmbeddingEvents =\n    | ChangeMessageEvents\n    | GetterMessageEvents\n    | SetterMessageEvents\n    | InfoMessageEvents\n    | InvokerMessageEvents;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    InternalVisualExperience,\n    IVisualExperience,\n    TransformedVisualContentOptions,\n    VisualContentOptions,\n} from '../visual-experience';\nimport {\n    DashboardContentOptions,\n    IDashboardExperience,\n    InternalDashboardExperience,\n    TransformedDashboardContentOptions,\n} from '../dashboard-experience';\nimport {\n    InternalQSearchExperience,\n    IQSearchExperience,\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n} from '../q-search-experience';\nimport {\n    ConsoleContentOptions,\n    IConsoleExperience,\n    InternalConsoleExperience,\n    TransformedConsoleContentOptions,\n} from '../console-experience';\nimport {\n    GenerativeQnAContentOptions,\n    IGenerativeQnAExperience,\n    InternalGenerativeQnAExperience,\n    TransformedGenerativeQnAContentOptions,\n} from '../generative-qna-experience';\nimport {ControlContentOptions, IControlExperience, InternalControlExperience} from '../control-experience';\nimport {IContextExperience, InternalContextExperience} from '../../common/embedding-context';\nimport {EventListener} from '../../common/event-manager';\n\nexport type ContentOptions =\n    | VisualContentOptions\n    | DashboardContentOptions\n    | QSearchContentOptions\n    | ConsoleContentOptions\n    | ControlContentOptions\n    | GenerativeQnAContentOptions;\n\nexport type FrameOptions = {\n    url: string;\n    container: string | HTMLElement;\n    width?: string;\n    height?: string;\n    resizeHeightOnSizeChangedEvent?: boolean;\n    withIframePlaceholder?: boolean | HTMLElement;\n    className?: string;\n    origin_url?: string;\n    onChange?: EventListener;\n};\n\nexport type TransformedContentOptions =\n    | TransformedConsoleContentOptions\n    | TransformedDashboardContentOptions\n    | TransformedQSearchContentOptions\n    | TransformedVisualContentOptions\n    | TransformedGenerativeQnAContentOptions\n    | object;\n\nexport type Experiences =\n    | IConsoleExperience\n    | IContextExperience\n    | IControlExperience\n    | IVisualExperience\n    | IDashboardExperience\n    | IQSearchExperience\n    | IGenerativeQnAExperience;\n\nexport type InternalExperiences =\n    | InternalConsoleExperience\n    | InternalContextExperience\n    | InternalControlExperience\n    | InternalVisualExperience\n    | InternalDashboardExperience\n    | InternalQSearchExperience\n    | InternalGenerativeQnAExperience;\n\nexport interface InternalExperienceInfo<InternalExperience extends InternalExperiences> {\n    experienceIdentifier: string;\n    internalExperience: InternalExperience;\n}\n\nexport const ExperienceType = {\n    CONSOLE: 'CONSOLE',\n    CONTEXT: 'CONTEXT',\n    CONTROL: 'CONTROL',\n    VISUAL: 'VISUAL',\n    DASHBOARD: 'DASHBOARD',\n    QSEARCH: 'QSEARCH',\n    GENERATIVEQNA: 'QSEARCH', // Internal experience type unchanged from QSEARCH\n} as const;\n\nexport type ExperienceType = (typeof ExperienceType)[keyof typeof ExperienceType];\n\nexport interface IBaseExperience {\n    experienceType: ExperienceType;\n    discriminator?: number;\n}\n\nexport interface BaseContentOptions {\n    onMessage?: EventListener;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Parameter, ParametersAsObject, ThemeOptions} from '../../common';\nimport {BaseContentOptions, ExperienceType, IBaseExperience} from '../base-experience';\nimport type {\n    ColumnIdentifier,\n    AggregationFunction,\n    DateDimensionField,\n    VisualCustomActionOperation,\n    VisualCustomAction,\n    ThemeConfiguration,\n} from '@aws-sdk/client-quicksight';\n\nexport interface IDashboardExperience extends IBaseExperience {\n    experienceType: typeof ExperienceType.DASHBOARD;\n    dashboardId: string;\n}\n\nexport interface InternalDashboardExperience extends IDashboardExperience {\n    contextId: string;\n}\n\nexport interface DashboardContentOptions extends BaseContentOptions {\n    parameters?: Parameter[];\n    locale?: string;\n    attributionOptions?: AttributionOptions;\n    toolbarOptions?: ToolbarOptions;\n    sheetOptions?: SheetOptions;\n    themeOptions?: ThemeOptions;\n    viewId?: string;\n}\n\nexport interface TransformedDashboardContentOptions extends BaseContentOptions {\n    parameters?: ParametersAsObject;\n    locale?: string;\n    sheetId?: string | undefined;\n    footerPaddingEnabled?: boolean;\n    undoRedoDisabled?: boolean;\n    printEnabled?: boolean;\n    showBookmarksIcon?: boolean;\n    resetDisabled?: boolean;\n    sheetTabsDisabled?: boolean;\n    resizeOnSheetChange?: boolean;\n    themeArn?: string;\n    themeOverride?: ThemeConfiguration;\n}\n\nexport interface ToolbarOption {\n    show?: true; // absence implies true\n}\n\nexport interface ExportToolbarOption extends ToolbarOption {\n    print?: boolean;\n}\n\nexport interface ToolbarOptions {\n    export?: boolean | ExportToolbarOption;\n    undoRedo?: boolean | ToolbarOption;\n    reset?: boolean | ToolbarOption;\n    bookmarks?: boolean | ToolbarOption;\n}\n\nexport interface AttributionOptions {\n    overlayContent?: boolean;\n}\n\nexport interface SheetOptions {\n    initialSheetId?: string;\n    singleSheet?: boolean;\n    emitSizeChangedEventOnSheetChange?: boolean;\n}\n\nexport type NavigateToDashboardOptions = {\n    parameters?: Parameter[];\n};\n\nexport interface Sheet {\n    Name: string;\n    SheetId: string;\n}\n\nexport interface Visual {\n    Name: string;\n    VisualId: string;\n}\n\nexport type BinDatapointRawValue = {\n    Min: number | null;\n    Max: number | null;\n    IsMaxInclusive: boolean;\n};\n\nexport interface DatapointRawValue {\n    String?: string;\n    Integer?: number;\n    Decimal?: number;\n    Date?: Date;\n    Bin?: BinDatapointRawValue;\n}\n\nexport const SPECIAL_DATAPOINT_VALUE_TYPES = {\n    NULL: null,\n    OTHER_BUCKET: null,\n} as const;\n\nexport const CALCULATED_METRIC_COLUMN_TYPE = {\n    INTEGER: null,\n    STRING: null,\n    DECIMAL: null,\n    DATETIME: null,\n} as const;\n\nexport interface DatapointFormattedValue {\n    Value: string;\n    Special?: keyof typeof SPECIAL_DATAPOINT_VALUE_TYPES;\n}\n\nexport interface MetricColumn {\n    Integer?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['NumericalAggregationFunction'];\n    };\n    Decimal?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['NumericalAggregationFunction'];\n    };\n    String?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['CategoricalAggregationFunction'];\n    };\n    DateTime?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['DateAggregationFunction'];\n    };\n    Calculated?: {\n        Column: ColumnIdentifier;\n        Expression: string;\n        Type: keyof typeof CALCULATED_METRIC_COLUMN_TYPE;\n    };\n    Bin?: {\n        Column: ColumnIdentifier;\n    };\n}\n\nexport interface FieldColumn {\n    Integer?: {\n        Column: ColumnIdentifier;\n    };\n    Decimal?: {\n        Column: ColumnIdentifier;\n    };\n    String?: {\n        Column: ColumnIdentifier;\n    };\n    DateTime?: {\n        Column: ColumnIdentifier;\n        TimeGranularity: DateDimensionField['DateGranularity'];\n    };\n}\n\nexport interface DatapointColumn {\n    Metric?: MetricColumn;\n    Field?: FieldColumn;\n}\n\nexport interface Datapoint {\n    FormattedValues: DatapointFormattedValue[];\n    RawValues: DatapointRawValue[];\n    Columns: DatapointColumn[];\n    SelectedColumnIndex?: number;\n}\n\nexport interface CallbackOperation {\n    EmbeddingMessage: object;\n}\n\nexport type ActionOperation = {\n    CallbackOperation: CallbackOperation;\n} & VisualCustomActionOperation;\n\nexport interface VisualAction extends VisualCustomAction {\n    ActionOperations: ActionOperation[];\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {BaseContentOptions, ExperienceType, IBaseExperience} from '../base-experience';\n\nexport interface IGenerativeQnAExperience extends IBaseExperience {\n    experienceType: typeof ExperienceType.GENERATIVEQNA;\n}\n\nexport interface InternalGenerativeQnAExperience extends IGenerativeQnAExperience {\n    contextId: string;\n}\n\nexport interface GenerativeQnAContentOptions extends BaseContentOptions {\n    showTopicName?: boolean;\n    showPinboard?: boolean;\n    allowTopicSelection?: boolean;\n    allowFullscreen?: boolean;\n    searchPlaceholderText?: string;\n    panelOptions?: GenerativeQnAPanelOptions;\n    themeOptions?: QThemeOptions;\n}\n\nexport interface TransformedGenerativeQnAContentOptions extends BaseContentOptions {\n    qShowTopicName?: boolean;\n    qShowPinboard?: boolean;\n    qAllowTopicSelection?: boolean;\n    qAllowFullscreen?: boolean;\n    qSearchPlaceholderText?: string;\n    qPanelType?: string;\n    qPanelTitle?: string;\n    qShowPanelIcon?: boolean;\n    qPanelFocusedHeight?: string;\n    qPanelExpandedHeight?: string;\n    themeArn?: string;\n}\n\nexport type GenerativeQnAPanelOptions = GenerativeQnAFullPanelOptions | GenerativeQnASearchBarOptions;\n\nexport const GenerativeQnAPanelType = {\n    FULL: 'FULL',\n    SEARCH_BAR: 'SEARCH_BAR',\n} as const;\n\nexport type GenerativeQnAFullPanelOptions = {\n    panelType: typeof GenerativeQnAPanelType.FULL;\n    title?: string;\n    showQIcon?: boolean;\n};\n\nexport type GenerativeQnASearchBarOptions = {\n    panelType: typeof GenerativeQnAPanelType.SEARCH_BAR;\n    focusedHeight?: string;\n    expandedHeight?: string;\n};\n\nexport type QThemeOptions = {\n    themeArn?: string;\n};\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ChangeEventLevel, ChangeEventName, EventData, EventMessageValues, EventNames, MessageEventName} from './types';\nimport {InternalExperiences} from '@experience/base-experience/types';\n\nexport abstract class EmbeddingEvent<\n    EventName extends EventNames = EventNames,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> {\n    public eventName: EventName;\n    public message?: EventMessageValue;\n    public data?: EventData;\n    public eventTarget?: InternalExperiences;\n\n    protected constructor(eventName: EventName, message?: EventMessageValue, data?: EventData) {\n        this.eventName = eventName;\n        this.message = message;\n        this.data = data;\n    }\n}\n\nexport class ChangeEvent<\n    EventName extends ChangeEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingEvent<EventName, EventMessageValue> {\n    public eventLevel: ChangeEventLevel;\n    constructor(eventName: EventName, eventLevel: ChangeEventLevel, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventLevel = eventLevel;\n    }\n}\n\nexport class EmbeddingMessageEvent<\n    EventName extends MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingEvent<EventName, EventMessageValue> {\n    public eventName: EventName;\n\n    constructor(eventName: EventName, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventName = eventName;\n    }\n}\n\nexport class TargetedMessageEvent<\n    EventName extends MessageEventName = MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingMessageEvent<EventName, EventMessageValue> {\n    public eventTarget: InternalExperiences;\n\n    constructor(eventName: EventName, eventTarget: InternalExperiences, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventTarget = eventTarget;\n    }\n}\n\nexport class PostMessageEvent<\n    EventName extends MessageEventName = MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends TargetedMessageEvent<EventName, EventMessageValue> {\n    public timestamp: number;\n    public version: string;\n    public eventId: string;\n\n    constructor(\n        eventName: EventName,\n        eventTarget: InternalExperiences,\n        eventId: string,\n        timestamp: number,\n        version: string,\n        message?: EventMessageValue,\n        data?: EventData\n    ) {\n        super(eventName, eventTarget, message, data);\n        this.timestamp = timestamp;\n        this.version = version;\n        this.eventId = eventId;\n    }\n}\n\nexport abstract class ResponseMessage<EventMessageValue extends EventMessageValues = EventMessageValues> {\n    public abstract success: boolean;\n    public message?: EventMessageValue;\n}\n\nexport class SuccessResponse implements ResponseMessage {\n    public success = true;\n}\n\nexport class ErrorResponse<EventMessageValue extends EventMessageValues = EventMessageValues>\n    implements ResponseMessage<EventMessageValue>\n{\n    public success = false;\n    public error?: string;\n    public message?: EventMessageValue;\n    public errorCode: string;\n\n    constructor(errorResponse: ErrorResponse) {\n        this.errorCode = errorResponse.errorCode;\n        this.error = errorResponse.error;\n        this.message = errorResponse.message as EventMessageValue;\n    }\n}\n\nexport class DataResponse<EventMessageValue extends EventMessageValues = EventMessageValues>\n    implements ResponseMessage<EventMessageValue>\n{\n    public success = true;\n    public message?: EventMessageValue;\n\n    constructor(message?: EventMessageValue) {\n        this.message = message;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    ContentOptions,\n    Experiences,\n    ExperienceType,\n    FrameOptions,\n    InternalExperiences,\n    InternalExperienceInfo,\n    TransformedContentOptions,\n} from './types';\nimport {BaseExperienceFrame} from './frame/experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {ChangeEventLevel, ChangeEventName, EventMessageValues, MessageEventName} from '@common/events/types';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage, TargetedMessageEvent} from '@common/events/events';\nimport {EventListener} from '@common/event-manager/types';\nimport {LogProvider} from '../../common';\n\nexport abstract class BaseExperience<\n    ExperienceContentOptions extends ContentOptions,\n    InternalExperience extends InternalExperiences,\n    Experience extends Experiences,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    ExperienceFrame extends BaseExperienceFrame<\n        ExperienceContentOptions,\n        TransformedExperienceContentOptions,\n        InternalExperience\n    >\n> {\n    protected abstract experience: Experience;\n    protected abstract internalExperience: InternalExperience;\n    protected abstract experienceId: string;\n    protected abstract experienceFrame: ExperienceFrame;\n    protected readonly frameOptions: FrameOptions;\n    protected readonly contentOptions: ExperienceContentOptions;\n    protected readonly controlOptions: ControlOptions;\n    protected readonly experienceIdentifiers: Set<string>;\n    protected logger?: LogProvider;\n\n    protected constructor(\n        frameOptions: FrameOptions,\n        contentOptions: ExperienceContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        this.frameOptions = frameOptions;\n        this.contentOptions = contentOptions;\n        this.controlOptions = controlOptions;\n        this.experienceIdentifiers = experienceIdentifiers;\n        this.validateFrameOptions();\n    }\n\n    static getExperienceIdentifier = (experience: InternalExperiences): string => {\n        if (experience.experienceType === ExperienceType.DASHBOARD) {\n            const {contextId, experienceType, dashboardId, discriminator} = experience;\n            return [contextId, experienceType, dashboardId, discriminator].filter(Boolean).join('-');\n        }\n\n        if (experience.experienceType === ExperienceType.VISUAL) {\n            const {contextId, experienceType, dashboardId, sheetId, visualId, discriminator} = experience;\n            return [contextId, experienceType, dashboardId, sheetId, visualId, discriminator].filter(Boolean).join('-');\n        }\n\n        if (\n            [\n                ExperienceType.CONSOLE,\n                ExperienceType.CONTROL,\n                ExperienceType.CONTEXT,\n                ExperienceType.QSEARCH,\n                ExperienceType.GENERATIVEQNA,\n            ].includes(experience.experienceType)\n        ) {\n            const {contextId, experienceType, discriminator} = experience;\n            return [contextId, experienceType, discriminator].filter(Boolean).join('-');\n        }\n\n        throw new Error('Invalid experience unable to build experience identifier');\n    };\n\n    public send = async <EventMessageValue extends EventMessageValues>(\n        messageEvent: EmbeddingMessageEvent<MessageEventName>\n    ): Promise<ResponseMessage<EventMessageValue>> => {\n        if (!this.experienceFrame || !this.internalExperience) {\n            throw new Error('Experience has not been initialized');\n        }\n\n        const targetedMessageEvent = new TargetedMessageEvent(\n            messageEvent.eventName,\n            this.internalExperience,\n            messageEvent.message,\n            messageEvent.data\n        );\n\n        return this.experienceFrame.send(targetedMessageEvent);\n    };\n\n    public addEventListener = (eventName: MessageEventName, listener: EventListener) => {\n        return this.experienceFrame.addInternalEventListener(eventName, listener);\n    };\n\n    public setLogProvider = (logProvider: LogProvider) => {\n        this.logger = logProvider;\n        return this;\n    };\n\n    protected getInternalExperienceInfo = <\n        EmbeddingInternalExperience extends InternalExperiences,\n        EmbeddingExperience extends Experiences\n    >(\n        experience: EmbeddingExperience\n    ): InternalExperienceInfo<EmbeddingInternalExperience> => {\n        let discriminator = -1;\n        let internalExperience: InternalExperiences;\n        let experienceIdentifier: string;\n        do {\n            discriminator++;\n            internalExperience = {\n                ...experience,\n                contextId: this.controlOptions.contextId,\n                discriminator,\n            };\n            experienceIdentifier = BaseExperience.getExperienceIdentifier(internalExperience);\n        } while (this.experienceIdentifiers.has(experienceIdentifier));\n\n        this.experienceIdentifiers.add(experienceIdentifier);\n        return {\n            experienceIdentifier,\n            internalExperience,\n        } as InternalExperienceInfo<EmbeddingInternalExperience>;\n    };\n\n    protected transformContentOptions = <TCO extends TransformedContentOptions>(\n        filteredOptions: TCO,\n        unrecognizedContentOptions: object\n    ): TCO => {\n        this.warnUnrecognizedContentOptions(Object.keys(unrecognizedContentOptions));\n        return filteredOptions;\n    };\n\n    protected warnUnrecognizedContentOptions = (unrecognizedProperties: string[]) => {\n        if (unrecognizedProperties.length > 0) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.UNRECOGNIZED_CONTENT_OPTIONS,\n                    ChangeEventLevel.WARN,\n                    'Experience content options contain unrecognized properties',\n                    {\n                        unrecognizedContentOptions: unrecognizedProperties,\n                    }\n                ),\n                {frame: null}\n            );\n            this.logger?.warn('Experience content options contain unrecognized properties');\n        }\n    };\n\n    protected abstract extractExperienceFromUrl: (url: string) => Experience;\n\n    private validateFrameOptions = () => {\n        if (!this.frameOptions.url) {\n            const message = 'Url is required for the experience';\n            this.frameOptions.onChange?.(new ChangeEvent(ChangeEventName.NO_URL, ChangeEventLevel.ERROR, message), {\n                frame: null,\n            });\n            throw new Error(message);\n        }\n    };\n}\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {CreatePostRequestOptions, PostRequest} from '../types';\nimport {EmbeddingIFrameElement, IframeOptions} from './types';\n\nexport class Iframe {\n    static IFRAME_CLASS_NAME = 'quicksight-embedding-iframe';\n    private readonly iframeName: string;\n    private readonly width: string;\n    private readonly height: string;\n    private readonly loading: IframeOptions['loading'];\n    private readonly container: HTMLElement;\n    private readonly payload: IframeOptions['payload'];\n    private readonly src: string;\n    private readonly onLoad: IframeOptions['onLoad'];\n    private readonly iframe: EmbeddingIFrameElement;\n    private iframePlaceholder?: HTMLElement;\n    private classNames = [Iframe.IFRAME_CLASS_NAME];\n    private postRequest?: PostRequest;\n\n    constructor(options: IframeOptions) {\n        const {\n            id,\n            src,\n            width = '100%',\n            height = '100%',\n            container,\n            onLoad,\n            loading,\n            withIframePlaceholder,\n            payload,\n            className,\n        } = options;\n\n        this.width = width;\n        this.height = height;\n        this.onLoad = onLoad;\n        this.iframeName = id;\n\n        this.loading = loading;\n\n        if (className) {\n            this.classNames.push(className);\n        }\n\n        this.container = container;\n        this.payload = payload;\n        this.src = src;\n\n        if (withIframePlaceholder) {\n            this.createIframePlaceholder(withIframePlaceholder);\n        }\n\n        this.iframe = this.createIframe();\n        this.iframe.addEventListener('load', this.onLoadLocal);\n    }\n\n    public getIframe = () => this.iframe;\n\n    private createIframePlaceholder = (withIframePlaceholder: IframeOptions['withIframePlaceholder']) => {\n        this.iframePlaceholder = document.createElement('div');\n        this.iframePlaceholder.id = `${this.iframeName}-placeholder`;\n        this.iframePlaceholder.style.width = this.width;\n        this.iframePlaceholder.style.backgroundColor = 'rgba(0,0,0,.01)';\n        this.iframePlaceholder.style.display = 'flex';\n        this.iframePlaceholder.style.justifyContent = 'center';\n        this.iframePlaceholder.style.alignItems = 'center';\n        this.iframePlaceholder.className = `${Iframe.IFRAME_CLASS_NAME}-placeholder`;\n\n        if (this.height.endsWith('px')) {\n            this.iframePlaceholder.style.height = this.height;\n        }\n\n        if (withIframePlaceholder && typeof withIframePlaceholder !== 'boolean') {\n            this.iframePlaceholder.appendChild(withIframePlaceholder);\n        } else {\n            const loaderSVG = this.createLoaderSVG();\n            this.iframePlaceholder.appendChild(loaderSVG);\n        }\n\n        this.container.appendChild(this.iframePlaceholder);\n    };\n\n    private createIframe = () => {\n        const iframe = document.createElement('iframe') as EmbeddingIFrameElement;\n        iframe.className = this.classNames.join(' ').trim();\n        iframe.id = this.iframeName;\n        iframe.name = this.iframeName;\n        iframe.width = this.width;\n        iframe.height = this.height;\n\n        if (this.loading) {\n            iframe.loading = this.loading;\n        }\n\n        iframe.style.border = '0px';\n        iframe.style.padding = '0px';\n\n        if (this.iframePlaceholder) {\n            iframe.style.opacity = '0';\n            iframe.style.position = 'absolute';\n        }\n\n        if (this.width === '0px' && this.height === '0px') {\n            iframe.style.position = 'absolute';\n        }\n\n        this.container.appendChild(iframe);\n\n        if (this.payload) {\n            this.postRequest = this.createPostRequest({\n                src: this.src,\n                target: iframe.name,\n                container: this.container,\n                payload: this.payload,\n            });\n        } else {\n            iframe.src = this.src;\n        }\n\n        return iframe;\n    };\n\n    private onLoadLocal = (event: Event) => {\n        if (this.iframePlaceholder) {\n            this.iframePlaceholder.remove();\n            this.iframe.style.position = '';\n            this.iframe.style.opacity = '1';\n            this.iframe.style.transition = 'opacity .5s ease-in-out';\n        }\n\n        this.onLoad?.(event);\n        this.postRequest?.remove();\n    };\n\n    private createPostRequest = (postRequestOptions: CreatePostRequestOptions): PostRequest => {\n        const {src, container, target, payload} = postRequestOptions;\n        if (!src) {\n            throw new Error('No source has been provided.');\n        }\n\n        const form = document.createElement('form');\n        form.style.visibility = 'hidden';\n        form.method = 'POST';\n        form.action = src;\n        form.target = target;\n        form.name = `${target}-form`;\n\n        Object.keys(payload).forEach(payloadItem => {\n            const input = document.createElement('input');\n            input.type = 'hidden';\n            input.name = payloadItem;\n            input.value = payload[payloadItem];\n            form.appendChild(input);\n        });\n\n        container.appendChild(form);\n\n        form?.submit();\n        return {\n            remove: () => {\n                form.remove();\n            },\n        };\n    };\n\n    private createSvgElement = (\n        tagName: string,\n        attributes: Record<string, string>,\n        styles: Record<string, string> = {},\n        children: Element[] = []\n    ) => {\n        const element = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n        Object.entries(attributes).forEach(([name, value]) => element.setAttribute(name, value));\n        Object.entries(styles).forEach(([name, value]) => element.style.setProperty(name, value));\n        children.forEach(child => element.appendChild(child));\n        return element;\n    };\n\n    private createLoaderSVG = () => {\n        const circles: Element[] = [1, 2, 3].map(i => {\n            const animate = this.createSvgElement('animate', {\n                attributeName: 'opacity',\n                dur: '1s',\n                values: '0;1;0',\n                repeatCount: 'indefinite',\n                begin: `${i / 10.0}`,\n            });\n            return this.createSvgElement(\n                'circle',\n                {\n                    fill: '#ccc',\n                    stroke: 'none',\n                    cx: `${i * 20 - 14}`,\n                    cy: '50',\n                    r: '6',\n                },\n                undefined,\n                [animate]\n            );\n        });\n\n        return this.createSvgElement(\n            'svg',\n            {\n                version: '1.1',\n                x: '0px',\n                y: '0px',\n                viewBox: '0 0 100 100',\n                'enable-background': 'new 0 0 0 0',\n            },\n            {\n                width: '100px',\n                height: '100px',\n            },\n            circles\n        );\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {v4} from 'uuid';\nimport {encode} from 'punycode';\nimport {ContentOptions, FrameOptions, InternalExperiences, TransformedContentOptions} from '../types';\nimport {ParametersAsObject} from '../../../common';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\nimport {EmbeddingIFrameElement} from '@common/iframe/types';\nimport {EventListener} from '@common/event-manager/types';\nimport {\n    ChangeEventLevel,\n    ChangeEventName,\n    EmbeddingEvents,\n    EventMessageValues,\n    MessageEventName,\n} from '@common/events/types';\nimport {\n    ChangeEvent,\n    DataResponse,\n    ErrorResponse,\n    PostMessageEvent,\n    SuccessResponse,\n    TargetedMessageEvent,\n} from '@common/events/events';\nimport {Iframe} from '@common/iframe/iframe';\n\nexport const SDK_VERSION = '2.8.0';\n\nexport abstract class BaseExperienceFrame<\n    ExperienceContentOptions extends ContentOptions,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    InternalExperience extends InternalExperiences\n> {\n    protected readonly frameOptions: FrameOptions;\n    protected readonly contentOptions: ExperienceContentOptions;\n    protected readonly controlOptions: ControlOptions;\n    protected readonly transformedContentOptions: TransformedExperienceContentOptions;\n    protected readonly experienceId: string;\n    protected readonly internalExperience: InternalExperience;\n    protected readonly onChange: EventListener;\n    protected url: string;\n    protected origin_url: string\n    private readonly MESSAGE_RESPONSE_TIMEOUT = 5000;\n\n    public iframe: EmbeddingIFrameElement | null = null;\n    public container: HTMLElement;\n    public onMessage: EventListener;\n    public timeoutInstance?: NodeJS.Timeout;\n\n    protected constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: ExperienceContentOptions,\n        transformedContentOptions: TransformedExperienceContentOptions,\n        internalExperience: InternalExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        this.frameOptions = frameOptions;\n        this.contentOptions = contentOptions;\n        this.onChange = this.decorateOnChange(frameOptions.onChange);\n        this.onMessage = this.decorateOnMessage(contentOptions.onMessage, interceptMessage);\n        this.container = this.getContainer(frameOptions.container);\n        this.internalExperience = internalExperience;\n        this.controlOptions = controlOptions;\n        this.transformedContentOptions = transformedContentOptions;\n        this.experienceId = experienceIdentifier;\n        this.url = this.validateBaseUrl(frameOptions.url);\n\n    //this.logger.error('logging frame options origin url')\n    //this.logger.error(frameOptions.origin_url)\n\tif (frameOptions.origin_url != undefined) {\n            //this.logger.error('using origin url')\n    \t    this.origin_url = frameOptions.origin_url\n        } else {\n\t    //this.logger.error('no origin url')\n            this.origin_url = this.url\n        }\n\n        this.controlOptions.eventManager.addEventListener(this.experienceId, this.onMessage, true);\n        this.initializeMutationObserver();\n    }\n\n    public send = async <EventMessageValue extends EventMessageValues = EventMessageValues>(\n        messageEvent: TargetedMessageEvent\n    ): Promise<SuccessResponse | ErrorResponse<EventMessageValue> | DataResponse<EventMessageValue>> => {\n        if (this.controlOptions.sendToControlFrame) {\n            return this.controlOptions.sendToControlFrame(messageEvent);\n        }\n\n        if (!this.iframe) {\n            throw new Error(`Cannot send ${messageEvent.eventName}: No experience frame found`);\n        }\n\n        throw new Error(`Cannot send ${messageEvent.eventName}: No experience frame found`);\n\n        // const eventId = v4();\n        // const message = new PostMessageEvent(\n        //     messageEvent.eventName,\n        //     messageEvent.eventTarget,\n        //     eventId,\n        //     Date.now(),\n        //     SDK_VERSION,\n        //     messageEvent.message,\n        //     messageEvent.data\n        // );\n\n\t// this.iframe?.contentWindow?.postMessage(message, 'http://localhost:3000')\n\t// //this.iframe?.contentWindow?.postMessage(message, 'http://localhost:3000')\n    //     //this.iframe?.contentWindow?.postMessage(message, this.origin_url);\n\n    //     if (messageEvent.eventName === MessageEventName.ACKNOWLEDGE) {\n    //         return Promise.resolve(new SuccessResponse());\n    //     }\n\n    //     return new Promise((resolve, reject) => {\n    //         const eventHandler = (\n    //             event: MessageEvent<\n    //                 PostMessageEvent<\n    //                     MessageEventName,\n    //                     | {success: false; errorCode: string; errors?: string}\n    //                     | {\n    //                           success: true;\n    //                       }\n    //                 >\n    //             >\n    //         ) => {\n    //             const responseMessageEvent = event.data;\n    //             if (responseMessageEvent?.eventId === eventId) {\n    //                 window.removeEventListener('message', eventHandler);\n\n    //                 if (responseMessageEvent.message?.success === true) {\n    //                     resolve(new SuccessResponse());\n    //                 } else if (responseMessageEvent.message?.success === false) {\n    //                     resolve(new ErrorResponse(responseMessageEvent.message));\n    //                 } else {\n    //                     resolve(new DataResponse(responseMessageEvent.message));\n    //                 }\n    //             }\n    //         };\n\n    //         window.addEventListener('message', eventHandler);\n    //         setTimeout(() => {\n    //             window.removeEventListener('message', eventHandler);\n    //             reject(`${messageEvent.eventName} timed out`);\n    //         }, this.MESSAGE_RESPONSE_TIMEOUT);\n    //     });\n    };\n\n    public buildParameterString = (parameters?: ParametersAsObject) => {\n        if (!parameters || typeof parameters !== 'object') {\n            return '';\n        }\n\n        return Object.entries(parameters)\n            .map(([key, value]) => {\n                const values = Array.isArray(value) ? value : [value];\n\n                const encodedName = encodeURIComponent(key);\n\n                return values\n                    .map(encodeURIComponent)\n                    .map(encodedValue => `p.${encodedName}=${encodedValue}`)\n                    .join('&');\n            })\n            .join('&');\n    };\n\n    public buildQueryString = (\n        options: Omit<TransformedExperienceContentOptions, 'onMessage' | 'parameters'> &\n            Pick<InternalExperience, 'contextId' | 'discriminator'>\n    ) => {\n        const filteredOptions = Object.entries(options).reduce(\n            (memoizedOptions, [key, value]) => {\n                if (value !== undefined && value !== null) {\n                    return {\n                        ...memoizedOptions,\n                        [key]: `${value}`,\n                    };\n                }\n                return memoizedOptions;\n            },\n            {\n                punyCodeEmbedOrigin: encode(`${window.location.origin}/`),\n                sdkVersion: SDK_VERSION,\n            }\n        );\n\n        return new URLSearchParams(filteredOptions).toString();\n    };\n\n    public createExperienceIframe = () => {\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_STARTED, ChangeEventLevel.INFO, 'Creating the frame', {\n                experience: this.internalExperience,\n            })\n        );\n\n        try {\n            this.setTimeoutInstance();\n            this.iframe = new Iframe({\n                id: this.experienceId,\n                src: this.url,\n                width: this.frameOptions.width,\n                height: this.frameOptions.height,\n                container: this.container,\n                onLoad: this.onLoadHandler,\n                withIframePlaceholder: this.frameOptions.withIframePlaceholder,\n                className: this.frameOptions.className,\n            }).getIframe();\n        } catch (err) {\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.FRAME_NOT_CREATED,\n                    ChangeEventLevel.ERROR,\n                    'Failed to create the frame',\n                    {\n                        experience: this.internalExperience,\n                    }\n                )\n            );\n\n            throw err;\n        }\n\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_MOUNTED, ChangeEventLevel.INFO, 'The frame mounted', {\n                experience: this.internalExperience,\n                frame: this.iframe,\n            })\n        );\n    };\n\n    public addInternalEventListener = (eventName: MessageEventName, listener: EventListener) => {\n        const handler = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n            if (messageEvent.eventName === eventName) {\n                listener(messageEvent, metadata);\n            }\n        };\n\n        this.controlOptions.eventManager.addEventListener(this.experienceId, handler, true);\n\n        return {\n            remove: () => this.controlOptions.eventManager.removeEventListener(this.experienceId, handler),\n        };\n    };\n\n    private validateBaseUrl = (url: string) => {\n        if (!url) {\n            this.onChange(\n                new ChangeEvent(ChangeEventName.NO_URL, ChangeEventLevel.ERROR, 'Url is required for the experience', {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error('Url is required for the experience');\n        }\n\n        return url;\n    };\n\n    private setTimeoutInstance = () => {\n        this.timeoutInstance = setTimeout(() => {\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.FRAME_NOT_CREATED,\n                    ChangeEventLevel.ERROR,\n                    'Creating the frame timed out',\n                    {\n                        experience: this.internalExperience,\n                    }\n                )\n            );\n            throw new Error('Creating the frame timed out');\n        }, this.controlOptions.timeout);\n    };\n\n    private onLoadHandler = async () => {\n        if (this.timeoutInstance) {\n            clearTimeout(this.timeoutInstance);\n        }\n\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_LOADED, ChangeEventLevel.INFO, 'The experience iframe loaded', {\n                experience: this.internalExperience,\n            })\n        );\n    };\n\n    private getContainer = (container: HTMLElement | string) => {\n        if (!container) {\n            const message = 'Container is required for the experience';\n            this.onChange(\n                new ChangeEvent(ChangeEventName.NO_CONTAINER, ChangeEventLevel.ERROR, message, {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error(message);\n        }\n\n        let _container: HTMLElement | null = null;\n\n        if (typeof container === 'string') {\n            try {\n                _container = document.querySelector(container);\n            } catch (error) {\n                if (error instanceof Error) {\n                    this.onChange(\n                        new ChangeEvent(ChangeEventName.INVALID_CONTAINER, ChangeEventLevel.ERROR, error.message, {\n                            experience: this.internalExperience,\n                        })\n                    );\n                }\n\n                throw error;\n            }\n        } else if (typeof container === 'object' && container.nodeName) {\n            _container = container;\n        }\n\n        if (!_container) {\n            const message = `Invalid container '${container}' for the experience`;\n            this.onChange(\n                new ChangeEvent(ChangeEventName.INVALID_CONTAINER, ChangeEventLevel.ERROR, message, {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error(message);\n        }\n\n        return _container;\n    };\n\n    private decorateOnChange = (onChange?: EventListener) => {\n        return (changeEvent: EmbeddingEvents) => {\n            if (onChange) {\n                const metadata: ExperienceFrameMetadata = {\n                    frame: this.iframe,\n                };\n                onChange(changeEvent, metadata);\n            }\n        };\n    };\n\n    private decorateOnMessage = (onMessage?: EventListener, interceptOnMessage?: EventListener) => {\n        return (messageEvent: EmbeddingEvents) => {\n            if (interceptOnMessage && this.iframe) {\n                interceptOnMessage(messageEvent, {\n                    frame: this.iframe,\n                });\n            }\n\n            if (onMessage) {\n                onMessage(messageEvent, {\n                    frame: this.iframe,\n                });\n            }\n        };\n    };\n\n    // Add mutation observer to perform cleaning up tasks after container or frame is removed from the dom\n    private initializeMutationObserver = () => {\n        const mutationObserver = new MutationObserver(mutations => {\n            const isRemoved = mutations.some(record =>\n                Array.from(record.removedNodes).some(node => node === this.iframe || node === this.container)\n            );\n\n            if (isRemoved) {\n                this.controlOptions.eventManager.cleanUpCallbacksForExperience(this.experienceId);\n                mutationObserver.disconnect();\n                this.iframe = null;\n\n                this.onChange(\n                    new ChangeEvent(\n                        ChangeEventName.FRAME_REMOVED,\n                        ChangeEventLevel.INFO,\n                        'Frame removed from the DOM',\n                        {\n                            experience: this.internalExperience,\n                        }\n                    )\n                );\n            }\n        });\n\n        mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    };\n\n    protected abstract buildExperienceUrl: (baseUrl: string) => string;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {InternalVisualExperience, TransformedVisualContentOptions, VisualContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class VisualExperienceFrame extends BaseExperienceFrame<\n    VisualContentOptions,\n    TransformedVisualContentOptions,\n    InternalVisualExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: VisualContentOptions,\n        transformedContentOptions: TransformedVisualContentOptions,\n        internalExperience: InternalVisualExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {parameters, ...otherOptions} = this.transformedContentOptions;\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...otherOptions,\n            contextId,\n            discriminator,\n        });\n\n        const parameterString = this.buildParameterString(parameters);\n        const fullQueryString = [queryString, parameterString].join('#');\n\n        return [baseUrl, fullQueryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {FrameOptions, TransformedContentOptions, ExperienceType} from '../base-experience';\nimport {\n    InternalVisualExperience,\n    TransformedVisualContentOptions,\n    IVisualExperience,\n    VisualContentOptions,\n} from './types';\nimport {Parameter, ParametersAsObject} from '../../common';\nimport {VisualExperienceFrame} from './frame/visual-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {VisualAction} from '../dashboard-experience';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport class VisualExperience extends BaseExperience<\n    VisualContentOptions,\n    InternalVisualExperience,\n    IVisualExperience,\n    TransformedContentOptions,\n    VisualExperienceFrame\n> {\n    protected experience: IVisualExperience;\n    protected internalExperience: InternalVisualExperience;\n    protected experienceFrame: VisualExperienceFrame;\n    protected experienceId: string;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: VisualContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalVisualExperience,\n            IVisualExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new VisualExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformVisualContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    setParameters = async (parameters: Parameter[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_PARAMETERS, parameters));\n    };\n\n    reset = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.RESET));\n    };\n\n    addFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.ADD_FILTER_GROUPS, filterGroups));\n    };\n\n    updateFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UPDATE_FILTER_GROUPS, filterGroups));\n    };\n\n    removeFilterGroups = async (filterGroups: FilterGroup[] | string[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REMOVE_FILTER_GROUPS, filterGroups));\n    };\n\n    getFilterGroups = async (): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_VISUAL)\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the visual');\n        }\n\n        return response.message;\n    };\n\n    getActions = async (): Promise<VisualAction[]> => {\n        const response = await this.send<VisualAction[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_VISUAL_ACTIONS)\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the actions');\n        }\n\n        return response.message;\n    };\n\n    addActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.ADD_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    setActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    removeActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.REMOVE_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    setTheme = async (themeArn: string): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_THEME, {ThemeArn: themeArn}));\n    };\n\n    setThemeOverride = async (themeOverride: ThemeConfiguration): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME_OVERRIDE, {\n                ThemeOverride: themeOverride,\n            })\n        );\n    };\n\n    setPreloadThemes = async (preloadThemes: string[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.PRELOAD_THEMES, {\n                PreloadThemes: preloadThemes,\n            })\n        );\n    };\n\n    protected extractExperienceFromUrl = (url: string): IVisualExperience => {\n        const matches: Array<string> =\n            /^https:\\/\\/[^/]+\\/embed\\/[^/]+\\/dashboards\\/([\\w-]+)\\/sheets\\/([\\w-]+)\\/visuals\\/([\\w-]+)(\\?|$)/i.exec(\n                url\n            ) || [];\n\n        if (matches.length < 5) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.INVALID_URL, ChangeEventLevel.ERROR, 'Invalid visual experience url', {\n                    url,\n                }),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid visual experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.VISUAL,\n            dashboardId: matches[1],\n            sheetId: matches[2],\n            visualId: matches[3],\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        // Intercepting onMessage\n        // if the resizeHeightOnSizeChangedEvent is true, upon receiving SIZE_CHANGED message, update the height of the iframe\n        if (messageEvent.eventName === 'SIZE_CHANGED' && this.frameOptions.resizeHeightOnSizeChangedEvent) {\n            metadata?.frame?.setAttribute?.('height', `${messageEvent.message?.height}px`);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.themeOverride) {\n            this.setThemeOverride(this.contentOptions.themeOptions.themeOverride);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.preloadThemes) {\n            this.setPreloadThemes(this.contentOptions.themeOptions.preloadThemes);\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformVisualContentOptions = (contentOptions: VisualContentOptions) => {\n        const {\n            fitToIframeWidth,\n            locale,\n            parameters,\n            themeOptions,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedVisualContentOptions>(\n            {\n                fitToIframeWidth: fitToIframeWidth ?? true,\n                locale,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (Array.isArray(parameters)) {\n            transformedContentOptions.parameters = parameters.reduce(\n                (parametersAsObject: ParametersAsObject, parameter: Parameter) => {\n                    return {\n                        ...parametersAsObject,\n                        [parameter.Name]: parameter.Values,\n                    };\n                },\n                {}\n            );\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ConsoleContentOptions, InternalConsoleExperience, TransformedConsoleContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class ConsoleExperienceFrame extends BaseExperienceFrame<\n    ConsoleContentOptions,\n    TransformedConsoleContentOptions,\n    InternalConsoleExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: ConsoleContentOptions,\n        transformedContentOptions: TransformedConsoleContentOptions,\n        internalExperience: InternalConsoleExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ConsoleExperienceFrame} from './frame/console-experience-frame';\nimport {\n    ConsoleContentOptions,\n    InternalConsoleExperience,\n    IConsoleExperience,\n    TransformedConsoleContentOptions,\n} from './types';\nimport {ControlOptions} from '../control-experience';\nimport {ExperienceType, FrameOptions} from '@experience/base-experience/types';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from 'src/common';\n\nexport class ConsoleExperience extends BaseExperience<\n    ConsoleContentOptions,\n    InternalConsoleExperience,\n    IConsoleExperience,\n    TransformedConsoleContentOptions,\n    ConsoleExperienceFrame\n> {\n    protected experience;\n    protected internalExperience;\n    protected experienceId;\n    protected experienceFrame;\n    protected currentPage: string | undefined;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: ConsoleContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalConsoleExperience,\n            IConsoleExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        const {\n            locale,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedConsoleContentOptions>(\n            {locale},\n            unrecognizedContentOptions\n        );\n\n        this.experienceFrame = new ConsoleExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n        this.currentPage = 'START';\n    }\n\n    createSharedView = async (): Promise<ResponseMessage> => {\n        if (\n            this.currentPage !== 'DASHBOARD' &&\n            this.currentPage !== 'DASHBOARD_SHEET' &&\n            this.currentPage !== 'DASHBOARD_VIEW'\n        ) {\n            throw new Error('Cannot call createSharedView from this page');\n        }\n        const response = await this.send(new EmbeddingMessageEvent(MessageEventName.CREATE_SHARED_VIEW));\n        if (!response?.message) {\n            throw new Error('Failed to create shared view');\n        }\n\n        return response;\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        if (messageEvent.eventName === MessageEventName.PAGE_NAVIGATION) {\n            this.currentPage = messageEvent?.message?.pageType;\n        }\n    };\n\n    protected extractExperienceFromUrl = (url: string): IConsoleExperience => {\n        const matches: Array<string> =\n            /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/(start(\\/(favorites|dashboards|analyses))?|dashboards\\/[\\w-]+(\\/views\\/[\\w-]+)?|analyses\\/[\\w-]+)(\\?|$)/i.exec(\n                url\n            ) || [];\n\n        if (matches.length < 5) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.INVALID_URL, ChangeEventLevel.ERROR, 'Invalid console experience url', {\n                    url,\n                }),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid console experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.CONSOLE,\n        };\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {DashboardContentOptions, InternalDashboardExperience, TransformedDashboardContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class DashboardExperienceFrame extends BaseExperienceFrame<\n    DashboardContentOptions,\n    TransformedDashboardContentOptions,\n    InternalDashboardExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: DashboardContentOptions,\n        transformedContentOptions: TransformedDashboardContentOptions,\n        internalExperience: InternalDashboardExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {parameters, ...otherOptions} = this.transformedContentOptions;\n        const {contextId, discriminator} = this.internalExperience;\n        const {viewId} = this.contentOptions;\n\n        // ViewId was passed as content option, need to override url to include custom view\n        if (viewId) {\n            const url = new URL(baseUrl);\n            url.pathname = url.pathname.concat('/views/' + viewId);\n            baseUrl = url.href;\n        }\n\n        const queryString = this.buildQueryString({\n            ...otherOptions,\n            contextId,\n            discriminator,\n        });\n\n        const parameterString = this.buildParameterString(parameters);\n        const fullQueryString = [queryString, parameterString].join('#');\n\n        return [baseUrl, fullQueryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Parameter, ParametersAsObject} from '../../common';\nimport {DashboardExperienceFrame} from './frame/dashboard-experience-frame';\nimport {\n    DashboardContentOptions,\n    ExportToolbarOption,\n    IDashboardExperience,\n    InternalDashboardExperience,\n    NavigateToDashboardOptions,\n    Sheet,\n    TransformedDashboardContentOptions,\n    Visual,\n    VisualAction,\n} from './types';\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {ControlOptions} from '../control-experience';\n\nimport {ExperienceFrameMetadata} from '../../common/embedding-context';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport class DashboardExperience extends BaseExperience<\n    DashboardContentOptions,\n    InternalDashboardExperience,\n    IDashboardExperience,\n    TransformedDashboardContentOptions,\n    DashboardExperienceFrame\n> {\n    protected readonly experience;\n    protected readonly internalExperience;\n    protected readonly experienceFrame;\n    protected readonly experienceId: string;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: DashboardContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalDashboardExperience,\n            IDashboardExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new DashboardExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformDashboardContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    initiatePrint = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.INITIATE_PRINT));\n    };\n\n    undo = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UNDO));\n    };\n\n    redo = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REDO));\n    };\n\n    toggleBookmarksPane = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.TOGGLE_BOOKMARKS_PANE));\n    };\n\n    getParameters = async (): Promise<Parameter[]> => {\n        const response = await this.send<Parameter[]>(new EmbeddingMessageEvent(MessageEventName.GET_PARAMETERS));\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the parameters');\n        }\n\n        return response.message;\n    };\n\n    getSheets = async (): Promise<Sheet[]> => {\n        const response = await this.send<Sheet[]>(new EmbeddingMessageEvent(MessageEventName.GET_SHEETS));\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the sheets');\n        }\n\n        return response.message;\n    };\n\n    addFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.ADD_FILTER_GROUPS, filterGroups));\n    };\n\n    updateFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UPDATE_FILTER_GROUPS, filterGroups));\n    };\n\n    removeFilterGroups = async (filterGroups: FilterGroup[] | string[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REMOVE_FILTER_GROUPS, filterGroups));\n    };\n\n    getFilterGroupsForSheet = async (sheetId: string): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_SHEET, {\n                SheetId: sheetId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the sheet');\n        }\n\n        return response.message;\n    };\n\n    getFilterGroupsForVisual = async (sheetId: string, visualId: string): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_VISUAL, {\n                SheetId: sheetId,\n                VisualId: visualId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the visual');\n        }\n\n        return response.message;\n    };\n\n    getVisualActions = async (sheetId: string, visualId: string): Promise<VisualAction[]> => {\n        const response = await this.send<VisualAction[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the visual actions');\n        }\n\n        return response.message;\n    };\n\n    addVisualActions = async (sheetId: string, visualId: string, actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.ADD_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    setVisualActions = async (sheetId: string, visualId: string, actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    getSelectedSheetId = async (): Promise<string> => {\n        const response = await this.send<string>(new EmbeddingMessageEvent(MessageEventName.GET_SELECTED_SHEET_ID));\n\n        if (!response?.message) {\n            throw new Error('Failed to retrieve the selected sheet id');\n        }\n\n        return response.message;\n    };\n\n    setSelectedSheetId = async (sheetId: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_SELECTED_SHEET_ID, {\n                SheetId: sheetId,\n            })\n        );\n    };\n\n    setTheme = async (themeArn: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME, {\n                ThemeArn: themeArn,\n            })\n        );\n    };\n\n    navigateToDashboard = async (\n        dashboardId: string,\n        navigateToDashboardOptions?: NavigateToDashboardOptions\n    ): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.NAVIGATE_TO_DASHBOARD, {\n                DashboardId: dashboardId,\n                Parameters: navigateToDashboardOptions?.parameters,\n            })\n        );\n    };\n\n    removeVisualActions = async (\n        sheetId: string,\n        visualId: string,\n        actions: VisualAction[]\n    ): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.REMOVE_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    getSheetVisuals = async (sheetId: string): Promise<Visual[]> => {\n        const response = await this.send<Visual[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_SHEET_VISUALS, {\n                SheetId: sheetId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the sheet visuals');\n        }\n\n        return response.message;\n    };\n\n    setParameters = async (parameters: Parameter[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_PARAMETERS, parameters));\n    };\n\n    reset = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.RESET));\n    };\n\n    setThemeOverride = async (themeOverride: ThemeConfiguration): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME_OVERRIDE, {\n                ThemeOverride: themeOverride,\n            })\n        );\n    };\n\n    setPreloadThemes = async (preloadThemes: string[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.PRELOAD_THEMES, {\n                PreloadThemes: preloadThemes,\n            })\n        );\n    };\n\n    createSharedView = async (): Promise<ResponseMessage> => {\n        const response = await this.send(new EmbeddingMessageEvent(MessageEventName.CREATE_SHARED_VIEW));\n        if (!response?.message) {\n            throw new Error('Failed to create shared view');\n        }\n\n        return response;\n    };\n\n    protected extractExperienceFromUrl = (url: string): IDashboardExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embed\\/[^/]+\\/dashboards\\/([\\w-]+)(\\?|$)/i.exec(url) || [];\n        if (matches.length < 3) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid dashboard experience url',\n                    {\n                        url,\n                    }\n                ),\n                {frame: null}\n            );\n\n            throw new Error('Invalid dashboard experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.DASHBOARD,\n            dashboardId: matches[1],\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        // Intercepting onMessage\n        // if the resizeHeightOnSizeChangedEvent is true, upon receiving SIZE_CHANGED message, update the height of the iframe\n        if (messageEvent.eventName === 'SIZE_CHANGED' && this.frameOptions.resizeHeightOnSizeChangedEvent) {\n            metadata?.frame?.setAttribute?.('height', `${messageEvent?.message?.height}px`);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.themeOverride) {\n            this.setThemeOverride(this.contentOptions.themeOptions.themeOverride);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.preloadThemes) {\n            this.setPreloadThemes(this.contentOptions.themeOptions.preloadThemes);\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformDashboardContentOptions = (contentOptions: DashboardContentOptions) => {\n        const {\n            parameters,\n            locale,\n            attributionOptions,\n            sheetOptions,\n            toolbarOptions,\n            themeOptions,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedDashboardContentOptions>(\n            {\n                locale,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (Array.isArray(parameters)) {\n            transformedContentOptions.parameters = parameters.reduce(\n                (parametersAsObject: ParametersAsObject, parameter: Parameter) => {\n                    return {\n                        ...parametersAsObject,\n                        [parameter.Name]: parameter.Values,\n                    };\n                },\n                {}\n            );\n        }\n\n        if (attributionOptions?.overlayContent !== true) {\n            transformedContentOptions.footerPaddingEnabled = true;\n        }\n\n        if (toolbarOptions?.export || (toolbarOptions?.export as ExportToolbarOption)?.print) {\n            transformedContentOptions.printEnabled = true;\n        }\n\n        if (toolbarOptions?.undoRedo !== true) {\n            transformedContentOptions.undoRedoDisabled = true;\n        }\n\n        if (toolbarOptions?.reset !== true) {\n            transformedContentOptions.resetDisabled = true;\n        }\n\n        if (toolbarOptions?.bookmarks === true) {\n            transformedContentOptions.showBookmarksIcon = true;\n        }\n\n        if (sheetOptions?.initialSheetId) {\n            transformedContentOptions.sheetId = sheetOptions.initialSheetId;\n        }\n\n        if (typeof sheetOptions?.singleSheet === 'boolean') {\n            transformedContentOptions.sheetTabsDisabled = sheetOptions.singleSheet;\n        }\n\n        if (sheetOptions?.emitSizeChangedEventOnSheetChange) {\n            transformedContentOptions.resizeOnSheetChange = true;\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {InternalQSearchExperience, QSearchContentOptions, TransformedQSearchContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class QSearchExperienceFrame extends BaseExperienceFrame<\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n    InternalQSearchExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: QSearchContentOptions,\n        transformedContentOptions: TransformedQSearchContentOptions,\n        internalExperience: InternalQSearchExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    BaseExperience,\n    BaseExperienceFrame,\n    ContentOptions,\n    Experiences,\n    InternalExperiences,\n    TransformedContentOptions,\n} from '../base-experience';\nimport {FrameStyles} from '../internal-q-base-experience';\nimport {EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\n/**\n * Internal base experience for embedded Q,\n * containing shared functionality between q-search-bar and generative-qna experience types.\n */\nexport abstract class InternalQBaseExperience<\n    ExperienceContentOptions extends ContentOptions,\n    InternalExperience extends InternalExperiences,\n    Experience extends Experiences,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    ExperienceFrame extends BaseExperienceFrame<\n        ExperienceContentOptions,\n        TransformedExperienceContentOptions,\n        InternalExperience\n    >\n> extends BaseExperience<\n    ExperienceContentOptions,\n    InternalExperience,\n    Experience,\n    TransformedExperienceContentOptions,\n    ExperienceFrame\n> {\n    static readonly MAX_Z_INDEX = '2147483647';\n    protected frameStyles?: FrameStyles;\n\n    close = (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.CLOSE_Q_SEARCH));\n    };\n\n    setQuestion = (question: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_Q_SEARCH_QUESTION, {\n                question,\n            })\n        );\n    };\n\n    protected trackOutsideClicks = (): void => {\n        const clickHandler = (event: MouseEvent) => {\n            if (!this.experienceFrame.iframe?.contains(event.target as Node)) {\n                this.close();\n            }\n        };\n\n        window.addEventListener('click', clickHandler);\n        this.controlOptions.eventManager.addEventListenerForCleanup(this.experienceId, () =>\n            window.removeEventListener('click', clickHandler)\n        );\n    };\n\n    protected enterFullScreen = (metadata: ExperienceFrameMetadata | undefined): void => {\n        if (!this.frameStyles && metadata?.frame) {\n            this.frameStyles = {\n                position: metadata.frame?.style.position,\n                top: metadata.frame?.style.top,\n                left: metadata.frame.style.left,\n                zIndex: metadata.frame.style.zIndex,\n                width: metadata.frame.style.width,\n                height: metadata.frame.style.height,\n            };\n\n            metadata.frame.style.position = 'fixed';\n            metadata.frame.style.top = '0px';\n            metadata.frame.style.left = '0px';\n            metadata.frame.style.zIndex = InternalQBaseExperience.MAX_Z_INDEX;\n            metadata.frame.style.width = '100vw';\n            metadata.frame.style.height = '100vh';\n        }\n    };\n\n    protected exitFullScreen = (metadata: ExperienceFrameMetadata | undefined): void => {\n        if (this.frameStyles && metadata?.frame) {\n            metadata.frame.style.position = this.frameStyles.position;\n            metadata.frame.style.top = this.frameStyles.top;\n            metadata.frame.style.left = this.frameStyles.left;\n            metadata.frame.style.zIndex = this.frameStyles.zIndex;\n            metadata.frame.style.width = this.frameStyles.width;\n            metadata.frame.style.height = this.frameStyles.height;\n            this.frameStyles = undefined;\n        }\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {\n    InternalQSearchExperience,\n    IQSearchExperience,\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n} from './types';\nimport {FrameStyles} from '@experience/internal-q-base-experience/types';\nimport {QSearchExperienceFrame} from './frame/q-search-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {InternalQBaseExperience} from '@experience/internal-q-base-experience/internal-q-base-experience';\nimport {ChangeEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\nexport class QSearchExperience extends InternalQBaseExperience<\n    QSearchContentOptions,\n    InternalQSearchExperience,\n    IQSearchExperience,\n    TransformedQSearchContentOptions,\n    QSearchExperienceFrame\n> {\n    protected experience: IQSearchExperience;\n    protected internalExperience: InternalQSearchExperience;\n    protected experienceFrame: QSearchExperienceFrame;\n    protected experienceId: string;\n    protected frameStyles?: FrameStyles;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: QSearchContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalQSearchExperience,\n            IQSearchExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new QSearchExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformQSearchContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    protected extractExperienceFromUrl = (url: string): IQSearchExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/q\\/search(\\/|\\?|$)/i.exec(url) || [];\n\n        if (matches.length < 2) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid q-search experience URL',\n                    {url}\n                ),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid q-search experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.QSEARCH,\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        switch (messageEvent.eventName) {\n            case MessageEventName.Q_SEARCH_OPENED:\n            case MessageEventName.Q_SEARCH_CLOSED: {\n                if (typeof messageEvent.message === 'object') {\n                    metadata?.frame?.style.setProperty('height', `${messageEvent?.message?.height}px`);\n                }\n                break;\n            }\n            case MessageEventName.CONTENT_LOADED: {\n                this.trackOutsideClicks();\n                break;\n            }\n            case MessageEventName.Q_SEARCH_ENTERED_FULLSCREEN: {\n                this.enterFullScreen(metadata);\n                break;\n            }\n            case MessageEventName.Q_SEARCH_EXITED_FULLSCREEN: {\n                this.exitFullScreen(metadata);\n                break;\n            }\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformQSearchContentOptions = (contentOptions: QSearchContentOptions) => {\n        const {\n            hideIcon,\n            hideTopicName,\n            theme,\n            allowTopicSelection,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedQSearchContentOptions>(\n            {\n                allowTopicSelection,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (hideIcon !== undefined) {\n            transformedContentOptions.qBarIconDisabled = hideIcon;\n        }\n\n        if (hideTopicName !== undefined) {\n            transformedContentOptions.qBarTopicNameDisabled = hideTopicName;\n        }\n\n        if (theme !== undefined) {\n            transformedContentOptions.themeId = theme;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    InternalGenerativeQnAExperience,\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class GenerativeQnAExperienceFrame extends BaseExperienceFrame<\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n    InternalGenerativeQnAExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: GenerativeQnAContentOptions,\n        transformedContentOptions: TransformedGenerativeQnAContentOptions,\n        internalExperience: InternalGenerativeQnAExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {\n    InternalGenerativeQnAExperience,\n    IGenerativeQnAExperience,\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n    GenerativeQnAPanelType,\n} from './types';\nimport {FrameStyles} from '@experience/internal-q-base-experience/types';\nimport {GenerativeQnAExperienceFrame} from './frame/generative-qna-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {InternalQBaseExperience} from '@experience/internal-q-base-experience/internal-q-base-experience';\nimport {ChangeEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\nexport class GenerativeQnAExperience extends InternalQBaseExperience<\n    GenerativeQnAContentOptions,\n    InternalGenerativeQnAExperience,\n    IGenerativeQnAExperience,\n    TransformedGenerativeQnAContentOptions,\n    GenerativeQnAExperienceFrame\n> {\n    protected experience: IGenerativeQnAExperience;\n    protected internalExperience: InternalGenerativeQnAExperience;\n    protected experienceFrame: GenerativeQnAExperienceFrame;\n    protected experienceId: string;\n    protected frameStyles?: FrameStyles;\n    static readonly TEXT_PROPERTY_MAX_LENGTH = 200;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: GenerativeQnAContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalGenerativeQnAExperience,\n            IGenerativeQnAExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new GenerativeQnAExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformGenerativeQnAContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    protected extractExperienceFromUrl = (url: string): IGenerativeQnAExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/q\\/search(\\/|\\?|$)/i.exec(url) || [];\n\n        if (matches.length < 2) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid generative-qna experience URL',\n                    {url}\n                ),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid generative-qna experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.GENERATIVEQNA,\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        switch (messageEvent.eventName) {\n            case MessageEventName.Q_SEARCH_OPENED:\n            case MessageEventName.Q_SEARCH_CLOSED:\n            case MessageEventName.Q_SEARCH_FOCUSED: {\n                if (typeof messageEvent.message === 'object') {\n                    metadata?.frame?.style.setProperty('height', `${messageEvent?.message?.height}`);\n                }\n                break;\n            }\n            case MessageEventName.CONTENT_LOADED: {\n                if (this.contentOptions?.panelOptions?.panelType === GenerativeQnAPanelType.SEARCH_BAR) {\n                    this.trackOutsideClicks();\n                }\n                break;\n            }\n            case MessageEventName.Q_PANEL_ENTERED_FULLSCREEN: {\n                this.enterFullScreen(metadata);\n                break;\n            }\n            case MessageEventName.Q_PANEL_EXITED_FULLSCREEN: {\n                this.exitFullScreen(metadata);\n                break;\n            }\n        }\n    };\n\n    private transformGenerativeQnAContentOptions = (contentOptions: GenerativeQnAContentOptions) => {\n        const unrecognizedProperties: string[] = [];\n\n        const markUnrecognized = (properties: object, prefix = '') => {\n            Object.keys(properties).forEach(key => {\n                unrecognizedProperties.push(prefix + key);\n            });\n        };\n\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage, // excluded from unrecognized\n            showTopicName,\n            showPinboard,\n            allowTopicSelection,\n            allowFullscreen,\n            searchPlaceholderText,\n            panelOptions,\n            themeOptions,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        markUnrecognized(unrecognizedContentOptions);\n\n        const transformedContentOptions: TransformedGenerativeQnAContentOptions = {\n            qShowTopicName: showTopicName,\n            qShowPinboard: showPinboard,\n            qAllowTopicSelection: allowTopicSelection,\n            qAllowFullscreen: allowFullscreen,\n        };\n\n        if (typeof searchPlaceholderText === 'string') {\n            this.checkMaxLength(searchPlaceholderText, 'searchPlaceholderText');\n            transformedContentOptions.qSearchPlaceholderText = encodeURIComponent(searchPlaceholderText);\n        }\n\n        if (panelOptions) {\n            const {panelType} = panelOptions;\n            transformedContentOptions.qPanelType = panelType;\n\n            if (panelType === GenerativeQnAPanelType.FULL) {\n                const {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    panelType: unusedPanelType, // excluded from unrecognized\n                    title,\n                    showQIcon,\n                    ...unrecognizedPanelOptions\n                } = panelOptions;\n\n                if (typeof title === 'string') {\n                    this.checkMaxLength(title, 'panelOptions.title');\n                    transformedContentOptions.qPanelTitle = encodeURIComponent(title);\n                }\n                transformedContentOptions.qShowPanelIcon = showQIcon;\n\n                markUnrecognized(unrecognizedPanelOptions, 'panelOptions.');\n            } else if (panelType === GenerativeQnAPanelType.SEARCH_BAR) {\n                const {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    panelType: unusedPanelType, // excluded from unrecognized\n                    focusedHeight,\n                    expandedHeight,\n                    ...unrecognizedPanelOptions\n                } = panelOptions;\n\n                transformedContentOptions.qPanelFocusedHeight = focusedHeight;\n                transformedContentOptions.qPanelExpandedHeight = expandedHeight;\n\n                markUnrecognized(unrecognizedPanelOptions, 'panelOptions.');\n            } else {\n                throw new Error('panelOptions.panelType should be one of following: [FULL, SEARCH_BAR]');\n            }\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        this.warnUnrecognizedContentOptions(unrecognizedProperties);\n\n        return transformedContentOptions;\n    };\n\n    private checkMaxLength = (value: string, propertyName: string) => {\n        const maxLength = GenerativeQnAExperience.TEXT_PROPERTY_MAX_LENGTH;\n        if (value.length > maxLength) {\n            throw new Error(`${propertyName} should be less than ${maxLength} characters`);\n        }\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ControlOptions, InternalControlExperience} from '../types';\nimport {EventListener} from '@common/event-manager/types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {BaseContentOptions, FrameOptions} from '@experience/base-experience/types';\n\nexport class ControlExperienceFrame extends BaseExperienceFrame<object, BaseContentOptions, InternalControlExperience> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: BaseContentOptions,\n        transformedContentOptions: object,\n        internalExperience: InternalControlExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join('?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ControlExperienceFrame} from './frame/control-experience-frame';\nimport {ControlOptions, IControlExperience, InternalControlExperience, UrlInfo} from './types';\nimport {ExperienceType} from '../base-experience';\nimport {EventManager} from '@common/event-manager/event-manager';\nimport {ChangeEvent, TargetedMessageEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {EventListener} from '@common/event-manager/types';\nimport {LogProvider} from '../../common';\n\nexport class ControlExperience {\n    static FRAME_TIMEOUT = 60000;\n    private readonly container: HTMLBodyElement;\n    private readonly urlInfo: UrlInfo;\n    private readonly internalExperience: InternalControlExperience;\n    private readonly eventManager: EventManager;\n    private readonly onChange?: EventListener;\n    private readonly experience: IControlExperience = {\n        experienceType: ExperienceType.CONTROL,\n    };\n    private readonly logger?: LogProvider;\n    private readonly controlExperienceFrame: ControlExperienceFrame;\n\n    constructor(\n        container: HTMLBodyElement,\n        controlOptions: ControlOptions,\n        onChange?: EventListener,\n        logger?: LogProvider\n    ) {\n        this.container = container;\n        this.eventManager = controlOptions.eventManager;\n        this.urlInfo = controlOptions.urlInfo;\n        this.onChange = onChange;\n        this.logger = logger;\n\n        this.internalExperience = {\n            ...this.experience,\n            contextId: controlOptions.contextId,\n            discriminator: 0,\n        };\n\n        const controlExperienceId = this.getControlExperienceId();\n\n        this.controlExperienceFrame = new ControlExperienceFrame(\n            {\n                url: this.getControlExperienceBaseUrl(),\n                container: this.container,\n                width: '0px',\n                height: '0px',\n                onChange: this.onChange,\n            },\n            {\n                eventManager: this.eventManager,\n                contextId: this.internalExperience.contextId,\n                timeout: ControlExperience.FRAME_TIMEOUT,\n                urlInfo: this.urlInfo,\n            },\n            {},\n            {},\n            this.internalExperience,\n            controlExperienceId\n        );\n\n        window.addEventListener('message', this.controlFrameMessageListener);\n        this.eventManager.addEventListenerForCleanup(controlExperienceId, () =>\n            window.removeEventListener('message', this.controlFrameMessageListener)\n        );\n    }\n\n    public send = (messageEvent: TargetedMessageEvent) => {\n        return this.controlExperienceFrame.send(messageEvent);\n    };\n\n    public controlFrameMessageListener = (event: MessageEvent<EmbeddingEvents>) => {\n        if (this.isMessageEvent(event.data)) {\n            const messageEvent = event.data;\n            try {\n                if (messageEvent.eventTarget) {\n                    const incomingExperienceIdentifier = BaseExperience.getExperienceIdentifier(\n                        messageEvent.eventTarget\n                    );\n\n                    this.eventManager.invokeEventListener(incomingExperienceIdentifier, messageEvent);\n                }\n\n                this.sendAcknowledgment(messageEvent);\n            } catch (error) {\n                this.onChange?.(\n                    new ChangeEvent(\n                        ChangeEventName.UNRECOGNIZED_EVENT_TARGET,\n                        ChangeEventLevel.WARN,\n                        'Message with unrecognized event target received',\n                        {\n                            eventTarget: messageEvent.eventTarget,\n                        }\n                    ),\n                    {frame: this.controlExperienceFrame.iframe}\n                );\n                this.logger?.warn('Message with unrecognized event target received');\n            }\n        }\n    };\n\n    private sendAcknowledgment = (messageEvent: EmbeddingEvents) => {\n        const acknowledgment = new TargetedMessageEvent(MessageEventName.ACKNOWLEDGE, this.internalExperience, {\n            eventName: messageEvent.eventName,\n            eventTarget: messageEvent.eventTarget,\n        });\n\n        window.requestIdleCallback?.(() => this.send(acknowledgment)) || this.send(acknowledgment);\n    };\n\n    private getControlExperienceId = () => {\n        return [\n            this.internalExperience.contextId,\n            this.internalExperience.experienceType,\n            this.internalExperience.discriminator,\n        ]\n            .filter(Boolean)\n            .join('-');\n    };\n\n    private getControlExperienceBaseUrl = () => {\n        const {host, sessionId} = this.urlInfo;\n        const urlString = `${host}/embed/${sessionId}/embedControl`;\n        return new URL(urlString).href;\n    };\n\n    private isMessageEvent = (messageEvent: EmbeddingEvents) => {\n        return !!messageEvent && !!messageEvent.eventTarget && !!messageEvent.eventName;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceIdentifier, EventListener} from './types';\nimport {EmbeddingEvents} from '../events';\nimport {CleanUpCallback} from '../types';\n\n/**\n * Manages the event listeners for the experiences within an embedding context\n */\nexport class EventManager {\n    private eventListeners: Map<ExperienceIdentifier, EventListener[]>;\n    private cleanUpCallbacks: Map<ExperienceIdentifier, CleanUpCallback[]>;\n\n    constructor() {\n        this.eventListeners = new Map();\n        this.cleanUpCallbacks = new Map();\n    }\n\n    public addEventListener = (experienceId: ExperienceIdentifier, listener: EventListener, cleanUp?: boolean) => {\n        if (!experienceId) {\n            throw new Error('Experience identifier is required when calling addEventListener');\n        }\n\n        if (typeof listener !== 'function') {\n            throw new Error('Invalid type provided for event listener');\n        }\n\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (cleanUp) {\n            this.addEventListenerForCleanup(experienceId, () => this.removeEventListener(experienceId, listener));\n        }\n\n        if (!experienceIdentifierSpecificListeners) {\n            this.eventListeners.set(experienceId, [listener]);\n            return this;\n        }\n\n        experienceIdentifierSpecificListeners.push(listener);\n        return this;\n    };\n\n    public invokeEventListener = (experienceId: ExperienceIdentifier, event: EmbeddingEvents) => {\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (!experienceIdentifierSpecificListeners) {\n            throw new Error(`Unable to find experience specific event listeners: ${experienceId}`);\n        }\n\n        experienceIdentifierSpecificListeners.forEach((listener: EventListener) => {\n            listener(event);\n        });\n\n        return this;\n    };\n\n    public removeEventListener = (experienceId: ExperienceIdentifier, listener: EventListener) => {\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (!experienceIdentifierSpecificListeners) {\n            throw new Error(`Unable to find experience specific event listeners: ${experienceId}`);\n        }\n\n        const updateEventListeners = experienceIdentifierSpecificListeners.filter(\n            listenerItem => listenerItem !== listener\n        );\n\n        this.eventListeners.set(experienceId, updateEventListeners);\n\n        return this;\n    };\n\n    public addEventListenerForCleanup = (experienceId: ExperienceIdentifier, cleanupCallback: CleanUpCallback) => {\n        const experienceIdentifierSpecificListenersForCleanup = this.cleanUpCallbacks.get(experienceId) ?? [];\n        experienceIdentifierSpecificListenersForCleanup.push(cleanupCallback);\n\n        this.cleanUpCallbacks.set(experienceId, experienceIdentifierSpecificListenersForCleanup);\n    };\n\n    public cleanUpCallbacksForExperience = (experienceId: ExperienceIdentifier) => {\n        const experienceIdentifierSpecificListenersForCleanup = this.cleanUpCallbacks.get(experienceId);\n\n        if (experienceIdentifierSpecificListenersForCleanup) {\n            experienceIdentifierSpecificListenersForCleanup.forEach(callback => callback());\n            this.cleanUpCallbacks.delete(experienceId);\n            this.eventListeners.set(experienceId, []);\n        }\n    };\n}\n","export interface LogProvider {\n    log: typeof console.log;\n    warn: typeof console.warn;\n    error: typeof console.error;\n    debug: typeof console.debug;\n    info: typeof console.info;\n}\n\n/**\n * Temporary abstraction for customer provided logger\n *\n */\nexport class DefaultLogger implements LogProvider {\n    log = console.log;\n\n    warn = console.warn;\n\n    error = console.error;\n\n    debug = console.debug;\n\n    info = console.info;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {v4} from 'uuid';\nimport {\n    EmbeddingContextFrameOptions,\n    ExperienceFrameMetadata,\n    IEmbeddingContext,\n} from '@common/embedding-context/types';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {VisualContentOptions} from '@experience/visual-experience/types';\nimport {VisualExperience} from '@experience/visual-experience/visual-experience';\nimport {DashboardContentOptions} from '@experience/dashboard-experience/types';\nimport {ConsoleContentOptions} from '@experience/console-experience/types';\nimport {QSearchContentOptions} from '@experience/q-search-experience/types';\nimport {GenerativeQnAContentOptions} from '@experience/generative-qna-experience/types';\nimport {ConsoleExperience} from '@experience/console-experience/console-experience';\nimport {DashboardExperience} from '@experience/dashboard-experience/dashboard-experience';\nimport {QSearchExperience} from '@experience/q-search-experience/q-search-experience';\nimport {GenerativeQnAExperience} from '@experience/generative-qna-experience/generative-qna-experience';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents} from '@common/events/types';\nimport {ChangeEvent} from '@common/events/events';\nimport {ControlExperience} from '@experience/control-experience/control-experience';\nimport {EventManager} from '@common/event-manager/event-manager';\nimport {DefaultLogger, LogProvider} from '../log-provider/log-provider';\n\n/**\n * The embedding context creates an additional zero-pixel iframe and appends it into the body element on the page to centralize communication between the SDK and the embedded QuickSight content\n */\nexport class EmbeddingContext implements IEmbeddingContext {\n    private readonly experienceIdentifiers: Set<string>;\n    private readonly eventManager: EventManager;\n    private readonly contextId: string;\n    private readonly contextOnChange;\n    private controlOptions?: ControlOptions;\n    private readonly logger: LogProvider;\n\n    constructor(contextFrameOptions: EmbeddingContextFrameOptions) {\n        // The contextId is shared with experiences to create a communication context\n        // Experiences with not-matching contextId is outside the communication context\n        this.contextId = v4();\n        this.experienceIdentifiers = new Set();\n\n        // The eventManager instance below is passed to all experiences to create a unified event management\n        this.eventManager = new EventManager();\n        this.contextOnChange = contextFrameOptions.onChange;\n        this.logger = new DefaultLogger();\n    }\n\n    public embedVisual = async (\n        frameOptions: FrameOptions,\n        contentOptions: VisualContentOptions = {}\n    ): Promise<VisualExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedVisual');\n        const controlOptions = this.buildControlOptions(frameOptions);\n\n        return new VisualExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedDashboard = async (\n        frameOptions: FrameOptions,\n        contentOptions: DashboardContentOptions = {}\n    ): Promise<DashboardExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedDashboard');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new DashboardExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedConsole = async (\n        frameOptions: FrameOptions,\n        contentOptions: ConsoleContentOptions = {}\n    ): Promise<ConsoleExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedConsole');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new ConsoleExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedQSearchBar = async (\n        frameOptions: FrameOptions,\n        contentOptions: QSearchContentOptions = {}\n    ): Promise<QSearchExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedQSearchBar');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new QSearchExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedGenerativeQnA = async (\n        frameOptions: FrameOptions,\n        contentOptions: GenerativeQnAContentOptions = {}\n    ): Promise<GenerativeQnAExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedGenerativeQnA');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new GenerativeQnAExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    private validateFrameOptions = (frameOptions: FrameOptions, methodName: string) => {\n        if (!frameOptions) {\n            const errorMessage = `${methodName} is called without frameOptions`;\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.NO_FRAME_OPTIONS,\n                    ChangeEventLevel.ERROR,\n                    `${methodName} is called without frameOptions`,\n                    {\n                        methodName,\n                    }\n                ),\n                {frame: null}\n            );\n            throw new Error(errorMessage);\n        }\n\n        if (typeof frameOptions !== 'object' || Array.isArray(frameOptions)) {\n            const errorMessage = `${methodName} is called with non-object frameOptions`;\n            this.onChange(\n                new ChangeEvent(ChangeEventName.INVALID_FRAME_OPTIONS, ChangeEventLevel.ERROR, errorMessage, {\n                    methodName,\n                    frameOptionsType: Array.isArray(frameOptions) ? 'array' : typeof frameOptions,\n                }),\n                {frame: null}\n            );\n            throw new Error(errorMessage);\n        }\n\n        const recognizedKeys = [\n            'url',\n            'container',\n            'width',\n            'height',\n            'resizeHeightOnSizeChangedEvent',\n            'withIframePlaceholder',\n            'onChange',\n            'className',\n        ];\n\n        const unrecognizedFrameOptionNames = Object.keys(frameOptions).filter(key => !recognizedKeys.includes(key));\n\n        if (unrecognizedFrameOptionNames.length > 0) {\n            const warnMessage = `${methodName} is called with unrecognized properties`;\n            frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.UNRECOGNIZED_FRAME_OPTIONS, ChangeEventLevel.WARN, warnMessage, {\n                    unrecognizedFrameOptions: unrecognizedFrameOptionNames,\n                }),\n                {frame: null}\n            );\n\n            this.logger?.warn(warnMessage);\n        }\n    };\n\n    private buildControlOptions = (frameOptions: FrameOptions): ControlOptions => {\n        if (!this.controlOptions) {\n            if (!frameOptions.url) {\n                throw new Error('URL is missing in frame options, but is a required field');\n            }\n\n            const urlInfo = this.getControlUrlInfo(frameOptions.url);\n\n            const controlFrame = new ControlExperience(\n                this.getBodyElement(),\n                {\n                    eventManager: this.eventManager,\n                    urlInfo,\n                    contextId: this.contextId,\n                },\n                this.onChange,\n                this.logger\n            );\n\n            this.controlOptions = {\n                eventManager: this.eventManager,\n                sendToControlFrame: controlFrame.send,\n                contextId: this.contextId,\n                timeout: ControlExperience.FRAME_TIMEOUT,\n                urlInfo,\n            };\n        }\n\n        return this.controlOptions;\n    };\n\n    private onChange = (event: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        if (this.contextOnChange) {\n            this.contextOnChange(event, metadata);\n        }\n    };\n\n    private getControlUrlInfo = (url: string) => {\n        const matches: Array<string> = /^(https:\\/\\/[^/]+)\\/(embedding|embed)\\/([^/]+)\\/[^?]+\\?(.*)/i.exec(url) || [];\n\n        if (matches?.length < 4) {\n            throw new Error(`Invalid embedding url: \"${url}\"`);\n        }\n\n        return {\n            sessionId: matches[3],\n            host: matches[1],\n            urlSearchParams: new URLSearchParams(matches[4]),\n        };\n    };\n\n    private getBodyElement = () => {\n        // body element on a page is required to embed the redeem and control frames\n        const body = document.getElementsByTagName('body')?.[0];\n\n        if (!body) {\n            const message = 'could not locate <body> element in the page';\n            this.onChange(new ChangeEvent(ChangeEventName.NO_BODY, ChangeEventLevel.ERROR, message), {frame: null});\n\n            throw new Error(message);\n        }\n\n        return body;\n    };\n}\n\nexport const createEmbeddingContext = async (frameOptions: EmbeddingContextFrameOptions = {}) => {\n    return new EmbeddingContext(frameOptions);\n};\n","import * as EventMessages from '@common/events/messages';\nimport * as EventTypes from '@common/events/types';\nimport * as EventManagerTypes from '@common/event-manager/types';\nimport * as EmbeddingContextTypes from '@common/embedding-context/types';\nimport * as IframeTypes from '@common/iframe/types';\nimport * as CommonTypes from './common/types';\n\nimport * as BaseExperienceTypes from '@experience/base-experience/types';\nimport * as ConsoleExperienceTypes from '@experience/console-experience/types';\nimport * as DashboardExperienceTypes from '@experience/dashboard-experience/types';\nimport * as ControlExperienceTypes from '@experience/control-experience/types';\nimport * as QSearchExperienceTypes from '@experience/q-search-experience/types';\nimport * as VisualExperienceTypes from '@experience/visual-experience/types';\nimport * as GenerativeQnAExperienceTypes from '@experience/generative-qna-experience/types';\nimport * as InternalQBaseExperienceTypes from '@experience/internal-q-base-experience/types';\n\nexport * from './common';\nexport * from './experiences';\n\n/**\n * Namespaces enums under one import for convenience\n *\n * @deprecated - Enums can be imported directly\n */\nexport const QSE = {\n    ...CommonTypes,\n    ...EventMessages,\n    ...EventTypes,\n    ...EventManagerTypes,\n    ...EmbeddingContextTypes,\n    ...IframeTypes,\n    ...BaseExperienceTypes,\n    ...ConsoleExperienceTypes,\n    ...DashboardExperienceTypes,\n    ...QSearchExperienceTypes,\n    ...ControlExperienceTypes,\n    ...VisualExperienceTypes,\n    ...GenerativeQnAExperienceTypes,\n    ...InternalQBaseExperienceTypes,\n};\n"],"names":["InfoMessageEventName","CALLBACK_OPERATION_INVOKED","CONTENT_LOADED","EXPERIENCE_INITIALIZED","ERROR_OCCURRED","SIZE_CHANGED","PARAMETERS_CHANGED","SELECTED_SHEET_CHANGED","MODAL_OPENED","Q_SEARCH_CLOSED","Q_SEARCH_OPENED","Q_SEARCH_FOCUSED","Q_SEARCH_SIZE_CHANGED","Q_SEARCH_ENTERED_FULLSCREEN","Q_SEARCH_EXITED_FULLSCREEN","Q_PANEL_ENTERED_FULLSCREEN","Q_PANEL_EXITED_FULLSCREEN","PAGE_NAVIGATION","InfoChangeEventName","FRAME_STARTED","FRAME_MOUNTED","FRAME_LOADED","FRAME_REMOVED","ErrorChangeEventName","FRAME_NOT_CREATED","NO_BODY","NO_CONTAINER","INVALID_CONTAINER","NO_URL","INVALID_URL","NO_FRAME_OPTIONS","INVALID_FRAME_OPTIONS","WarnChangeEventName","UNRECOGNIZED_CONTENT_OPTIONS","UNRECOGNIZED_FRAME_OPTIONS","UNRECOGNIZED_EVENT_TARGET","SetterMessageEventName","SET_PARAMETERS","SET_SELECTED_SHEET_ID","SET_Q_SEARCH_QUESTION","SET_VISUAL_ACTIONS","SET_THEME","ADD_FILTER_GROUPS","UPDATE_FILTER_GROUPS","REMOVE_FILTER_GROUPS","ADD_VISUAL_ACTIONS","REMOVE_VISUAL_ACTIONS","SET_THEME_OVERRIDE","PRELOAD_THEMES","CREATE_SHARED_VIEW","GetterMessageEventName","GET_PARAMETERS","GET_SHEETS","GET_SHEET_VISUALS","GET_VISUAL_ACTIONS","GET_SELECTED_SHEET_ID","GET_FILTER_GROUPS_FOR_SHEET","GET_FILTER_GROUPS_FOR_VISUAL","InvokerMessageEventName","ACKNOWLEDGE","INITIATE_PRINT","NAVIGATE_TO_DASHBOARD","CLOSE_Q_SEARCH","UNDO","REDO","RESET","TOGGLE_BOOKMARKS_PANE","ChangeEventName","_objectSpread","MessageEventName","ChangeEventLevel","ERROR","INFO","WARN","ExperienceType","CONSOLE","CONTEXT","CONTROL","VISUAL","DASHBOARD","QSEARCH","GENERATIVEQNA","SPECIAL_DATAPOINT_VALUE_TYPES","NULL","OTHER_BUCKET","CALCULATED_METRIC_COLUMN_TYPE","INTEGER","STRING","DECIMAL","DATETIME","GenerativeQnAPanelType","FULL","SEARCH_BAR","EmbeddingEvent","_createClass","eventName","message","data","_classCallCheck","this","ChangeEvent","_EmbeddingEvent","eventLevel","_this","_callSuper","_inherits","EmbeddingMessageEvent","_EmbeddingEvent2","_this2","TargetedMessageEvent","_EmbeddingMessageEven","eventTarget","_this3","PostMessageEvent","_TargetedMessageEvent","eventId","timestamp","version","_this4","ResponseMessage","SuccessResponse","_defineProperty","ErrorResponse","errorResponse","errorCode","error","DataResponse","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error","byteToHex","i","push","toString","slice","native","randomUUID","v4","options","buf","offset","rnds","random","arr","unsafeStringify","BaseExperience","frameOptions","contentOptions","controlOptions","experienceIdentifiers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messageEvent","targetedMessageEvent","wrap","_context","prev","next","experienceFrame","internalExperience","abrupt","send","stop","_x","apply","arguments","listener","addInternalEventListener","logProvider","logger","experience","experienceIdentifier","discriminator","contextId","getExperienceIdentifier","has","add","filteredOptions","unrecognizedContentOptions","warnUnrecognizedContentOptions","Object","keys","unrecognizedProperties","_this$frameOptions$on","_this$frameOptions","_this$logger","length","onChange","call","frame","warn","url","_this$frameOptions$on2","_this$frameOptions2","validateFrameOptions","experienceType","dashboardId","filter","Boolean","join","sheetId","visualId","includes","maxInt","errors","overflow","floor","Math","stringFromCharCode","String","fromCharCode","type","RangeError","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","baseMinusTMin","base","encode","input","output","string","counter","value","charCodeAt","extra","ucs2decode","inputLength","n","bias","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","t","qMinusT","baseMinusT","Iframe","IFRAME_CLASS_NAME","iframe","withIframePlaceholder","iframePlaceholder","document","createElement","id","concat","iframeName","style","width","backgroundColor","display","justifyContent","alignItems","className","height","endsWith","appendChild","loaderSVG","createLoaderSVG","container","classNames","trim","name","loading","border","padding","opacity","position","payload","postRequest","createPostRequest","src","target","event","_this$onLoad","_this$postRequest","remove","transition","onLoad","postRequestOptions","form","visibility","method","action","forEach","payloadItem","submit","tagName","attributes","styles","undefined","children","element","createElementNS","entries","_ref2","_slicedToArray","setAttribute","_ref3","_ref4","setProperty","child","circles","map","animate","createSvgElement","attributeName","dur","values","repeatCount","begin","fill","stroke","cx","cy","r","x","y","viewBox","_options$width","_options$height","createIframePlaceholder","createIframe","addEventListener","onLoadLocal","SDK_VERSION","BaseExperienceFrame","transformedContentOptions","interceptMessage","sendToControlFrame","parameters","_typeof","key","Array","isArray","encodedName","encodeURIComponent","encodedValue","reduce","memoizedOptions","_ref5","punyCodeEmbedOrigin","window","location","origin","sdkVersion","URLSearchParams","setTimeoutInstance","experienceId","onLoadHandler","getIframe","err","handler","metadata","eventManager","removeEventListener","timeoutInstance","setTimeout","timeout","_callee2","_context2","clearTimeout","_container","querySelector","nodeName","changeEvent","onMessage","interceptOnMessage","mutationObserver","MutationObserver","mutations","some","record","from","removedNodes","node","cleanUpCallbacksForExperience","disconnect","observe","body","childList","subtree","decorateOnChange","decorateOnMessage","getContainer","validateBaseUrl","origin_url","initializeMutationObserver","VisualExperienceFrame","_BaseExperienceFrame","baseUrl","_this$transformedCont","otherOptions","_objectWithoutProperties","_excluded","_this$internalExperie","buildQueryString","buildParameterString","buildExperienceUrl","createExperienceIframe","VisualExperience","_BaseExperience","_callee3","filterGroups","_context3","_x2","_callee4","_context4","_x3","_callee5","_context5","_x4","_callee6","response","_context6","sent","_callee7","_context7","_ref8","_callee8","actions","_context8","Actions","_x5","_ref9","_callee9","_context9","_x6","_ref10","_callee10","_context10","_x7","_ref11","_callee11","themeArn","_context11","ThemeArn","_x8","_ref12","_callee12","themeOverride","_context12","ThemeOverride","_x9","_ref13","_callee13","preloadThemes","_context13","PreloadThemes","_x10","matches","exec","_this$contentOptions","_this$contentOptions2","_metadata$frame","_metadata$frame$setAt","_messageEvent$message","resizeHeightOnSizeChangedEvent","themeOptions","setThemeOverride","setPreloadThemes","fitToIframeWidth","locale","transformContentOptions","parametersAsObject","parameter","Name","Values","extractExperienceFromUrl","_this$getInternalExpe","getInternalExperienceInfo","transformVisualContentOptions","ConsoleExperienceFrame","ConsoleExperience","currentPage","pageType","DashboardExperienceFrame","viewId","URL","pathname","href","DashboardExperience","_ref7","SheetId","VisualId","_x11","_ref14","_callee14","_context14","_x12","_x13","_x14","_callee15","_context15","_ref16","_callee16","_context16","_x15","_ref17","_callee17","_context17","_x16","_ref18","_callee18","navigateToDashboardOptions","_context18","DashboardId","Parameters","_x17","_x18","_ref19","_callee19","_context19","_x19","_x20","_x21","_ref20","_callee20","_context20","_x22","_ref21","_callee21","_context21","_x23","_callee22","_context22","_ref23","_callee23","_context23","_x24","_ref24","_callee24","_context24","_x25","_callee25","_context25","_toolbarOptions$expor","attributionOptions","sheetOptions","toolbarOptions","overlayContent","footerPaddingEnabled","print","printEnabled","undoRedo","undoRedoDisabled","reset","resetDisabled","bookmarks","showBookmarksIcon","initialSheetId","singleSheet","sheetTabsDisabled","emitSizeChangedEventOnSheetChange","resizeOnSheetChange","transformDashboardContentOptions","QSearchExperienceFrame","InternalQBaseExperience","_len","args","_key","question","clickHandler","_this$experienceFrame","contains","close","addEventListenerForCleanup","_metadata$frame2","frameStyles","top","left","zIndex","MAX_Z_INDEX","QSearchExperience","_InternalQBaseExperie","trackOutsideClicks","enterFullScreen","exitFullScreen","hideIcon","hideTopicName","theme","allowTopicSelection","qBarIconDisabled","qBarTopicNameDisabled","themeId","transformQSearchContentOptions","GenerativeQnAExperienceFrame","GenerativeQnAExperience","panelOptions","panelType","markUnrecognized","properties","prefix","showTopicName","showPinboard","allowFullscreen","searchPlaceholderText","qShowTopicName","qShowPinboard","qAllowTopicSelection","qAllowFullscreen","checkMaxLength","qSearchPlaceholderText","qPanelType","title","showQIcon","unrecognizedPanelOptions","_excluded2","qPanelTitle","qShowPanelIcon","focusedHeight","expandedHeight","_excluded3","qPanelFocusedHeight","qPanelExpandedHeight","propertyName","maxLength","TEXT_PROPERTY_MAX_LENGTH","transformGenerativeQnAContentOptions","ControlExperienceFrame","ControlExperience","controlExperienceFrame","isMessageEvent","incomingExperienceIdentifier","invokeEventListener","sendAcknowledgment","_this$onChange","_window$requestIdleCa","_window","acknowledgment","requestIdleCallback","_this$urlInfo","urlInfo","host","sessionId","urlString","controlExperienceId","getControlExperienceId","getControlExperienceBaseUrl","FRAME_TIMEOUT","controlFrameMessageListener","EventManager","cleanUp","experienceIdentifierSpecificListeners","eventListeners","get","set","updateEventListeners","listenerItem","cleanupCallback","_this$cleanUpCallback","experienceIdentifierSpecificListenersForCleanup","cleanUpCallbacks","callback","Map","DefaultLogger","console","log","debug","info","EmbeddingContext","contextFrameOptions","_args","buildControlOptions","setLogProvider","_args2","_args3","_args4","_args5","methodName","errorMessage","frameOptionsType","recognizedKeys","unrecognizedFrameOptionNames","_frameOptions$onChang","warnMessage","unrecognizedFrameOptions","getControlUrlInfo","controlFrame","getBodyElement","contextOnChange","urlSearchParams","_document$getElements","getElementsByTagName","Set","createEmbeddingContext","_ref6","_args6","QSE","CommonTypes","EventMessages","EventTypes","EventManagerTypes","EmbeddingContextTypes","IframeTypes","BaseExperienceTypes","ConsoleExperienceTypes","DashboardExperienceTypes","QSearchExperienceTypes","ControlExperienceTypes","VisualExperienceTypes","GenerativeQnAExperienceTypes","InternalQBaseExperienceTypes"],"mappings":"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","x_google_ignoreList":[10,11,12,13,15]}