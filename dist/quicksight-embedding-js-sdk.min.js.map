{"version":3,"file":"quicksight-embedding-js-sdk.min.js","sources":["../src/common/events/messages/info/index.ts","../src/common/events/messages/change/index.ts","../src/common/events/messages/setters/index.ts","../src/common/events/messages/getters/index.ts","../src/common/events/messages/invokers/index.ts","../src/common/events/types.ts","../src/experiences/base-experience/types.ts","../src/experiences/dashboard-experience/types.ts","../src/experiences/generative-qna-experience/types.ts","../src/common/events/events.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/v4.js","../src/experiences/base-experience/base-experience.ts","../node_modules/punycode/punycode.es6.js","../src/common/iframe/iframe.ts","../src/experiences/base-experience/frame/experience-frame.ts","../src/experiences/visual-experience/frame/visual-experience-frame.ts","../src/experiences/visual-experience/visual-experience.ts","../src/experiences/console-experience/frame/console-experience-frame.ts","../src/experiences/console-experience/console-experience.ts","../src/experiences/dashboard-experience/frame/dashboard-experience-frame.ts","../src/experiences/dashboard-experience/dashboard-experience.ts","../src/experiences/q-search-experience/frame/q-search-experience-frame.ts","../src/experiences/internal-q-base-experience/internal-q-base-experience.ts","../src/experiences/q-search-experience/q-search-experience.ts","../src/experiences/generative-qna-experience/frame/generative-qna-experience-frame.ts","../src/experiences/generative-qna-experience/generative-qna-experience.ts","../src/experiences/control-experience/frame/control-experience-frame.ts","../src/experiences/control-experience/control-experience.ts","../src/common/event-manager/event-manager.ts","../src/common/log-provider/log-provider.ts","../src/common/embedding-context/embedding-context.ts","../src/index.ts"],"sourcesContent":["import {EmbeddingEvent, TargetedMessageEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {Datapoint} from '@experience/dashboard-experience/types';\n\nexport const InfoMessageEventName = {\n    CALLBACK_OPERATION_INVOKED: 'CALLBACK_OPERATION_INVOKED',\n    CONTENT_LOADED: 'CONTENT_LOADED',\n    EXPERIENCE_INITIALIZED: 'EXPERIENCE_INITIALIZED',\n    ERROR_OCCURRED: 'ERROR_OCCURRED',\n    SIZE_CHANGED: 'SIZE_CHANGED',\n    PARAMETERS_CHANGED: 'PARAMETERS_CHANGED',\n    SELECTED_SHEET_CHANGED: 'SELECTED_SHEET_CHANGED',\n    MODAL_OPENED: 'MODAL_OPENED',\n    Q_SEARCH_CLOSED: 'Q_SEARCH_CLOSED',\n    Q_SEARCH_OPENED: 'Q_SEARCH_OPENED',\n    Q_SEARCH_FOCUSED: 'Q_SEARCH_FOCUSED',\n    Q_SEARCH_SIZE_CHANGED: 'Q_SEARCH_SIZE_CHANGED',\n    Q_SEARCH_ENTERED_FULLSCREEN: 'Q_SEARCH_ENTERED_FULLSCREEN',\n    Q_SEARCH_EXITED_FULLSCREEN: 'Q_SEARCH_EXITED_FULLSCREEN',\n    Q_PANEL_ENTERED_FULLSCREEN: 'Q_PANEL_ENTERED_FULLSCREEN',\n    Q_PANEL_EXITED_FULLSCREEN: 'Q_PANEL_EXITED_FULLSCREEN',\n    PAGE_NAVIGATION: 'PAGE_NAVIGATION',\n} as const;\n\nexport type InfoMessageEventName = (typeof InfoMessageEventName)[keyof typeof InfoMessageEventName];\n\nexport type InfoMessageEvents =\n    | EmbeddingEvent<typeof InfoMessageEventName.CONTENT_LOADED, {title?: string}>\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.CALLBACK_OPERATION_INVOKED,\n          {\n              CustomActionId: string;\n              DashboardId: string;\n              VisualId: string;\n              SheetId: string;\n              Datapoints: Datapoint[];\n          }\n      >\n    | EmbeddingEvent<typeof InfoMessageEventName.SIZE_CHANGED, {height?: string; width?: string}>\n    | TargetedMessageEvent<typeof InfoMessageEventName.EXPERIENCE_INITIALIZED, object>\n    | EmbeddingEvent<typeof InfoMessageEventName.ERROR_OCCURRED, {errorCode?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.MODAL_OPENED, undefined>\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.PARAMETERS_CHANGED,\n          {\n              changedParameters: Parameter[];\n          }\n      >\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.SELECTED_SHEET_CHANGED,\n          {selectedSheet: {Name?: string; SheetId: string}}\n      >\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_CLOSED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_OPENED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_FOCUSED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_SIZE_CHANGED, {height?: number}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_ENTERED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_EXITED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_PANEL_ENTERED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_PANEL_EXITED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.PAGE_NAVIGATION, {pageType?: string}>;\n","import {ChangeEvent} from '@common/events/events';\n\nexport const InfoChangeEventName = {\n    FRAME_STARTED: 'FRAME_STARTED',\n    FRAME_MOUNTED: 'FRAME_MOUNTED',\n    FRAME_LOADED: 'FRAME_LOADED',\n    FRAME_REMOVED: 'FRAME_REMOVED',\n} as const;\n\nexport type InfoChangeEventName = (typeof InfoChangeEventName)[keyof typeof InfoChangeEventName];\n\nexport const ErrorChangeEventName = {\n    FRAME_NOT_CREATED: 'FRAME_NOT_CREATED',\n    NO_BODY: 'NO_BODY',\n    NO_CONTAINER: 'NO_CONTAINER',\n    INVALID_CONTAINER: 'INVALID_CONTAINER',\n    NO_URL: 'NO_URL',\n    INVALID_URL: 'INVALID_URL',\n    NO_FRAME_OPTIONS: 'NO_FRAME_OPTIONS',\n    INVALID_FRAME_OPTIONS: 'INVALID_FRAME_OPTIONS',\n} as const;\n\nexport type ErrorChangeEventName = (typeof ErrorChangeEventName)[keyof typeof ErrorChangeEventName];\n\nexport const WarnChangeEventName = {\n    UNRECOGNIZED_CONTENT_OPTIONS: 'UNRECOGNIZED_CONTENT_OPTIONS',\n    UNRECOGNIZED_FRAME_OPTIONS: 'UNRECOGNIZED_FRAME_OPTIONS',\n    UNRECOGNIZED_EVENT_TARGET: 'UNRECOGNIZED_EVENT_TARGET',\n} as const;\n\nexport type WarnChangeEventName = (typeof WarnChangeEventName)[keyof typeof WarnChangeEventName];\n\nexport type ChangeMessageEvents =\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_LOADED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_MOUNTED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_STARTED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_REMOVED, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_CONTENT_OPTIONS, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_FRAME_OPTIONS, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_EVENT_TARGET, string>\n    | ChangeEvent<typeof ErrorChangeEventName.FRAME_NOT_CREATED, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_BODY, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_CONTAINER, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_CONTAINER, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_URL, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_URL, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_FRAME_OPTIONS, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_FRAME_OPTIONS, string>;\n","import {EmbeddingMessageEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {VisualAction} from '@experience/dashboard-experience/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport const SetterMessageEventName = {\n    SET_PARAMETERS: 'SET_PARAMETERS',\n    SET_SELECTED_SHEET_ID: 'SET_SELECTED_SHEET_ID',\n    SET_Q_SEARCH_QUESTION: 'SET_Q_SEARCH_QUESTION',\n    SET_VISUAL_ACTIONS: 'SET_VISUAL_ACTIONS',\n    SET_THEME: 'SET_THEME',\n    ADD_FILTER_GROUPS: 'ADD_FILTER_GROUPS',\n    UPDATE_FILTER_GROUPS: 'UPDATE_FILTER_GROUPS',\n    REMOVE_FILTER_GROUPS: 'REMOVE_FILTER_GROUPS',\n    ADD_VISUAL_ACTIONS: 'ADD_VISUAL_ACTIONS',\n    REMOVE_VISUAL_ACTIONS: 'REMOVE_VISUAL_ACTIONS',\n    SET_THEME_OVERRIDE: 'SET_THEME_OVERRIDE',\n    PRELOAD_THEMES: 'PRELOAD_THEMES',\n    CREATE_SHARED_VIEW: 'CREATE_SHARED_VIEW',\n} as const;\n\nexport type SetterMessageEventName = (typeof SetterMessageEventName)[keyof typeof SetterMessageEventName];\n\nexport type SetterMessageEvents =\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_PARAMETERS, Parameter[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.REMOVE_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.ADD_FILTER_GROUPS, FilterGroup[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.UPDATE_FILTER_GROUPS, FilterGroup[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.REMOVE_FILTER_GROUPS, FilterGroup[] | string[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.ADD_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_THEME, {themeArn?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_Q_SEARCH_QUESTION, {question?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_SELECTED_SHEET_ID, {sheetId?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.PRELOAD_THEMES, string[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_THEME_OVERRIDE, ThemeConfiguration>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.CREATE_SHARED_VIEW, {viewId?: string}>;\n","import {EmbeddingEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {Sheet, Visual, VisualAction} from '@experience/dashboard-experience/types';\nimport type {FilterGroup} from '@aws-sdk/client-quicksight';\n\nexport const GetterMessageEventName = {\n    GET_PARAMETERS: 'GET_PARAMETERS',\n    GET_SHEETS: 'GET_SHEETS',\n    GET_SHEET_VISUALS: 'GET_SHEET_VISUALS',\n    GET_VISUAL_ACTIONS: 'GET_VISUAL_ACTIONS',\n    GET_SELECTED_SHEET_ID: 'GET_SELECTED_SHEET_ID',\n    GET_FILTER_GROUPS_FOR_SHEET: 'GET_FILTER_GROUPS_FOR_SHEET',\n    GET_FILTER_GROUPS_FOR_VISUAL: 'GET_FILTER_GROUPS_FOR_VISUAL',\n} as const;\n\nexport type GetterMessageEventName = (typeof GetterMessageEventName)[keyof typeof GetterMessageEventName];\n\nexport type GetterMessageEvents =\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_PARAMETERS, Parameter[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SHEETS, Sheet[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SHEET_VISUALS, Visual[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SELECTED_SHEET_ID, string>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_FILTER_GROUPS_FOR_SHEET, FilterGroup[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_FILTER_GROUPS_FOR_VISUAL, FilterGroup[]>;\n","import {InternalExperiences} from '@experience/base-experience/types';\nimport {EmbeddingMessageEvent, ErrorResponse, SuccessResponse, TargetedMessageEvent} from '@common/events/events';\n\nexport const InvokerMessageEventName = {\n    ACKNOWLEDGE: 'ACKNOWLEDGE',\n    INITIATE_PRINT: 'INITIATE_PRINT',\n    NAVIGATE_TO_DASHBOARD: 'NAVIGATE_TO_DASHBOARD',\n    CLOSE_Q_SEARCH: 'CLOSE_Q_SEARCH',\n    UNDO: 'UNDO',\n    REDO: 'REDO',\n    RESET: 'RESET',\n    TOGGLE_BOOKMARKS_PANE: 'TOGGLE_BOOKMARKS_PANE',\n} as const;\n\nexport type InvokerMessageEventName = (typeof InvokerMessageEventName)[keyof typeof InvokerMessageEventName];\n\nexport type InvokerMessageEvents =\n    | TargetedMessageEvent<\n          typeof InvokerMessageEventName.ACKNOWLEDGE,\n          {eventName: string; eventTarget?: InternalExperiences}\n      >\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.INITIATE_PRINT, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.NAVIGATE_TO_DASHBOARD, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.CLOSE_Q_SEARCH, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.UNDO, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.REDO, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.RESET, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.TOGGLE_BOOKMARKS_PANE, SuccessResponse | ErrorResponse>;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Sheet, Visual, VisualAction} from '../../experiences/dashboard-experience';\nimport {EmbeddingIFrameElement} from '../iframe';\nimport {InternalExperiences} from '../../experiences/base-experience';\nimport {Parameter} from '../types';\nimport {\n    InvokerMessageEventName,\n    GetterMessageEventName,\n    SetterMessageEventName,\n    InfoMessageEventName,\n    InfoChangeEventName,\n    ErrorChangeEventName,\n    WarnChangeEventName,\n    ChangeMessageEvents,\n    GetterMessageEvents,\n    SetterMessageEvents,\n    InfoMessageEvents,\n    InvokerMessageEvents,\n} from './messages';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport const ChangeEventName = {\n    ...InfoChangeEventName,\n    ...ErrorChangeEventName,\n    ...WarnChangeEventName,\n} as const;\n\nexport type ChangeEventName = (typeof ChangeEventName)[keyof typeof ChangeEventName];\n\nexport const MessageEventName = {\n    ...InfoMessageEventName,\n    ...SetterMessageEventName,\n    ...GetterMessageEventName,\n    ...InvokerMessageEventName,\n} as const;\n\nexport type MessageEventName = (typeof MessageEventName)[keyof typeof MessageEventName];\n\nexport const ChangeEventLevel = {\n    ERROR: 'ERROR',\n    INFO: 'INFO',\n    WARN: 'WARN',\n} as const;\n\nexport type ChangeEventLevel = (typeof ChangeEventLevel)[keyof typeof ChangeEventLevel];\n\nexport type EventNames = MessageEventName | ChangeEventName;\n\nexport type EventMessageValues =\n    | string\n    | string[]\n    | {height?: string}\n    | Visual[]\n    | number\n    | EmbeddingIFrameElement\n    | InternalExperiences\n    | Record<string, unknown>\n    | Parameter[]\n    | VisualAction[]\n    | FilterGroup[]\n    | Sheet[]\n    | undefined\n    | {success?: boolean}\n    | ThemeConfiguration;\n\nexport type EventData = Record<\n    string,\n    string | number | string[] | InternalExperiences | {frame?: EmbeddingIFrameElement} | unknown\n>;\n\nexport type EmbeddingEvents =\n    | ChangeMessageEvents\n    | GetterMessageEvents\n    | SetterMessageEvents\n    | InfoMessageEvents\n    | InvokerMessageEvents;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    InternalVisualExperience,\n    IVisualExperience,\n    TransformedVisualContentOptions,\n    VisualContentOptions,\n} from '../visual-experience';\nimport {\n    DashboardContentOptions,\n    IDashboardExperience,\n    InternalDashboardExperience,\n    TransformedDashboardContentOptions,\n} from '../dashboard-experience';\nimport {\n    InternalQSearchExperience,\n    IQSearchExperience,\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n} from '../q-search-experience';\nimport {\n    ConsoleContentOptions,\n    IConsoleExperience,\n    InternalConsoleExperience,\n    TransformedConsoleContentOptions,\n} from '../console-experience';\nimport {\n    GenerativeQnAContentOptions,\n    IGenerativeQnAExperience,\n    InternalGenerativeQnAExperience,\n    TransformedGenerativeQnAContentOptions,\n} from '../generative-qna-experience';\nimport {ControlContentOptions, IControlExperience, InternalControlExperience} from '../control-experience';\nimport {IContextExperience, InternalContextExperience} from '../../common/embedding-context';\nimport {EventListener} from '../../common/event-manager';\n\nexport type ContentOptions =\n    | VisualContentOptions\n    | DashboardContentOptions\n    | QSearchContentOptions\n    | ConsoleContentOptions\n    | ControlContentOptions\n    | GenerativeQnAContentOptions;\n\nexport type FrameOptions = {\n    url: string;\n    container: string | HTMLElement;\n    width?: string;\n    height?: string;\n    resizeHeightOnSizeChangedEvent?: boolean;\n    withIframePlaceholder?: boolean | HTMLElement;\n    className?: string;\n    origin_url?: string;\n    onChange?: EventListener;\n};\n\nexport type TransformedContentOptions =\n    | TransformedConsoleContentOptions\n    | TransformedDashboardContentOptions\n    | TransformedQSearchContentOptions\n    | TransformedVisualContentOptions\n    | TransformedGenerativeQnAContentOptions\n    | object;\n\nexport type Experiences =\n    | IConsoleExperience\n    | IContextExperience\n    | IControlExperience\n    | IVisualExperience\n    | IDashboardExperience\n    | IQSearchExperience\n    | IGenerativeQnAExperience;\n\nexport type InternalExperiences =\n    | InternalConsoleExperience\n    | InternalContextExperience\n    | InternalControlExperience\n    | InternalVisualExperience\n    | InternalDashboardExperience\n    | InternalQSearchExperience\n    | InternalGenerativeQnAExperience;\n\nexport interface InternalExperienceInfo<InternalExperience extends InternalExperiences> {\n    experienceIdentifier: string;\n    internalExperience: InternalExperience;\n}\n\nexport const ExperienceType = {\n    CONSOLE: 'CONSOLE',\n    CONTEXT: 'CONTEXT',\n    CONTROL: 'CONTROL',\n    VISUAL: 'VISUAL',\n    DASHBOARD: 'DASHBOARD',\n    QSEARCH: 'QSEARCH',\n    GENERATIVEQNA: 'QSEARCH', // Internal experience type unchanged from QSEARCH\n} as const;\n\nexport type ExperienceType = (typeof ExperienceType)[keyof typeof ExperienceType];\n\nexport interface IBaseExperience {\n    experienceType: ExperienceType;\n    discriminator?: number;\n}\n\nexport interface BaseContentOptions {\n    onMessage?: EventListener;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Parameter, ParametersAsObject, ThemeOptions} from '../../common';\nimport {BaseContentOptions, ExperienceType, IBaseExperience} from '../base-experience';\nimport type {\n    ColumnIdentifier,\n    AggregationFunction,\n    DateDimensionField,\n    VisualCustomActionOperation,\n    VisualCustomAction,\n    ThemeConfiguration,\n} from '@aws-sdk/client-quicksight';\n\nexport interface IDashboardExperience extends IBaseExperience {\n    experienceType: typeof ExperienceType.DASHBOARD;\n    dashboardId: string;\n}\n\nexport interface InternalDashboardExperience extends IDashboardExperience {\n    contextId: string;\n}\n\nexport interface DashboardContentOptions extends BaseContentOptions {\n    parameters?: Parameter[];\n    locale?: string;\n    attributionOptions?: AttributionOptions;\n    toolbarOptions?: ToolbarOptions;\n    sheetOptions?: SheetOptions;\n    themeOptions?: ThemeOptions;\n    viewId?: string;\n}\n\nexport interface TransformedDashboardContentOptions extends BaseContentOptions {\n    parameters?: ParametersAsObject;\n    locale?: string;\n    sheetId?: string | undefined;\n    footerPaddingEnabled?: boolean;\n    undoRedoDisabled?: boolean;\n    printEnabled?: boolean;\n    showBookmarksIcon?: boolean;\n    resetDisabled?: boolean;\n    sheetTabsDisabled?: boolean;\n    resizeOnSheetChange?: boolean;\n    themeArn?: string;\n    themeOverride?: ThemeConfiguration;\n}\n\nexport interface ToolbarOption {\n    show?: true; // absence implies true\n}\n\nexport interface ExportToolbarOption extends ToolbarOption {\n    print?: boolean;\n}\n\nexport interface ToolbarOptions {\n    export?: boolean | ExportToolbarOption;\n    undoRedo?: boolean | ToolbarOption;\n    reset?: boolean | ToolbarOption;\n    bookmarks?: boolean | ToolbarOption;\n}\n\nexport interface AttributionOptions {\n    overlayContent?: boolean;\n}\n\nexport interface SheetOptions {\n    initialSheetId?: string;\n    singleSheet?: boolean;\n    emitSizeChangedEventOnSheetChange?: boolean;\n}\n\nexport type NavigateToDashboardOptions = {\n    parameters?: Parameter[];\n};\n\nexport interface Sheet {\n    Name: string;\n    SheetId: string;\n}\n\nexport interface Visual {\n    Name: string;\n    VisualId: string;\n}\n\nexport type BinDatapointRawValue = {\n    Min: number | null;\n    Max: number | null;\n    IsMaxInclusive: boolean;\n};\n\nexport interface DatapointRawValue {\n    String?: string;\n    Integer?: number;\n    Decimal?: number;\n    Date?: Date;\n    Bin?: BinDatapointRawValue;\n}\n\nexport const SPECIAL_DATAPOINT_VALUE_TYPES = {\n    NULL: null,\n    OTHER_BUCKET: null,\n} as const;\n\nexport const CALCULATED_METRIC_COLUMN_TYPE = {\n    INTEGER: null,\n    STRING: null,\n    DECIMAL: null,\n    DATETIME: null,\n} as const;\n\nexport interface DatapointFormattedValue {\n    Value: string;\n    Special?: keyof typeof SPECIAL_DATAPOINT_VALUE_TYPES;\n}\n\nexport interface MetricColumn {\n    Integer?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['NumericalAggregationFunction'];\n    };\n    Decimal?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['NumericalAggregationFunction'];\n    };\n    String?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['CategoricalAggregationFunction'];\n    };\n    DateTime?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['DateAggregationFunction'];\n    };\n    Calculated?: {\n        Column: ColumnIdentifier;\n        Expression: string;\n        Type: keyof typeof CALCULATED_METRIC_COLUMN_TYPE;\n    };\n    Bin?: {\n        Column: ColumnIdentifier;\n    };\n}\n\nexport interface FieldColumn {\n    Integer?: {\n        Column: ColumnIdentifier;\n    };\n    Decimal?: {\n        Column: ColumnIdentifier;\n    };\n    String?: {\n        Column: ColumnIdentifier;\n    };\n    DateTime?: {\n        Column: ColumnIdentifier;\n        TimeGranularity: DateDimensionField['DateGranularity'];\n    };\n}\n\nexport interface DatapointColumn {\n    Metric?: MetricColumn;\n    Field?: FieldColumn;\n}\n\nexport interface Datapoint {\n    FormattedValues: DatapointFormattedValue[];\n    RawValues: DatapointRawValue[];\n    Columns: DatapointColumn[];\n    SelectedColumnIndex?: number;\n}\n\nexport interface CallbackOperation {\n    EmbeddingMessage: object;\n}\n\nexport type ActionOperation = {\n    CallbackOperation: CallbackOperation;\n} & VisualCustomActionOperation;\n\nexport interface VisualAction extends VisualCustomAction {\n    ActionOperations: ActionOperation[];\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {BaseContentOptions, ExperienceType, IBaseExperience} from '../base-experience';\n\nexport interface IGenerativeQnAExperience extends IBaseExperience {\n    experienceType: typeof ExperienceType.GENERATIVEQNA;\n}\n\nexport interface InternalGenerativeQnAExperience extends IGenerativeQnAExperience {\n    contextId: string;\n}\n\nexport interface GenerativeQnAContentOptions extends BaseContentOptions {\n    showTopicName?: boolean;\n    showPinboard?: boolean;\n    allowTopicSelection?: boolean;\n    allowFullscreen?: boolean;\n    searchPlaceholderText?: string;\n    panelOptions?: GenerativeQnAPanelOptions;\n    themeOptions?: QThemeOptions;\n}\n\nexport interface TransformedGenerativeQnAContentOptions extends BaseContentOptions {\n    qShowTopicName?: boolean;\n    qShowPinboard?: boolean;\n    qAllowTopicSelection?: boolean;\n    qAllowFullscreen?: boolean;\n    qSearchPlaceholderText?: string;\n    qPanelType?: string;\n    qPanelTitle?: string;\n    qShowPanelIcon?: boolean;\n    qPanelFocusedHeight?: string;\n    qPanelExpandedHeight?: string;\n    themeArn?: string;\n}\n\nexport type GenerativeQnAPanelOptions = GenerativeQnAFullPanelOptions | GenerativeQnASearchBarOptions;\n\nexport const GenerativeQnAPanelType = {\n    FULL: 'FULL',\n    SEARCH_BAR: 'SEARCH_BAR',\n} as const;\n\nexport type GenerativeQnAFullPanelOptions = {\n    panelType: typeof GenerativeQnAPanelType.FULL;\n    title?: string;\n    showQIcon?: boolean;\n};\n\nexport type GenerativeQnASearchBarOptions = {\n    panelType: typeof GenerativeQnAPanelType.SEARCH_BAR;\n    focusedHeight?: string;\n    expandedHeight?: string;\n};\n\nexport type QThemeOptions = {\n    themeArn?: string;\n};\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ChangeEventLevel, ChangeEventName, EventData, EventMessageValues, EventNames, MessageEventName} from './types';\nimport {InternalExperiences} from '@experience/base-experience/types';\n\nexport abstract class EmbeddingEvent<\n    EventName extends EventNames = EventNames,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> {\n    public eventName: EventName;\n    public message?: EventMessageValue;\n    public data?: EventData;\n    public eventTarget?: InternalExperiences;\n\n    protected constructor(eventName: EventName, message?: EventMessageValue, data?: EventData) {\n        this.eventName = eventName;\n        this.message = message;\n        this.data = data;\n    }\n}\n\nexport class ChangeEvent<\n    EventName extends ChangeEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingEvent<EventName, EventMessageValue> {\n    public eventLevel: ChangeEventLevel;\n    constructor(eventName: EventName, eventLevel: ChangeEventLevel, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventLevel = eventLevel;\n    }\n}\n\nexport class EmbeddingMessageEvent<\n    EventName extends MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingEvent<EventName, EventMessageValue> {\n    public eventName: EventName;\n\n    constructor(eventName: EventName, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventName = eventName;\n    }\n}\n\nexport class TargetedMessageEvent<\n    EventName extends MessageEventName = MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingMessageEvent<EventName, EventMessageValue> {\n    public eventTarget: InternalExperiences;\n\n    constructor(eventName: EventName, eventTarget: InternalExperiences, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventTarget = eventTarget;\n    }\n}\n\nexport class PostMessageEvent<\n    EventName extends MessageEventName = MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends TargetedMessageEvent<EventName, EventMessageValue> {\n    public timestamp: number;\n    public version: string;\n    public eventId: string;\n\n    constructor(\n        eventName: EventName,\n        eventTarget: InternalExperiences,\n        eventId: string,\n        timestamp: number,\n        version: string,\n        message?: EventMessageValue,\n        data?: EventData\n    ) {\n        super(eventName, eventTarget, message, data);\n        this.timestamp = timestamp;\n        this.version = version;\n        this.eventId = eventId;\n    }\n}\n\nexport abstract class ResponseMessage<EventMessageValue extends EventMessageValues = EventMessageValues> {\n    public abstract success: boolean;\n    public message?: EventMessageValue;\n}\n\nexport class SuccessResponse implements ResponseMessage {\n    public success = true;\n}\n\nexport class ErrorResponse<EventMessageValue extends EventMessageValues = EventMessageValues>\n    implements ResponseMessage<EventMessageValue>\n{\n    public success = false;\n    public error?: string;\n    public message?: EventMessageValue;\n    public errorCode: string;\n\n    constructor(errorResponse: ErrorResponse) {\n        this.errorCode = errorResponse.errorCode;\n        this.error = errorResponse.error;\n        this.message = errorResponse.message as EventMessageValue;\n    }\n}\n\nexport class DataResponse<EventMessageValue extends EventMessageValues = EventMessageValues>\n    implements ResponseMessage<EventMessageValue>\n{\n    public success = true;\n    public message?: EventMessageValue;\n\n    constructor(message?: EventMessageValue) {\n        this.message = message;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    ContentOptions,\n    Experiences,\n    ExperienceType,\n    FrameOptions,\n    InternalExperiences,\n    InternalExperienceInfo,\n    TransformedContentOptions,\n} from './types';\nimport {BaseExperienceFrame} from './frame/experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {ChangeEventLevel, ChangeEventName, EventMessageValues, MessageEventName} from '@common/events/types';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage, TargetedMessageEvent} from '@common/events/events';\nimport {EventListener} from '@common/event-manager/types';\nimport {LogProvider} from '../../common';\n\nexport abstract class BaseExperience<\n    ExperienceContentOptions extends ContentOptions,\n    InternalExperience extends InternalExperiences,\n    Experience extends Experiences,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    ExperienceFrame extends BaseExperienceFrame<\n        ExperienceContentOptions,\n        TransformedExperienceContentOptions,\n        InternalExperience\n    >\n> {\n    protected abstract experience: Experience;\n    protected abstract internalExperience: InternalExperience;\n    protected abstract experienceId: string;\n    protected abstract experienceFrame: ExperienceFrame;\n    protected readonly frameOptions: FrameOptions;\n    protected readonly contentOptions: ExperienceContentOptions;\n    protected readonly controlOptions: ControlOptions;\n    protected readonly experienceIdentifiers: Set<string>;\n    protected logger?: LogProvider;\n\n    protected constructor(\n        frameOptions: FrameOptions,\n        contentOptions: ExperienceContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        this.frameOptions = frameOptions;\n        this.contentOptions = contentOptions;\n        this.controlOptions = controlOptions;\n        this.experienceIdentifiers = experienceIdentifiers;\n        this.validateFrameOptions();\n    }\n\n    static getExperienceIdentifier = (experience: InternalExperiences): string => {\n        if (experience.experienceType === ExperienceType.DASHBOARD) {\n            const {contextId, experienceType, dashboardId, discriminator} = experience;\n            return [contextId, experienceType, dashboardId, discriminator].filter(Boolean).join('-');\n        }\n\n        if (experience.experienceType === ExperienceType.VISUAL) {\n            const {contextId, experienceType, dashboardId, sheetId, visualId, discriminator} = experience;\n            return [contextId, experienceType, dashboardId, sheetId, visualId, discriminator].filter(Boolean).join('-');\n        }\n\n        if (\n            [\n                ExperienceType.CONSOLE,\n                ExperienceType.CONTROL,\n                ExperienceType.CONTEXT,\n                ExperienceType.QSEARCH,\n                ExperienceType.GENERATIVEQNA,\n            ].includes(experience.experienceType)\n        ) {\n            const {contextId, experienceType, discriminator} = experience;\n            return [contextId, experienceType, discriminator].filter(Boolean).join('-');\n        }\n\n        throw new Error('Invalid experience unable to build experience identifier');\n    };\n\n    public send = async <EventMessageValue extends EventMessageValues>(\n        messageEvent: EmbeddingMessageEvent<MessageEventName>\n    ): Promise<ResponseMessage<EventMessageValue>> => {\n        if (!this.experienceFrame || !this.internalExperience) {\n            throw new Error('Experience has not been initialized');\n        }\n\n        const targetedMessageEvent = new TargetedMessageEvent(\n            messageEvent.eventName,\n            this.internalExperience,\n            messageEvent.message,\n            messageEvent.data\n        );\n\n        return this.experienceFrame.send(targetedMessageEvent);\n    };\n\n    public addEventListener = (eventName: MessageEventName, listener: EventListener) => {\n        return this.experienceFrame.addInternalEventListener(eventName, listener);\n    };\n\n    public setLogProvider = (logProvider: LogProvider) => {\n        this.logger = logProvider;\n        return this;\n    };\n\n    protected getInternalExperienceInfo = <\n        EmbeddingInternalExperience extends InternalExperiences,\n        EmbeddingExperience extends Experiences\n    >(\n        experience: EmbeddingExperience\n    ): InternalExperienceInfo<EmbeddingInternalExperience> => {\n        let discriminator = -1;\n        let internalExperience: InternalExperiences;\n        let experienceIdentifier: string;\n        do {\n            discriminator++;\n            internalExperience = {\n                ...experience,\n                contextId: this.controlOptions.contextId,\n                discriminator,\n            };\n            experienceIdentifier = BaseExperience.getExperienceIdentifier(internalExperience);\n        } while (this.experienceIdentifiers.has(experienceIdentifier));\n\n        this.experienceIdentifiers.add(experienceIdentifier);\n        return {\n            experienceIdentifier,\n            internalExperience,\n        } as InternalExperienceInfo<EmbeddingInternalExperience>;\n    };\n\n    protected transformContentOptions = <TCO extends TransformedContentOptions>(\n        filteredOptions: TCO,\n        unrecognizedContentOptions: object\n    ): TCO => {\n        this.warnUnrecognizedContentOptions(Object.keys(unrecognizedContentOptions));\n        return filteredOptions;\n    };\n\n    protected warnUnrecognizedContentOptions = (unrecognizedProperties: string[]) => {\n        if (unrecognizedProperties.length > 0) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.UNRECOGNIZED_CONTENT_OPTIONS,\n                    ChangeEventLevel.WARN,\n                    'Experience content options contain unrecognized properties',\n                    {\n                        unrecognizedContentOptions: unrecognizedProperties,\n                    }\n                ),\n                {frame: null}\n            );\n            this.logger?.warn('Experience content options contain unrecognized properties');\n        }\n    };\n\n    protected abstract extractExperienceFromUrl: (url: string) => Experience;\n\n    private validateFrameOptions = () => {\n        if (!this.frameOptions.url) {\n            const message = 'Url is required for the experience';\n            this.frameOptions.onChange?.(new ChangeEvent(ChangeEventName.NO_URL, ChangeEventLevel.ERROR, message), {\n                frame: null,\n            });\n            throw new Error(message);\n        }\n    };\n}\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {CreatePostRequestOptions, PostRequest} from '../types';\nimport {EmbeddingIFrameElement, IframeOptions} from './types';\n\nexport class Iframe {\n    static IFRAME_CLASS_NAME = 'quicksight-embedding-iframe';\n    private readonly iframeName: string;\n    private readonly width: string;\n    private readonly height: string;\n    private readonly loading: IframeOptions['loading'];\n    private readonly container: HTMLElement;\n    private readonly payload: IframeOptions['payload'];\n    private readonly src: string;\n    private readonly onLoad: IframeOptions['onLoad'];\n    private readonly iframe: EmbeddingIFrameElement;\n    private iframePlaceholder?: HTMLElement;\n    private classNames = [Iframe.IFRAME_CLASS_NAME];\n    private postRequest?: PostRequest;\n\n    constructor(options: IframeOptions) {\n        const {\n            id,\n            src,\n            width = '100%',\n            height = '100%',\n            container,\n            onLoad,\n            loading,\n            withIframePlaceholder,\n            payload,\n            className,\n        } = options;\n\n        this.width = width;\n        this.height = height;\n        this.onLoad = onLoad;\n        this.iframeName = id;\n\n        this.loading = loading;\n\n        if (className) {\n            this.classNames.push(className);\n        }\n\n        this.container = container;\n        this.payload = payload;\n        this.src = src;\n\n        if (withIframePlaceholder) {\n            this.createIframePlaceholder(withIframePlaceholder);\n        }\n\n        this.iframe = this.createIframe();\n        this.iframe.addEventListener('load', this.onLoadLocal);\n    }\n\n    public getIframe = () => this.iframe;\n\n    private createIframePlaceholder = (withIframePlaceholder: IframeOptions['withIframePlaceholder']) => {\n        this.iframePlaceholder = document.createElement('div');\n        this.iframePlaceholder.id = `${this.iframeName}-placeholder`;\n        this.iframePlaceholder.style.width = this.width;\n        this.iframePlaceholder.style.backgroundColor = 'rgba(0,0,0,.01)';\n        this.iframePlaceholder.style.display = 'flex';\n        this.iframePlaceholder.style.justifyContent = 'center';\n        this.iframePlaceholder.style.alignItems = 'center';\n        this.iframePlaceholder.className = `${Iframe.IFRAME_CLASS_NAME}-placeholder`;\n\n        if (this.height.endsWith('px')) {\n            this.iframePlaceholder.style.height = this.height;\n        }\n\n        if (withIframePlaceholder && typeof withIframePlaceholder !== 'boolean') {\n            this.iframePlaceholder.appendChild(withIframePlaceholder);\n        } else {\n            const loaderSVG = this.createLoaderSVG();\n            this.iframePlaceholder.appendChild(loaderSVG);\n        }\n\n        this.container.appendChild(this.iframePlaceholder);\n    };\n\n    private createIframe = () => {\n        const iframe = document.createElement('iframe') as EmbeddingIFrameElement;\n        iframe.className = this.classNames.join(' ').trim();\n        iframe.id = this.iframeName;\n        iframe.name = this.iframeName;\n        iframe.width = this.width;\n        iframe.height = this.height;\n\n        if (this.loading) {\n            iframe.loading = this.loading;\n        }\n\n        iframe.style.border = '0px';\n        iframe.style.padding = '0px';\n\n        if (this.iframePlaceholder) {\n            iframe.style.opacity = '0';\n            iframe.style.position = 'absolute';\n        }\n\n        if (this.width === '0px' && this.height === '0px') {\n            iframe.style.position = 'absolute';\n        }\n\n        this.container.appendChild(iframe);\n\n        if (this.payload) {\n            this.postRequest = this.createPostRequest({\n                src: this.src,\n                target: iframe.name,\n                container: this.container,\n                payload: this.payload,\n            });\n        } else {\n            iframe.src = this.src;\n        }\n\n        return iframe;\n    };\n\n    private onLoadLocal = (event: Event) => {\n        if (this.iframePlaceholder) {\n            this.iframePlaceholder.remove();\n            this.iframe.style.position = '';\n            this.iframe.style.opacity = '1';\n            this.iframe.style.transition = 'opacity .5s ease-in-out';\n        }\n\n        this.onLoad?.(event);\n        this.postRequest?.remove();\n    };\n\n    private createPostRequest = (postRequestOptions: CreatePostRequestOptions): PostRequest => {\n        const {src, container, target, payload} = postRequestOptions;\n        if (!src) {\n            throw new Error('No source has been provided.');\n        }\n\n        const form = document.createElement('form');\n        form.style.visibility = 'hidden';\n        form.method = 'POST';\n        form.action = src;\n        form.target = target;\n        form.name = `${target}-form`;\n\n        Object.keys(payload).forEach(payloadItem => {\n            const input = document.createElement('input');\n            input.type = 'hidden';\n            input.name = payloadItem;\n            input.value = payload[payloadItem];\n            form.appendChild(input);\n        });\n\n        container.appendChild(form);\n\n        form?.submit();\n        return {\n            remove: () => {\n                form.remove();\n            },\n        };\n    };\n\n    private createSvgElement = (\n        tagName: string,\n        attributes: Record<string, string>,\n        styles: Record<string, string> = {},\n        children: Element[] = []\n    ) => {\n        const element = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n        Object.entries(attributes).forEach(([name, value]) => element.setAttribute(name, value));\n        Object.entries(styles).forEach(([name, value]) => element.style.setProperty(name, value));\n        children.forEach(child => element.appendChild(child));\n        return element;\n    };\n\n    private createLoaderSVG = () => {\n        const circles: Element[] = [1, 2, 3].map(i => {\n            const animate = this.createSvgElement('animate', {\n                attributeName: 'opacity',\n                dur: '1s',\n                values: '0;1;0',\n                repeatCount: 'indefinite',\n                begin: `${i / 10.0}`,\n            });\n            return this.createSvgElement(\n                'circle',\n                {\n                    fill: '#ccc',\n                    stroke: 'none',\n                    cx: `${i * 20 - 14}`,\n                    cy: '50',\n                    r: '6',\n                },\n                undefined,\n                [animate]\n            );\n        });\n\n        return this.createSvgElement(\n            'svg',\n            {\n                version: '1.1',\n                x: '0px',\n                y: '0px',\n                viewBox: '0 0 100 100',\n                'enable-background': 'new 0 0 0 0',\n            },\n            {\n                width: '100px',\n                height: '100px',\n            },\n            circles\n        );\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {v4} from 'uuid';\nimport {encode} from 'punycode';\nimport {ContentOptions, FrameOptions, InternalExperiences, TransformedContentOptions} from '../types';\nimport {ParametersAsObject} from '../../../common';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\nimport {EmbeddingIFrameElement} from '@common/iframe/types';\nimport {EventListener} from '@common/event-manager/types';\nimport {\n    ChangeEventLevel,\n    ChangeEventName,\n    EmbeddingEvents,\n    EventMessageValues,\n    MessageEventName,\n} from '@common/events/types';\nimport {\n    ChangeEvent,\n    DataResponse,\n    ErrorResponse,\n    PostMessageEvent,\n    SuccessResponse,\n    TargetedMessageEvent,\n} from '@common/events/events';\nimport {Iframe} from '@common/iframe/iframe';\n\nexport const SDK_VERSION = '2.8.0';\n\nexport abstract class BaseExperienceFrame<\n    ExperienceContentOptions extends ContentOptions,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    InternalExperience extends InternalExperiences\n> {\n    protected readonly frameOptions: FrameOptions;\n    protected readonly contentOptions: ExperienceContentOptions;\n    protected readonly controlOptions: ControlOptions;\n    protected readonly transformedContentOptions: TransformedExperienceContentOptions;\n    protected readonly experienceId: string;\n    protected readonly internalExperience: InternalExperience;\n    protected readonly onChange: EventListener;\n    protected url: string;\n    protected origin_url: string\n    private readonly MESSAGE_RESPONSE_TIMEOUT = 5000;\n\n    public iframe: EmbeddingIFrameElement | null = null;\n    public container: HTMLElement;\n    public onMessage: EventListener;\n    public timeoutInstance?: NodeJS.Timeout;\n\n    protected constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: ExperienceContentOptions,\n        transformedContentOptions: TransformedExperienceContentOptions,\n        internalExperience: InternalExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        this.frameOptions = frameOptions;\n        this.contentOptions = contentOptions;\n        this.onChange = this.decorateOnChange(frameOptions.onChange);\n        this.onMessage = this.decorateOnMessage(contentOptions.onMessage, interceptMessage);\n        this.container = this.getContainer(frameOptions.container);\n        this.internalExperience = internalExperience;\n        this.controlOptions = controlOptions;\n        this.transformedContentOptions = transformedContentOptions;\n        this.experienceId = experienceIdentifier;\n        this.url = this.validateBaseUrl(frameOptions.url);\n\n    //this.logger.error('logging frame options origin url')\n    //this.logger.error(frameOptions.origin_url)\n\tif (frameOptions.origin_url != undefined) {\n            //this.logger.error('using origin url')\n    \t    this.origin_url = frameOptions.origin_url\n        } else {\n\t    //this.logger.error('no origin url')\n            this.origin_url = this.url\n        }\n\n        this.controlOptions.eventManager.addEventListener(this.experienceId, this.onMessage, true);\n        this.initializeMutationObserver();\n    }\n\n    public send = async <EventMessageValue extends EventMessageValues = EventMessageValues>(\n        messageEvent: TargetedMessageEvent\n    ): Promise<SuccessResponse | ErrorResponse<EventMessageValue> | DataResponse<EventMessageValue>> => {\n        if (this.controlOptions.sendToControlFrame) {\n            return this.controlOptions.sendToControlFrame(messageEvent);\n        }\n\n        if (!this.iframe) {\n            throw new Error(`Cannot send ${messageEvent.eventName}: No experience frame found`);\n        }\n\n        const eventId = v4();\n        const message = new PostMessageEvent(\n            messageEvent.eventName,\n            messageEvent.eventTarget,\n            eventId,\n            Date.now(),\n            SDK_VERSION,\n            messageEvent.message,\n            messageEvent.data\n        );\n\n\tthis.iframe?.contentWindow?.postMessage(message, 'http://localhost:3000')\n\tthis.iframe?.contentWindow?.postMessage(message, 'http://localhost:3000')\n        //this.iframe?.contentWindow?.postMessage(message, this.origin_url);\n\n        if (messageEvent.eventName === MessageEventName.ACKNOWLEDGE) {\n            return Promise.resolve(new SuccessResponse());\n        }\n\n        return new Promise((resolve, reject) => {\n            const eventHandler = (\n                event: MessageEvent<\n                    PostMessageEvent<\n                        MessageEventName,\n                        | {success: false; errorCode: string; errors?: string}\n                        | {\n                              success: true;\n                          }\n                    >\n                >\n            ) => {\n                const responseMessageEvent = event.data;\n                if (responseMessageEvent?.eventId === eventId) {\n                    window.removeEventListener('message', eventHandler);\n\n                    if (responseMessageEvent.message?.success === true) {\n                        resolve(new SuccessResponse());\n                    } else if (responseMessageEvent.message?.success === false) {\n                        resolve(new ErrorResponse(responseMessageEvent.message));\n                    } else {\n                        resolve(new DataResponse(responseMessageEvent.message));\n                    }\n                }\n            };\n\n            window.addEventListener('message', eventHandler);\n            setTimeout(() => {\n                window.removeEventListener('message', eventHandler);\n                reject(`${messageEvent.eventName} timed out`);\n            }, this.MESSAGE_RESPONSE_TIMEOUT);\n        });\n    };\n\n    public buildParameterString = (parameters?: ParametersAsObject) => {\n        if (!parameters || typeof parameters !== 'object') {\n            return '';\n        }\n\n        return Object.entries(parameters)\n            .map(([key, value]) => {\n                const values = Array.isArray(value) ? value : [value];\n\n                const encodedName = encodeURIComponent(key);\n\n                return values\n                    .map(encodeURIComponent)\n                    .map(encodedValue => `p.${encodedName}=${encodedValue}`)\n                    .join('&');\n            })\n            .join('&');\n    };\n\n    public buildQueryString = (\n        options: Omit<TransformedExperienceContentOptions, 'onMessage' | 'parameters'> &\n            Pick<InternalExperience, 'contextId' | 'discriminator'>\n    ) => {\n        const filteredOptions = Object.entries(options).reduce(\n            (memoizedOptions, [key, value]) => {\n                if (value !== undefined && value !== null) {\n                    return {\n                        ...memoizedOptions,\n                        [key]: `${value}`,\n                    };\n                }\n                return memoizedOptions;\n            },\n            {\n                punyCodeEmbedOrigin: encode(`${window.location.origin}/`),\n                sdkVersion: SDK_VERSION,\n            }\n        );\n\n        return new URLSearchParams(filteredOptions).toString();\n    };\n\n    public createExperienceIframe = () => {\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_STARTED, ChangeEventLevel.INFO, 'Creating the frame', {\n                experience: this.internalExperience,\n            })\n        );\n\n        try {\n            this.setTimeoutInstance();\n            this.iframe = new Iframe({\n                id: this.experienceId,\n                src: this.url,\n                width: this.frameOptions.width,\n                height: this.frameOptions.height,\n                container: this.container,\n                onLoad: this.onLoadHandler,\n                withIframePlaceholder: this.frameOptions.withIframePlaceholder,\n                className: this.frameOptions.className,\n            }).getIframe();\n        } catch (err) {\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.FRAME_NOT_CREATED,\n                    ChangeEventLevel.ERROR,\n                    'Failed to create the frame',\n                    {\n                        experience: this.internalExperience,\n                    }\n                )\n            );\n\n            throw err;\n        }\n\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_MOUNTED, ChangeEventLevel.INFO, 'The frame mounted', {\n                experience: this.internalExperience,\n                frame: this.iframe,\n            })\n        );\n    };\n\n    public addInternalEventListener = (eventName: MessageEventName, listener: EventListener) => {\n        const handler = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n            if (messageEvent.eventName === eventName) {\n                listener(messageEvent, metadata);\n            }\n        };\n\n        this.controlOptions.eventManager.addEventListener(this.experienceId, handler, true);\n\n        return {\n            remove: () => this.controlOptions.eventManager.removeEventListener(this.experienceId, handler),\n        };\n    };\n\n    private validateBaseUrl = (url: string) => {\n        if (!url) {\n            this.onChange(\n                new ChangeEvent(ChangeEventName.NO_URL, ChangeEventLevel.ERROR, 'Url is required for the experience', {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error('Url is required for the experience');\n        }\n\n        return url;\n    };\n\n    private setTimeoutInstance = () => {\n        this.timeoutInstance = setTimeout(() => {\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.FRAME_NOT_CREATED,\n                    ChangeEventLevel.ERROR,\n                    'Creating the frame timed out',\n                    {\n                        experience: this.internalExperience,\n                    }\n                )\n            );\n            throw new Error('Creating the frame timed out');\n        }, this.controlOptions.timeout);\n    };\n\n    private onLoadHandler = async () => {\n        if (this.timeoutInstance) {\n            clearTimeout(this.timeoutInstance);\n        }\n\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_LOADED, ChangeEventLevel.INFO, 'The experience iframe loaded', {\n                experience: this.internalExperience,\n            })\n        );\n    };\n\n    private getContainer = (container: HTMLElement | string) => {\n        if (!container) {\n            const message = 'Container is required for the experience';\n            this.onChange(\n                new ChangeEvent(ChangeEventName.NO_CONTAINER, ChangeEventLevel.ERROR, message, {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error(message);\n        }\n\n        let _container: HTMLElement | null = null;\n\n        if (typeof container === 'string') {\n            try {\n                _container = document.querySelector(container);\n            } catch (error) {\n                if (error instanceof Error) {\n                    this.onChange(\n                        new ChangeEvent(ChangeEventName.INVALID_CONTAINER, ChangeEventLevel.ERROR, error.message, {\n                            experience: this.internalExperience,\n                        })\n                    );\n                }\n\n                throw error;\n            }\n        } else if (typeof container === 'object' && container.nodeName) {\n            _container = container;\n        }\n\n        if (!_container) {\n            const message = `Invalid container '${container}' for the experience`;\n            this.onChange(\n                new ChangeEvent(ChangeEventName.INVALID_CONTAINER, ChangeEventLevel.ERROR, message, {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error(message);\n        }\n\n        return _container;\n    };\n\n    private decorateOnChange = (onChange?: EventListener) => {\n        return (changeEvent: EmbeddingEvents) => {\n            if (onChange) {\n                const metadata: ExperienceFrameMetadata = {\n                    frame: this.iframe,\n                };\n                onChange(changeEvent, metadata);\n            }\n        };\n    };\n\n    private decorateOnMessage = (onMessage?: EventListener, interceptOnMessage?: EventListener) => {\n        return (messageEvent: EmbeddingEvents) => {\n            if (interceptOnMessage && this.iframe) {\n                interceptOnMessage(messageEvent, {\n                    frame: this.iframe,\n                });\n            }\n\n            if (onMessage) {\n                onMessage(messageEvent, {\n                    frame: this.iframe,\n                });\n            }\n        };\n    };\n\n    // Add mutation observer to perform cleaning up tasks after container or frame is removed from the dom\n    private initializeMutationObserver = () => {\n        const mutationObserver = new MutationObserver(mutations => {\n            const isRemoved = mutations.some(record =>\n                Array.from(record.removedNodes).some(node => node === this.iframe || node === this.container)\n            );\n\n            if (isRemoved) {\n                this.controlOptions.eventManager.cleanUpCallbacksForExperience(this.experienceId);\n                mutationObserver.disconnect();\n                this.iframe = null;\n\n                this.onChange(\n                    new ChangeEvent(\n                        ChangeEventName.FRAME_REMOVED,\n                        ChangeEventLevel.INFO,\n                        'Frame removed from the DOM',\n                        {\n                            experience: this.internalExperience,\n                        }\n                    )\n                );\n            }\n        });\n\n        mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    };\n\n    protected abstract buildExperienceUrl: (baseUrl: string) => string;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {InternalVisualExperience, TransformedVisualContentOptions, VisualContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class VisualExperienceFrame extends BaseExperienceFrame<\n    VisualContentOptions,\n    TransformedVisualContentOptions,\n    InternalVisualExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: VisualContentOptions,\n        transformedContentOptions: TransformedVisualContentOptions,\n        internalExperience: InternalVisualExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {parameters, ...otherOptions} = this.transformedContentOptions;\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...otherOptions,\n            contextId,\n            discriminator,\n        });\n\n        const parameterString = this.buildParameterString(parameters);\n        const fullQueryString = [queryString, parameterString].join('#');\n\n        return [baseUrl, fullQueryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {FrameOptions, TransformedContentOptions, ExperienceType} from '../base-experience';\nimport {\n    InternalVisualExperience,\n    TransformedVisualContentOptions,\n    IVisualExperience,\n    VisualContentOptions,\n} from './types';\nimport {Parameter, ParametersAsObject} from '../../common';\nimport {VisualExperienceFrame} from './frame/visual-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {VisualAction} from '../dashboard-experience';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport class VisualExperience extends BaseExperience<\n    VisualContentOptions,\n    InternalVisualExperience,\n    IVisualExperience,\n    TransformedContentOptions,\n    VisualExperienceFrame\n> {\n    protected experience: IVisualExperience;\n    protected internalExperience: InternalVisualExperience;\n    protected experienceFrame: VisualExperienceFrame;\n    protected experienceId: string;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: VisualContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalVisualExperience,\n            IVisualExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new VisualExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformVisualContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    setParameters = async (parameters: Parameter[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_PARAMETERS, parameters));\n    };\n\n    reset = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.RESET));\n    };\n\n    addFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.ADD_FILTER_GROUPS, filterGroups));\n    };\n\n    updateFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UPDATE_FILTER_GROUPS, filterGroups));\n    };\n\n    removeFilterGroups = async (filterGroups: FilterGroup[] | string[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REMOVE_FILTER_GROUPS, filterGroups));\n    };\n\n    getFilterGroups = async (): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_VISUAL)\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the visual');\n        }\n\n        return response.message;\n    };\n\n    getActions = async (): Promise<VisualAction[]> => {\n        const response = await this.send<VisualAction[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_VISUAL_ACTIONS)\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the actions');\n        }\n\n        return response.message;\n    };\n\n    addActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.ADD_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    setActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    removeActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.REMOVE_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    setTheme = async (themeArn: string): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_THEME, {ThemeArn: themeArn}));\n    };\n\n    setThemeOverride = async (themeOverride: ThemeConfiguration): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME_OVERRIDE, {\n                ThemeOverride: themeOverride,\n            })\n        );\n    };\n\n    setPreloadThemes = async (preloadThemes: string[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.PRELOAD_THEMES, {\n                PreloadThemes: preloadThemes,\n            })\n        );\n    };\n\n    protected extractExperienceFromUrl = (url: string): IVisualExperience => {\n        const matches: Array<string> =\n            /^https:\\/\\/[^/]+\\/embed\\/[^/]+\\/dashboards\\/([\\w-]+)\\/sheets\\/([\\w-]+)\\/visuals\\/([\\w-]+)(\\?|$)/i.exec(\n                url\n            ) || [];\n\n        if (matches.length < 5) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.INVALID_URL, ChangeEventLevel.ERROR, 'Invalid visual experience url', {\n                    url,\n                }),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid visual experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.VISUAL,\n            dashboardId: matches[1],\n            sheetId: matches[2],\n            visualId: matches[3],\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        // Intercepting onMessage\n        // if the resizeHeightOnSizeChangedEvent is true, upon receiving SIZE_CHANGED message, update the height of the iframe\n        if (messageEvent.eventName === 'SIZE_CHANGED' && this.frameOptions.resizeHeightOnSizeChangedEvent) {\n            metadata?.frame?.setAttribute?.('height', `${messageEvent.message?.height}px`);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.themeOverride) {\n            this.setThemeOverride(this.contentOptions.themeOptions.themeOverride);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.preloadThemes) {\n            this.setPreloadThemes(this.contentOptions.themeOptions.preloadThemes);\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformVisualContentOptions = (contentOptions: VisualContentOptions) => {\n        const {\n            fitToIframeWidth,\n            locale,\n            parameters,\n            themeOptions,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedVisualContentOptions>(\n            {\n                fitToIframeWidth: fitToIframeWidth ?? true,\n                locale,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (Array.isArray(parameters)) {\n            transformedContentOptions.parameters = parameters.reduce(\n                (parametersAsObject: ParametersAsObject, parameter: Parameter) => {\n                    return {\n                        ...parametersAsObject,\n                        [parameter.Name]: parameter.Values,\n                    };\n                },\n                {}\n            );\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ConsoleContentOptions, InternalConsoleExperience, TransformedConsoleContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class ConsoleExperienceFrame extends BaseExperienceFrame<\n    ConsoleContentOptions,\n    TransformedConsoleContentOptions,\n    InternalConsoleExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: ConsoleContentOptions,\n        transformedContentOptions: TransformedConsoleContentOptions,\n        internalExperience: InternalConsoleExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ConsoleExperienceFrame} from './frame/console-experience-frame';\nimport {\n    ConsoleContentOptions,\n    InternalConsoleExperience,\n    IConsoleExperience,\n    TransformedConsoleContentOptions,\n} from './types';\nimport {ControlOptions} from '../control-experience';\nimport {ExperienceType, FrameOptions} from '@experience/base-experience/types';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from 'src/common';\n\nexport class ConsoleExperience extends BaseExperience<\n    ConsoleContentOptions,\n    InternalConsoleExperience,\n    IConsoleExperience,\n    TransformedConsoleContentOptions,\n    ConsoleExperienceFrame\n> {\n    protected experience;\n    protected internalExperience;\n    protected experienceId;\n    protected experienceFrame;\n    protected currentPage: string | undefined;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: ConsoleContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalConsoleExperience,\n            IConsoleExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        const {\n            locale,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedConsoleContentOptions>(\n            {locale},\n            unrecognizedContentOptions\n        );\n\n        this.experienceFrame = new ConsoleExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n        this.currentPage = 'START';\n    }\n\n    createSharedView = async (): Promise<ResponseMessage> => {\n        if (\n            this.currentPage !== 'DASHBOARD' &&\n            this.currentPage !== 'DASHBOARD_SHEET' &&\n            this.currentPage !== 'DASHBOARD_VIEW'\n        ) {\n            throw new Error('Cannot call createSharedView from this page');\n        }\n        const response = await this.send(new EmbeddingMessageEvent(MessageEventName.CREATE_SHARED_VIEW));\n        if (!response?.message) {\n            throw new Error('Failed to create shared view');\n        }\n\n        return response;\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        if (messageEvent.eventName === MessageEventName.PAGE_NAVIGATION) {\n            this.currentPage = messageEvent?.message?.pageType;\n        }\n    };\n\n    protected extractExperienceFromUrl = (url: string): IConsoleExperience => {\n        const matches: Array<string> =\n            /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/(start(\\/(favorites|dashboards|analyses))?|dashboards\\/[\\w-]+(\\/views\\/[\\w-]+)?|analyses\\/[\\w-]+)(\\?|$)/i.exec(\n                url\n            ) || [];\n\n        if (matches.length < 5) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.INVALID_URL, ChangeEventLevel.ERROR, 'Invalid console experience url', {\n                    url,\n                }),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid console experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.CONSOLE,\n        };\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {DashboardContentOptions, InternalDashboardExperience, TransformedDashboardContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class DashboardExperienceFrame extends BaseExperienceFrame<\n    DashboardContentOptions,\n    TransformedDashboardContentOptions,\n    InternalDashboardExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: DashboardContentOptions,\n        transformedContentOptions: TransformedDashboardContentOptions,\n        internalExperience: InternalDashboardExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {parameters, ...otherOptions} = this.transformedContentOptions;\n        const {contextId, discriminator} = this.internalExperience;\n        const {viewId} = this.contentOptions;\n\n        // ViewId was passed as content option, need to override url to include custom view\n        if (viewId) {\n            const url = new URL(baseUrl);\n            url.pathname = url.pathname.concat('/views/' + viewId);\n            baseUrl = url.href;\n        }\n\n        const queryString = this.buildQueryString({\n            ...otherOptions,\n            contextId,\n            discriminator,\n        });\n\n        const parameterString = this.buildParameterString(parameters);\n        const fullQueryString = [queryString, parameterString].join('#');\n\n        return [baseUrl, fullQueryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Parameter, ParametersAsObject} from '../../common';\nimport {DashboardExperienceFrame} from './frame/dashboard-experience-frame';\nimport {\n    DashboardContentOptions,\n    ExportToolbarOption,\n    IDashboardExperience,\n    InternalDashboardExperience,\n    NavigateToDashboardOptions,\n    Sheet,\n    TransformedDashboardContentOptions,\n    Visual,\n    VisualAction,\n} from './types';\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {ControlOptions} from '../control-experience';\n\nimport {ExperienceFrameMetadata} from '../../common/embedding-context';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport class DashboardExperience extends BaseExperience<\n    DashboardContentOptions,\n    InternalDashboardExperience,\n    IDashboardExperience,\n    TransformedDashboardContentOptions,\n    DashboardExperienceFrame\n> {\n    protected readonly experience;\n    protected readonly internalExperience;\n    protected readonly experienceFrame;\n    protected readonly experienceId: string;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: DashboardContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalDashboardExperience,\n            IDashboardExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new DashboardExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformDashboardContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    initiatePrint = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.INITIATE_PRINT));\n    };\n\n    undo = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UNDO));\n    };\n\n    redo = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REDO));\n    };\n\n    toggleBookmarksPane = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.TOGGLE_BOOKMARKS_PANE));\n    };\n\n    getParameters = async (): Promise<Parameter[]> => {\n        const response = await this.send<Parameter[]>(new EmbeddingMessageEvent(MessageEventName.GET_PARAMETERS));\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the parameters');\n        }\n\n        return response.message;\n    };\n\n    getSheets = async (): Promise<Sheet[]> => {\n        const response = await this.send<Sheet[]>(new EmbeddingMessageEvent(MessageEventName.GET_SHEETS));\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the sheets');\n        }\n\n        return response.message;\n    };\n\n    addFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.ADD_FILTER_GROUPS, filterGroups));\n    };\n\n    updateFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UPDATE_FILTER_GROUPS, filterGroups));\n    };\n\n    removeFilterGroups = async (filterGroups: FilterGroup[] | string[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REMOVE_FILTER_GROUPS, filterGroups));\n    };\n\n    getFilterGroupsForSheet = async (sheetId: string): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_SHEET, {\n                SheetId: sheetId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the sheet');\n        }\n\n        return response.message;\n    };\n\n    getFilterGroupsForVisual = async (sheetId: string, visualId: string): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_VISUAL, {\n                SheetId: sheetId,\n                VisualId: visualId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the visual');\n        }\n\n        return response.message;\n    };\n\n    getVisualActions = async (sheetId: string, visualId: string): Promise<VisualAction[]> => {\n        const response = await this.send<VisualAction[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the visual actions');\n        }\n\n        return response.message;\n    };\n\n    addVisualActions = async (sheetId: string, visualId: string, actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.ADD_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    setVisualActions = async (sheetId: string, visualId: string, actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    getSelectedSheetId = async (): Promise<string> => {\n        const response = await this.send<string>(new EmbeddingMessageEvent(MessageEventName.GET_SELECTED_SHEET_ID));\n\n        if (!response?.message) {\n            throw new Error('Failed to retrieve the selected sheet id');\n        }\n\n        return response.message;\n    };\n\n    setSelectedSheetId = async (sheetId: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_SELECTED_SHEET_ID, {\n                SheetId: sheetId,\n            })\n        );\n    };\n\n    setTheme = async (themeArn: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME, {\n                ThemeArn: themeArn,\n            })\n        );\n    };\n\n    navigateToDashboard = async (\n        dashboardId: string,\n        navigateToDashboardOptions?: NavigateToDashboardOptions\n    ): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.NAVIGATE_TO_DASHBOARD, {\n                DashboardId: dashboardId,\n                Parameters: navigateToDashboardOptions?.parameters,\n            })\n        );\n    };\n\n    removeVisualActions = async (\n        sheetId: string,\n        visualId: string,\n        actions: VisualAction[]\n    ): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.REMOVE_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    getSheetVisuals = async (sheetId: string): Promise<Visual[]> => {\n        const response = await this.send<Visual[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_SHEET_VISUALS, {\n                SheetId: sheetId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the sheet visuals');\n        }\n\n        return response.message;\n    };\n\n    setParameters = async (parameters: Parameter[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_PARAMETERS, parameters));\n    };\n\n    reset = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.RESET));\n    };\n\n    setThemeOverride = async (themeOverride: ThemeConfiguration): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME_OVERRIDE, {\n                ThemeOverride: themeOverride,\n            })\n        );\n    };\n\n    setPreloadThemes = async (preloadThemes: string[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.PRELOAD_THEMES, {\n                PreloadThemes: preloadThemes,\n            })\n        );\n    };\n\n    createSharedView = async (): Promise<ResponseMessage> => {\n        const response = await this.send(new EmbeddingMessageEvent(MessageEventName.CREATE_SHARED_VIEW));\n        if (!response?.message) {\n            throw new Error('Failed to create shared view');\n        }\n\n        return response;\n    };\n\n    protected extractExperienceFromUrl = (url: string): IDashboardExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embed\\/[^/]+\\/dashboards\\/([\\w-]+)(\\?|$)/i.exec(url) || [];\n        if (matches.length < 3) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid dashboard experience url',\n                    {\n                        url,\n                    }\n                ),\n                {frame: null}\n            );\n\n            throw new Error('Invalid dashboard experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.DASHBOARD,\n            dashboardId: matches[1],\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        // Intercepting onMessage\n        // if the resizeHeightOnSizeChangedEvent is true, upon receiving SIZE_CHANGED message, update the height of the iframe\n        if (messageEvent.eventName === 'SIZE_CHANGED' && this.frameOptions.resizeHeightOnSizeChangedEvent) {\n            metadata?.frame?.setAttribute?.('height', `${messageEvent?.message?.height}px`);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.themeOverride) {\n            this.setThemeOverride(this.contentOptions.themeOptions.themeOverride);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.preloadThemes) {\n            this.setPreloadThemes(this.contentOptions.themeOptions.preloadThemes);\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformDashboardContentOptions = (contentOptions: DashboardContentOptions) => {\n        const {\n            parameters,\n            locale,\n            attributionOptions,\n            sheetOptions,\n            toolbarOptions,\n            themeOptions,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedDashboardContentOptions>(\n            {\n                locale,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (Array.isArray(parameters)) {\n            transformedContentOptions.parameters = parameters.reduce(\n                (parametersAsObject: ParametersAsObject, parameter: Parameter) => {\n                    return {\n                        ...parametersAsObject,\n                        [parameter.Name]: parameter.Values,\n                    };\n                },\n                {}\n            );\n        }\n\n        if (attributionOptions?.overlayContent !== true) {\n            transformedContentOptions.footerPaddingEnabled = true;\n        }\n\n        if (toolbarOptions?.export || (toolbarOptions?.export as ExportToolbarOption)?.print) {\n            transformedContentOptions.printEnabled = true;\n        }\n\n        if (toolbarOptions?.undoRedo !== true) {\n            transformedContentOptions.undoRedoDisabled = true;\n        }\n\n        if (toolbarOptions?.reset !== true) {\n            transformedContentOptions.resetDisabled = true;\n        }\n\n        if (toolbarOptions?.bookmarks === true) {\n            transformedContentOptions.showBookmarksIcon = true;\n        }\n\n        if (sheetOptions?.initialSheetId) {\n            transformedContentOptions.sheetId = sheetOptions.initialSheetId;\n        }\n\n        if (typeof sheetOptions?.singleSheet === 'boolean') {\n            transformedContentOptions.sheetTabsDisabled = sheetOptions.singleSheet;\n        }\n\n        if (sheetOptions?.emitSizeChangedEventOnSheetChange) {\n            transformedContentOptions.resizeOnSheetChange = true;\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {InternalQSearchExperience, QSearchContentOptions, TransformedQSearchContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class QSearchExperienceFrame extends BaseExperienceFrame<\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n    InternalQSearchExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: QSearchContentOptions,\n        transformedContentOptions: TransformedQSearchContentOptions,\n        internalExperience: InternalQSearchExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    BaseExperience,\n    BaseExperienceFrame,\n    ContentOptions,\n    Experiences,\n    InternalExperiences,\n    TransformedContentOptions,\n} from '../base-experience';\nimport {FrameStyles} from '../internal-q-base-experience';\nimport {EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\n/**\n * Internal base experience for embedded Q,\n * containing shared functionality between q-search-bar and generative-qna experience types.\n */\nexport abstract class InternalQBaseExperience<\n    ExperienceContentOptions extends ContentOptions,\n    InternalExperience extends InternalExperiences,\n    Experience extends Experiences,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    ExperienceFrame extends BaseExperienceFrame<\n        ExperienceContentOptions,\n        TransformedExperienceContentOptions,\n        InternalExperience\n    >\n> extends BaseExperience<\n    ExperienceContentOptions,\n    InternalExperience,\n    Experience,\n    TransformedExperienceContentOptions,\n    ExperienceFrame\n> {\n    static readonly MAX_Z_INDEX = '2147483647';\n    protected frameStyles?: FrameStyles;\n\n    close = (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.CLOSE_Q_SEARCH));\n    };\n\n    setQuestion = (question: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_Q_SEARCH_QUESTION, {\n                question,\n            })\n        );\n    };\n\n    protected trackOutsideClicks = (): void => {\n        const clickHandler = (event: MouseEvent) => {\n            if (!this.experienceFrame.iframe?.contains(event.target as Node)) {\n                this.close();\n            }\n        };\n\n        window.addEventListener('click', clickHandler);\n        this.controlOptions.eventManager.addEventListenerForCleanup(this.experienceId, () =>\n            window.removeEventListener('click', clickHandler)\n        );\n    };\n\n    protected enterFullScreen = (metadata: ExperienceFrameMetadata | undefined): void => {\n        if (!this.frameStyles && metadata?.frame) {\n            this.frameStyles = {\n                position: metadata.frame?.style.position,\n                top: metadata.frame?.style.top,\n                left: metadata.frame.style.left,\n                zIndex: metadata.frame.style.zIndex,\n                width: metadata.frame.style.width,\n                height: metadata.frame.style.height,\n            };\n\n            metadata.frame.style.position = 'fixed';\n            metadata.frame.style.top = '0px';\n            metadata.frame.style.left = '0px';\n            metadata.frame.style.zIndex = InternalQBaseExperience.MAX_Z_INDEX;\n            metadata.frame.style.width = '100vw';\n            metadata.frame.style.height = '100vh';\n        }\n    };\n\n    protected exitFullScreen = (metadata: ExperienceFrameMetadata | undefined): void => {\n        if (this.frameStyles && metadata?.frame) {\n            metadata.frame.style.position = this.frameStyles.position;\n            metadata.frame.style.top = this.frameStyles.top;\n            metadata.frame.style.left = this.frameStyles.left;\n            metadata.frame.style.zIndex = this.frameStyles.zIndex;\n            metadata.frame.style.width = this.frameStyles.width;\n            metadata.frame.style.height = this.frameStyles.height;\n            this.frameStyles = undefined;\n        }\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {\n    InternalQSearchExperience,\n    IQSearchExperience,\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n} from './types';\nimport {FrameStyles} from '@experience/internal-q-base-experience/types';\nimport {QSearchExperienceFrame} from './frame/q-search-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {InternalQBaseExperience} from '@experience/internal-q-base-experience/internal-q-base-experience';\nimport {ChangeEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\nexport class QSearchExperience extends InternalQBaseExperience<\n    QSearchContentOptions,\n    InternalQSearchExperience,\n    IQSearchExperience,\n    TransformedQSearchContentOptions,\n    QSearchExperienceFrame\n> {\n    protected experience: IQSearchExperience;\n    protected internalExperience: InternalQSearchExperience;\n    protected experienceFrame: QSearchExperienceFrame;\n    protected experienceId: string;\n    protected frameStyles?: FrameStyles;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: QSearchContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalQSearchExperience,\n            IQSearchExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new QSearchExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformQSearchContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    protected extractExperienceFromUrl = (url: string): IQSearchExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/q\\/search(\\/|\\?|$)/i.exec(url) || [];\n\n        if (matches.length < 2) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid q-search experience URL',\n                    {url}\n                ),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid q-search experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.QSEARCH,\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        switch (messageEvent.eventName) {\n            case MessageEventName.Q_SEARCH_OPENED:\n            case MessageEventName.Q_SEARCH_CLOSED: {\n                if (typeof messageEvent.message === 'object') {\n                    metadata?.frame?.style.setProperty('height', `${messageEvent?.message?.height}px`);\n                }\n                break;\n            }\n            case MessageEventName.CONTENT_LOADED: {\n                this.trackOutsideClicks();\n                break;\n            }\n            case MessageEventName.Q_SEARCH_ENTERED_FULLSCREEN: {\n                this.enterFullScreen(metadata);\n                break;\n            }\n            case MessageEventName.Q_SEARCH_EXITED_FULLSCREEN: {\n                this.exitFullScreen(metadata);\n                break;\n            }\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformQSearchContentOptions = (contentOptions: QSearchContentOptions) => {\n        const {\n            hideIcon,\n            hideTopicName,\n            theme,\n            allowTopicSelection,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedQSearchContentOptions>(\n            {\n                allowTopicSelection,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (hideIcon !== undefined) {\n            transformedContentOptions.qBarIconDisabled = hideIcon;\n        }\n\n        if (hideTopicName !== undefined) {\n            transformedContentOptions.qBarTopicNameDisabled = hideTopicName;\n        }\n\n        if (theme !== undefined) {\n            transformedContentOptions.themeId = theme;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    InternalGenerativeQnAExperience,\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class GenerativeQnAExperienceFrame extends BaseExperienceFrame<\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n    InternalGenerativeQnAExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: GenerativeQnAContentOptions,\n        transformedContentOptions: TransformedGenerativeQnAContentOptions,\n        internalExperience: InternalGenerativeQnAExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {\n    InternalGenerativeQnAExperience,\n    IGenerativeQnAExperience,\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n    GenerativeQnAPanelType,\n} from './types';\nimport {FrameStyles} from '@experience/internal-q-base-experience/types';\nimport {GenerativeQnAExperienceFrame} from './frame/generative-qna-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {InternalQBaseExperience} from '@experience/internal-q-base-experience/internal-q-base-experience';\nimport {ChangeEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\nexport class GenerativeQnAExperience extends InternalQBaseExperience<\n    GenerativeQnAContentOptions,\n    InternalGenerativeQnAExperience,\n    IGenerativeQnAExperience,\n    TransformedGenerativeQnAContentOptions,\n    GenerativeQnAExperienceFrame\n> {\n    protected experience: IGenerativeQnAExperience;\n    protected internalExperience: InternalGenerativeQnAExperience;\n    protected experienceFrame: GenerativeQnAExperienceFrame;\n    protected experienceId: string;\n    protected frameStyles?: FrameStyles;\n    static readonly TEXT_PROPERTY_MAX_LENGTH = 200;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: GenerativeQnAContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalGenerativeQnAExperience,\n            IGenerativeQnAExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new GenerativeQnAExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformGenerativeQnAContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    protected extractExperienceFromUrl = (url: string): IGenerativeQnAExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/q\\/search(\\/|\\?|$)/i.exec(url) || [];\n\n        if (matches.length < 2) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid generative-qna experience URL',\n                    {url}\n                ),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid generative-qna experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.GENERATIVEQNA,\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        switch (messageEvent.eventName) {\n            case MessageEventName.Q_SEARCH_OPENED:\n            case MessageEventName.Q_SEARCH_CLOSED:\n            case MessageEventName.Q_SEARCH_FOCUSED: {\n                if (typeof messageEvent.message === 'object') {\n                    metadata?.frame?.style.setProperty('height', `${messageEvent?.message?.height}`);\n                }\n                break;\n            }\n            case MessageEventName.CONTENT_LOADED: {\n                if (this.contentOptions?.panelOptions?.panelType === GenerativeQnAPanelType.SEARCH_BAR) {\n                    this.trackOutsideClicks();\n                }\n                break;\n            }\n            case MessageEventName.Q_PANEL_ENTERED_FULLSCREEN: {\n                this.enterFullScreen(metadata);\n                break;\n            }\n            case MessageEventName.Q_PANEL_EXITED_FULLSCREEN: {\n                this.exitFullScreen(metadata);\n                break;\n            }\n        }\n    };\n\n    private transformGenerativeQnAContentOptions = (contentOptions: GenerativeQnAContentOptions) => {\n        const unrecognizedProperties: string[] = [];\n\n        const markUnrecognized = (properties: object, prefix = '') => {\n            Object.keys(properties).forEach(key => {\n                unrecognizedProperties.push(prefix + key);\n            });\n        };\n\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage, // excluded from unrecognized\n            showTopicName,\n            showPinboard,\n            allowTopicSelection,\n            allowFullscreen,\n            searchPlaceholderText,\n            panelOptions,\n            themeOptions,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        markUnrecognized(unrecognizedContentOptions);\n\n        const transformedContentOptions: TransformedGenerativeQnAContentOptions = {\n            qShowTopicName: showTopicName,\n            qShowPinboard: showPinboard,\n            qAllowTopicSelection: allowTopicSelection,\n            qAllowFullscreen: allowFullscreen,\n        };\n\n        if (typeof searchPlaceholderText === 'string') {\n            this.checkMaxLength(searchPlaceholderText, 'searchPlaceholderText');\n            transformedContentOptions.qSearchPlaceholderText = encodeURIComponent(searchPlaceholderText);\n        }\n\n        if (panelOptions) {\n            const {panelType} = panelOptions;\n            transformedContentOptions.qPanelType = panelType;\n\n            if (panelType === GenerativeQnAPanelType.FULL) {\n                const {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    panelType: unusedPanelType, // excluded from unrecognized\n                    title,\n                    showQIcon,\n                    ...unrecognizedPanelOptions\n                } = panelOptions;\n\n                if (typeof title === 'string') {\n                    this.checkMaxLength(title, 'panelOptions.title');\n                    transformedContentOptions.qPanelTitle = encodeURIComponent(title);\n                }\n                transformedContentOptions.qShowPanelIcon = showQIcon;\n\n                markUnrecognized(unrecognizedPanelOptions, 'panelOptions.');\n            } else if (panelType === GenerativeQnAPanelType.SEARCH_BAR) {\n                const {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    panelType: unusedPanelType, // excluded from unrecognized\n                    focusedHeight,\n                    expandedHeight,\n                    ...unrecognizedPanelOptions\n                } = panelOptions;\n\n                transformedContentOptions.qPanelFocusedHeight = focusedHeight;\n                transformedContentOptions.qPanelExpandedHeight = expandedHeight;\n\n                markUnrecognized(unrecognizedPanelOptions, 'panelOptions.');\n            } else {\n                throw new Error('panelOptions.panelType should be one of following: [FULL, SEARCH_BAR]');\n            }\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        this.warnUnrecognizedContentOptions(unrecognizedProperties);\n\n        return transformedContentOptions;\n    };\n\n    private checkMaxLength = (value: string, propertyName: string) => {\n        const maxLength = GenerativeQnAExperience.TEXT_PROPERTY_MAX_LENGTH;\n        if (value.length > maxLength) {\n            throw new Error(`${propertyName} should be less than ${maxLength} characters`);\n        }\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ControlOptions, InternalControlExperience} from '../types';\nimport {EventListener} from '@common/event-manager/types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {BaseContentOptions, FrameOptions} from '@experience/base-experience/types';\n\nexport class ControlExperienceFrame extends BaseExperienceFrame<object, BaseContentOptions, InternalControlExperience> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: BaseContentOptions,\n        transformedContentOptions: object,\n        internalExperience: InternalControlExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join('?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ControlExperienceFrame} from './frame/control-experience-frame';\nimport {ControlOptions, IControlExperience, InternalControlExperience, UrlInfo} from './types';\nimport {ExperienceType} from '../base-experience';\nimport {EventManager} from '@common/event-manager/event-manager';\nimport {ChangeEvent, TargetedMessageEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {EventListener} from '@common/event-manager/types';\nimport {LogProvider} from '../../common';\n\nexport class ControlExperience {\n    static FRAME_TIMEOUT = 60000;\n    private readonly container: HTMLBodyElement;\n    private readonly urlInfo: UrlInfo;\n    private readonly internalExperience: InternalControlExperience;\n    private readonly eventManager: EventManager;\n    private readonly onChange?: EventListener;\n    private readonly experience: IControlExperience = {\n        experienceType: ExperienceType.CONTROL,\n    };\n    private readonly logger?: LogProvider;\n    private readonly controlExperienceFrame: ControlExperienceFrame;\n\n    constructor(\n        container: HTMLBodyElement,\n        controlOptions: ControlOptions,\n        onChange?: EventListener,\n        logger?: LogProvider\n    ) {\n        this.container = container;\n        this.eventManager = controlOptions.eventManager;\n        this.urlInfo = controlOptions.urlInfo;\n        this.onChange = onChange;\n        this.logger = logger;\n\n        this.internalExperience = {\n            ...this.experience,\n            contextId: controlOptions.contextId,\n            discriminator: 0,\n        };\n\n        const controlExperienceId = this.getControlExperienceId();\n\n        this.controlExperienceFrame = new ControlExperienceFrame(\n            {\n                url: this.getControlExperienceBaseUrl(),\n                container: this.container,\n                width: '0px',\n                height: '0px',\n                onChange: this.onChange,\n            },\n            {\n                eventManager: this.eventManager,\n                contextId: this.internalExperience.contextId,\n                timeout: ControlExperience.FRAME_TIMEOUT,\n                urlInfo: this.urlInfo,\n            },\n            {},\n            {},\n            this.internalExperience,\n            controlExperienceId\n        );\n\n        window.addEventListener('message', this.controlFrameMessageListener);\n        this.eventManager.addEventListenerForCleanup(controlExperienceId, () =>\n            window.removeEventListener('message', this.controlFrameMessageListener)\n        );\n    }\n\n    public send = (messageEvent: TargetedMessageEvent) => {\n        return this.controlExperienceFrame.send(messageEvent);\n    };\n\n    public controlFrameMessageListener = (event: MessageEvent<EmbeddingEvents>) => {\n        if (this.isMessageEvent(event.data)) {\n            const messageEvent = event.data;\n            try {\n                if (messageEvent.eventTarget) {\n                    const incomingExperienceIdentifier = BaseExperience.getExperienceIdentifier(\n                        messageEvent.eventTarget\n                    );\n\n                    this.eventManager.invokeEventListener(incomingExperienceIdentifier, messageEvent);\n                }\n\n                this.sendAcknowledgment(messageEvent);\n            } catch (error) {\n                this.onChange?.(\n                    new ChangeEvent(\n                        ChangeEventName.UNRECOGNIZED_EVENT_TARGET,\n                        ChangeEventLevel.WARN,\n                        'Message with unrecognized event target received',\n                        {\n                            eventTarget: messageEvent.eventTarget,\n                        }\n                    ),\n                    {frame: this.controlExperienceFrame.iframe}\n                );\n                this.logger?.warn('Message with unrecognized event target received');\n            }\n        }\n    };\n\n    private sendAcknowledgment = (messageEvent: EmbeddingEvents) => {\n        const acknowledgment = new TargetedMessageEvent(MessageEventName.ACKNOWLEDGE, this.internalExperience, {\n            eventName: messageEvent.eventName,\n            eventTarget: messageEvent.eventTarget,\n        });\n\n        window.requestIdleCallback?.(() => this.send(acknowledgment)) || this.send(acknowledgment);\n    };\n\n    private getControlExperienceId = () => {\n        return [\n            this.internalExperience.contextId,\n            this.internalExperience.experienceType,\n            this.internalExperience.discriminator,\n        ]\n            .filter(Boolean)\n            .join('-');\n    };\n\n    private getControlExperienceBaseUrl = () => {\n        const {host, sessionId} = this.urlInfo;\n        const urlString = `${host}/embed/${sessionId}/embedControl`;\n        return new URL(urlString).href;\n    };\n\n    private isMessageEvent = (messageEvent: EmbeddingEvents) => {\n        return !!messageEvent && !!messageEvent.eventTarget && !!messageEvent.eventName;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceIdentifier, EventListener} from './types';\nimport {EmbeddingEvents} from '../events';\nimport {CleanUpCallback} from '../types';\n\n/**\n * Manages the event listeners for the experiences within an embedding context\n */\nexport class EventManager {\n    private eventListeners: Map<ExperienceIdentifier, EventListener[]>;\n    private cleanUpCallbacks: Map<ExperienceIdentifier, CleanUpCallback[]>;\n\n    constructor() {\n        this.eventListeners = new Map();\n        this.cleanUpCallbacks = new Map();\n    }\n\n    public addEventListener = (experienceId: ExperienceIdentifier, listener: EventListener, cleanUp?: boolean) => {\n        if (!experienceId) {\n            throw new Error('Experience identifier is required when calling addEventListener');\n        }\n\n        if (typeof listener !== 'function') {\n            throw new Error('Invalid type provided for event listener');\n        }\n\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (cleanUp) {\n            this.addEventListenerForCleanup(experienceId, () => this.removeEventListener(experienceId, listener));\n        }\n\n        if (!experienceIdentifierSpecificListeners) {\n            this.eventListeners.set(experienceId, [listener]);\n            return this;\n        }\n\n        experienceIdentifierSpecificListeners.push(listener);\n        return this;\n    };\n\n    public invokeEventListener = (experienceId: ExperienceIdentifier, event: EmbeddingEvents) => {\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (!experienceIdentifierSpecificListeners) {\n            throw new Error(`Unable to find experience specific event listeners: ${experienceId}`);\n        }\n\n        experienceIdentifierSpecificListeners.forEach((listener: EventListener) => {\n            listener(event);\n        });\n\n        return this;\n    };\n\n    public removeEventListener = (experienceId: ExperienceIdentifier, listener: EventListener) => {\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (!experienceIdentifierSpecificListeners) {\n            throw new Error(`Unable to find experience specific event listeners: ${experienceId}`);\n        }\n\n        const updateEventListeners = experienceIdentifierSpecificListeners.filter(\n            listenerItem => listenerItem !== listener\n        );\n\n        this.eventListeners.set(experienceId, updateEventListeners);\n\n        return this;\n    };\n\n    public addEventListenerForCleanup = (experienceId: ExperienceIdentifier, cleanupCallback: CleanUpCallback) => {\n        const experienceIdentifierSpecificListenersForCleanup = this.cleanUpCallbacks.get(experienceId) ?? [];\n        experienceIdentifierSpecificListenersForCleanup.push(cleanupCallback);\n\n        this.cleanUpCallbacks.set(experienceId, experienceIdentifierSpecificListenersForCleanup);\n    };\n\n    public cleanUpCallbacksForExperience = (experienceId: ExperienceIdentifier) => {\n        const experienceIdentifierSpecificListenersForCleanup = this.cleanUpCallbacks.get(experienceId);\n\n        if (experienceIdentifierSpecificListenersForCleanup) {\n            experienceIdentifierSpecificListenersForCleanup.forEach(callback => callback());\n            this.cleanUpCallbacks.delete(experienceId);\n            this.eventListeners.set(experienceId, []);\n        }\n    };\n}\n","export interface LogProvider {\n    log: typeof console.log;\n    warn: typeof console.warn;\n    error: typeof console.error;\n    debug: typeof console.debug;\n    info: typeof console.info;\n}\n\n/**\n * Temporary abstraction for customer provided logger\n *\n */\nexport class DefaultLogger implements LogProvider {\n    log = console.log;\n\n    warn = console.warn;\n\n    error = console.error;\n\n    debug = console.debug;\n\n    info = console.info;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {v4} from 'uuid';\nimport {\n    EmbeddingContextFrameOptions,\n    ExperienceFrameMetadata,\n    IEmbeddingContext,\n} from '@common/embedding-context/types';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {VisualContentOptions} from '@experience/visual-experience/types';\nimport {VisualExperience} from '@experience/visual-experience/visual-experience';\nimport {DashboardContentOptions} from '@experience/dashboard-experience/types';\nimport {ConsoleContentOptions} from '@experience/console-experience/types';\nimport {QSearchContentOptions} from '@experience/q-search-experience/types';\nimport {GenerativeQnAContentOptions} from '@experience/generative-qna-experience/types';\nimport {ConsoleExperience} from '@experience/console-experience/console-experience';\nimport {DashboardExperience} from '@experience/dashboard-experience/dashboard-experience';\nimport {QSearchExperience} from '@experience/q-search-experience/q-search-experience';\nimport {GenerativeQnAExperience} from '@experience/generative-qna-experience/generative-qna-experience';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents} from '@common/events/types';\nimport {ChangeEvent} from '@common/events/events';\nimport {ControlExperience} from '@experience/control-experience/control-experience';\nimport {EventManager} from '@common/event-manager/event-manager';\nimport {DefaultLogger, LogProvider} from '../log-provider/log-provider';\n\n/**\n * The embedding context creates an additional zero-pixel iframe and appends it into the body element on the page to centralize communication between the SDK and the embedded QuickSight content\n */\nexport class EmbeddingContext implements IEmbeddingContext {\n    private readonly experienceIdentifiers: Set<string>;\n    private readonly eventManager: EventManager;\n    private readonly contextId: string;\n    private readonly contextOnChange;\n    private controlOptions?: ControlOptions;\n    private readonly logger: LogProvider;\n\n    constructor(contextFrameOptions: EmbeddingContextFrameOptions) {\n        // The contextId is shared with experiences to create a communication context\n        // Experiences with not-matching contextId is outside the communication context\n        this.contextId = v4();\n        this.experienceIdentifiers = new Set();\n\n        // The eventManager instance below is passed to all experiences to create a unified event management\n        this.eventManager = new EventManager();\n        this.contextOnChange = contextFrameOptions.onChange;\n        this.logger = new DefaultLogger();\n    }\n\n    public embedVisual = async (\n        frameOptions: FrameOptions,\n        contentOptions: VisualContentOptions = {}\n    ): Promise<VisualExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedVisual');\n        const controlOptions = this.buildControlOptions(frameOptions);\n\n        return new VisualExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedDashboard = async (\n        frameOptions: FrameOptions,\n        contentOptions: DashboardContentOptions = {}\n    ): Promise<DashboardExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedDashboard');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new DashboardExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedConsole = async (\n        frameOptions: FrameOptions,\n        contentOptions: ConsoleContentOptions = {}\n    ): Promise<ConsoleExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedConsole');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new ConsoleExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedQSearchBar = async (\n        frameOptions: FrameOptions,\n        contentOptions: QSearchContentOptions = {}\n    ): Promise<QSearchExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedQSearchBar');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new QSearchExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedGenerativeQnA = async (\n        frameOptions: FrameOptions,\n        contentOptions: GenerativeQnAContentOptions = {}\n    ): Promise<GenerativeQnAExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedGenerativeQnA');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new GenerativeQnAExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    private validateFrameOptions = (frameOptions: FrameOptions, methodName: string) => {\n        if (!frameOptions) {\n            const errorMessage = `${methodName} is called without frameOptions`;\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.NO_FRAME_OPTIONS,\n                    ChangeEventLevel.ERROR,\n                    `${methodName} is called without frameOptions`,\n                    {\n                        methodName,\n                    }\n                ),\n                {frame: null}\n            );\n            throw new Error(errorMessage);\n        }\n\n        if (typeof frameOptions !== 'object' || Array.isArray(frameOptions)) {\n            const errorMessage = `${methodName} is called with non-object frameOptions`;\n            this.onChange(\n                new ChangeEvent(ChangeEventName.INVALID_FRAME_OPTIONS, ChangeEventLevel.ERROR, errorMessage, {\n                    methodName,\n                    frameOptionsType: Array.isArray(frameOptions) ? 'array' : typeof frameOptions,\n                }),\n                {frame: null}\n            );\n            throw new Error(errorMessage);\n        }\n\n        const recognizedKeys = [\n            'url',\n            'container',\n            'width',\n            'height',\n            'resizeHeightOnSizeChangedEvent',\n            'withIframePlaceholder',\n            'onChange',\n            'className',\n        ];\n\n        const unrecognizedFrameOptionNames = Object.keys(frameOptions).filter(key => !recognizedKeys.includes(key));\n\n        if (unrecognizedFrameOptionNames.length > 0) {\n            const warnMessage = `${methodName} is called with unrecognized properties`;\n            frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.UNRECOGNIZED_FRAME_OPTIONS, ChangeEventLevel.WARN, warnMessage, {\n                    unrecognizedFrameOptions: unrecognizedFrameOptionNames,\n                }),\n                {frame: null}\n            );\n\n            this.logger?.warn(warnMessage);\n        }\n    };\n\n    private buildControlOptions = (frameOptions: FrameOptions): ControlOptions => {\n        if (!this.controlOptions) {\n            if (!frameOptions.url) {\n                throw new Error('URL is missing in frame options, but is a required field');\n            }\n\n            const urlInfo = this.getControlUrlInfo(frameOptions.url);\n\n            const controlFrame = new ControlExperience(\n                this.getBodyElement(),\n                {\n                    eventManager: this.eventManager,\n                    urlInfo,\n                    contextId: this.contextId,\n                },\n                this.onChange,\n                this.logger\n            );\n\n            this.controlOptions = {\n                eventManager: this.eventManager,\n                sendToControlFrame: controlFrame.send,\n                contextId: this.contextId,\n                timeout: ControlExperience.FRAME_TIMEOUT,\n                urlInfo,\n            };\n        }\n\n        return this.controlOptions;\n    };\n\n    private onChange = (event: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        if (this.contextOnChange) {\n            this.contextOnChange(event, metadata);\n        }\n    };\n\n    private getControlUrlInfo = (url: string) => {\n        const matches: Array<string> = /^(https:\\/\\/[^/]+)\\/(embedding|embed)\\/([^/]+)\\/[^?]+\\?(.*)/i.exec(url) || [];\n\n        if (matches?.length < 4) {\n            throw new Error(`Invalid embedding url: \"${url}\"`);\n        }\n\n        return {\n            sessionId: matches[3],\n            host: matches[1],\n            urlSearchParams: new URLSearchParams(matches[4]),\n        };\n    };\n\n    private getBodyElement = () => {\n        // body element on a page is required to embed the redeem and control frames\n        const body = document.getElementsByTagName('body')?.[0];\n\n        if (!body) {\n            const message = 'could not locate <body> element in the page';\n            this.onChange(new ChangeEvent(ChangeEventName.NO_BODY, ChangeEventLevel.ERROR, message), {frame: null});\n\n            throw new Error(message);\n        }\n\n        return body;\n    };\n}\n\nexport const createEmbeddingContext = async (frameOptions: EmbeddingContextFrameOptions = {}) => {\n    return new EmbeddingContext(frameOptions);\n};\n","import * as EventMessages from '@common/events/messages';\nimport * as EventTypes from '@common/events/types';\nimport * as EventManagerTypes from '@common/event-manager/types';\nimport * as EmbeddingContextTypes from '@common/embedding-context/types';\nimport * as IframeTypes from '@common/iframe/types';\nimport * as CommonTypes from './common/types';\n\nimport * as BaseExperienceTypes from '@experience/base-experience/types';\nimport * as ConsoleExperienceTypes from '@experience/console-experience/types';\nimport * as DashboardExperienceTypes from '@experience/dashboard-experience/types';\nimport * as ControlExperienceTypes from '@experience/control-experience/types';\nimport * as QSearchExperienceTypes from '@experience/q-search-experience/types';\nimport * as VisualExperienceTypes from '@experience/visual-experience/types';\nimport * as GenerativeQnAExperienceTypes from '@experience/generative-qna-experience/types';\nimport * as InternalQBaseExperienceTypes from '@experience/internal-q-base-experience/types';\n\nexport * from './common';\nexport * from './experiences';\n\n/**\n * Namespaces enums under one import for convenience\n *\n * @deprecated - Enums can be imported directly\n */\nexport const QSE = {\n    ...CommonTypes,\n    ...EventMessages,\n    ...EventTypes,\n    ...EventManagerTypes,\n    ...EmbeddingContextTypes,\n    ...IframeTypes,\n    ...BaseExperienceTypes,\n    ...ConsoleExperienceTypes,\n    ...DashboardExperienceTypes,\n    ...QSearchExperienceTypes,\n    ...ControlExperienceTypes,\n    ...VisualExperienceTypes,\n    ...GenerativeQnAExperienceTypes,\n    ...InternalQBaseExperienceTypes,\n};\n"],"names":["InfoMessageEventName","CALLBACK_OPERATION_INVOKED","CONTENT_LOADED","EXPERIENCE_INITIALIZED","ERROR_OCCURRED","SIZE_CHANGED","PARAMETERS_CHANGED","SELECTED_SHEET_CHANGED","MODAL_OPENED","Q_SEARCH_CLOSED","Q_SEARCH_OPENED","Q_SEARCH_FOCUSED","Q_SEARCH_SIZE_CHANGED","Q_SEARCH_ENTERED_FULLSCREEN","Q_SEARCH_EXITED_FULLSCREEN","Q_PANEL_ENTERED_FULLSCREEN","Q_PANEL_EXITED_FULLSCREEN","PAGE_NAVIGATION","InfoChangeEventName","FRAME_STARTED","FRAME_MOUNTED","FRAME_LOADED","FRAME_REMOVED","ErrorChangeEventName","FRAME_NOT_CREATED","NO_BODY","NO_CONTAINER","INVALID_CONTAINER","NO_URL","INVALID_URL","NO_FRAME_OPTIONS","INVALID_FRAME_OPTIONS","WarnChangeEventName","UNRECOGNIZED_CONTENT_OPTIONS","UNRECOGNIZED_FRAME_OPTIONS","UNRECOGNIZED_EVENT_TARGET","SetterMessageEventName","SET_PARAMETERS","SET_SELECTED_SHEET_ID","SET_Q_SEARCH_QUESTION","SET_VISUAL_ACTIONS","SET_THEME","ADD_FILTER_GROUPS","UPDATE_FILTER_GROUPS","REMOVE_FILTER_GROUPS","ADD_VISUAL_ACTIONS","REMOVE_VISUAL_ACTIONS","SET_THEME_OVERRIDE","PRELOAD_THEMES","CREATE_SHARED_VIEW","GetterMessageEventName","GET_PARAMETERS","GET_SHEETS","GET_SHEET_VISUALS","GET_VISUAL_ACTIONS","GET_SELECTED_SHEET_ID","GET_FILTER_GROUPS_FOR_SHEET","GET_FILTER_GROUPS_FOR_VISUAL","InvokerMessageEventName","ACKNOWLEDGE","INITIATE_PRINT","NAVIGATE_TO_DASHBOARD","CLOSE_Q_SEARCH","UNDO","REDO","RESET","TOGGLE_BOOKMARKS_PANE","ChangeEventName","_objectSpread","MessageEventName","ChangeEventLevel","ERROR","INFO","WARN","ExperienceType","CONSOLE","CONTEXT","CONTROL","VISUAL","DASHBOARD","QSEARCH","GENERATIVEQNA","SPECIAL_DATAPOINT_VALUE_TYPES","NULL","OTHER_BUCKET","CALCULATED_METRIC_COLUMN_TYPE","INTEGER","STRING","DECIMAL","DATETIME","GenerativeQnAPanelType","FULL","SEARCH_BAR","EmbeddingEvent","_createClass","eventName","message","data","_classCallCheck","this","ChangeEvent","_EmbeddingEvent","eventLevel","_this","_callSuper","_inherits","EmbeddingMessageEvent","_EmbeddingEvent2","_this2","TargetedMessageEvent","_EmbeddingMessageEven","eventTarget","_this3","PostMessageEvent","_TargetedMessageEvent","eventId","timestamp","version","_this4","ResponseMessage","SuccessResponse","_defineProperty","ErrorResponse","errorResponse","errorCode","error","DataResponse","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error","byteToHex","i","push","toString","slice","native","randomUUID","v4","options","buf","offset","rnds","random","arr","unsafeStringify","BaseExperience","frameOptions","contentOptions","controlOptions","experienceIdentifiers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messageEvent","targetedMessageEvent","wrap","_context","prev","next","experienceFrame","internalExperience","abrupt","send","stop","_x","apply","arguments","listener","addInternalEventListener","logProvider","logger","experience","experienceIdentifier","discriminator","contextId","getExperienceIdentifier","has","add","filteredOptions","unrecognizedContentOptions","warnUnrecognizedContentOptions","Object","keys","unrecognizedProperties","_this$frameOptions$on","_this$frameOptions","_this$logger","length","onChange","call","frame","warn","url","_this$frameOptions$on2","_this$frameOptions2","validateFrameOptions","experienceType","dashboardId","filter","Boolean","join","sheetId","visualId","includes","maxInt","errors","overflow","floor","Math","stringFromCharCode","String","fromCharCode","type","RangeError","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","baseMinusTMin","base","encode","input","output","string","counter","value","charCodeAt","extra","ucs2decode","inputLength","n","bias","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","t","qMinusT","baseMinusT","Iframe","IFRAME_CLASS_NAME","iframe","withIframePlaceholder","iframePlaceholder","document","createElement","id","concat","iframeName","style","width","backgroundColor","display","justifyContent","alignItems","className","height","endsWith","appendChild","loaderSVG","createLoaderSVG","container","classNames","trim","name","loading","border","padding","opacity","position","payload","postRequest","createPostRequest","src","target","event","_this$onLoad","_this$postRequest","remove","transition","onLoad","postRequestOptions","form","visibility","method","action","forEach","payloadItem","submit","tagName","attributes","styles","undefined","children","element","createElementNS","entries","_ref2","_slicedToArray","setAttribute","_ref3","_ref4","setProperty","child","circles","map","animate","createSvgElement","attributeName","dur","values","repeatCount","begin","fill","stroke","cx","cy","r","x","y","viewBox","_options$width","_options$height","createIframePlaceholder","createIframe","addEventListener","onLoadLocal","SDK_VERSION","BaseExperienceFrame","transformedContentOptions","interceptMessage","_this$iframe","_this$iframe2","sendToControlFrame","Date","now","contentWindow","postMessage","Promise","resolve","reject","eventHandler","_responseMessageEvent","_responseMessageEvent2","responseMessageEvent","window","removeEventListener","success","setTimeout","MESSAGE_RESPONSE_TIMEOUT","parameters","_typeof","key","Array","isArray","encodedName","encodeURIComponent","encodedValue","reduce","memoizedOptions","_ref5","punyCodeEmbedOrigin","location","origin","sdkVersion","URLSearchParams","setTimeoutInstance","experienceId","onLoadHandler","getIframe","err","handler","metadata","eventManager","timeoutInstance","timeout","_callee2","_context2","clearTimeout","_container","querySelector","nodeName","changeEvent","onMessage","interceptOnMessage","mutationObserver","MutationObserver","mutations","some","record","from","removedNodes","node","cleanUpCallbacksForExperience","disconnect","observe","body","childList","subtree","decorateOnChange","decorateOnMessage","getContainer","validateBaseUrl","origin_url","initializeMutationObserver","VisualExperienceFrame","_BaseExperienceFrame","baseUrl","_this$transformedCont","otherOptions","_objectWithoutProperties","_excluded","_this$internalExperie","buildQueryString","buildParameterString","buildExperienceUrl","createExperienceIframe","VisualExperience","_BaseExperience","_callee3","filterGroups","_context3","_x2","_callee4","_context4","_x3","_callee5","_context5","_x4","_callee6","response","_context6","sent","_callee7","_context7","_ref8","_callee8","actions","_context8","Actions","_x5","_ref9","_callee9","_context9","_x6","_ref10","_callee10","_context10","_x7","_ref11","_callee11","themeArn","_context11","ThemeArn","_x8","_ref12","_callee12","themeOverride","_context12","ThemeOverride","_x9","_ref13","_callee13","preloadThemes","_context13","PreloadThemes","_x10","matches","exec","_this$contentOptions","_this$contentOptions2","_metadata$frame","_metadata$frame$setAt","_messageEvent$message","resizeHeightOnSizeChangedEvent","themeOptions","setThemeOverride","setPreloadThemes","fitToIframeWidth","locale","transformContentOptions","parametersAsObject","parameter","Name","Values","extractExperienceFromUrl","_this$getInternalExpe","getInternalExperienceInfo","transformVisualContentOptions","ConsoleExperienceFrame","ConsoleExperience","currentPage","pageType","DashboardExperienceFrame","viewId","URL","pathname","href","DashboardExperience","_ref7","SheetId","VisualId","_x11","_ref14","_callee14","_context14","_x12","_x13","_x14","_callee15","_context15","_ref16","_callee16","_context16","_x15","_ref17","_callee17","_context17","_x16","_ref18","_callee18","navigateToDashboardOptions","_context18","DashboardId","Parameters","_x17","_x18","_ref19","_callee19","_context19","_x19","_x20","_x21","_ref20","_callee20","_context20","_x22","_ref21","_callee21","_context21","_x23","_callee22","_context22","_ref23","_callee23","_context23","_x24","_ref24","_callee24","_context24","_x25","_callee25","_context25","_toolbarOptions$expor","attributionOptions","sheetOptions","toolbarOptions","overlayContent","footerPaddingEnabled","print","printEnabled","undoRedo","undoRedoDisabled","reset","resetDisabled","bookmarks","showBookmarksIcon","initialSheetId","singleSheet","sheetTabsDisabled","emitSizeChangedEventOnSheetChange","resizeOnSheetChange","transformDashboardContentOptions","QSearchExperienceFrame","InternalQBaseExperience","_len","args","_key","question","clickHandler","_this$experienceFrame","contains","close","addEventListenerForCleanup","_metadata$frame2","frameStyles","top","left","zIndex","MAX_Z_INDEX","QSearchExperience","_InternalQBaseExperie","trackOutsideClicks","enterFullScreen","exitFullScreen","hideIcon","hideTopicName","theme","allowTopicSelection","qBarIconDisabled","qBarTopicNameDisabled","themeId","transformQSearchContentOptions","GenerativeQnAExperienceFrame","GenerativeQnAExperience","panelOptions","panelType","markUnrecognized","properties","prefix","showTopicName","showPinboard","allowFullscreen","searchPlaceholderText","qShowTopicName","qShowPinboard","qAllowTopicSelection","qAllowFullscreen","checkMaxLength","qSearchPlaceholderText","qPanelType","title","showQIcon","unrecognizedPanelOptions","_excluded2","qPanelTitle","qShowPanelIcon","focusedHeight","expandedHeight","_excluded3","qPanelFocusedHeight","qPanelExpandedHeight","propertyName","maxLength","TEXT_PROPERTY_MAX_LENGTH","transformGenerativeQnAContentOptions","ControlExperienceFrame","ControlExperience","controlExperienceFrame","isMessageEvent","incomingExperienceIdentifier","invokeEventListener","sendAcknowledgment","_this$onChange","_window$requestIdleCa","_window","acknowledgment","requestIdleCallback","_this$urlInfo","urlInfo","host","sessionId","urlString","controlExperienceId","getControlExperienceId","getControlExperienceBaseUrl","FRAME_TIMEOUT","controlFrameMessageListener","EventManager","cleanUp","experienceIdentifierSpecificListeners","eventListeners","get","set","updateEventListeners","listenerItem","cleanupCallback","_this$cleanUpCallback","experienceIdentifierSpecificListenersForCleanup","cleanUpCallbacks","callback","Map","DefaultLogger","console","log","debug","info","EmbeddingContext","contextFrameOptions","_args","buildControlOptions","setLogProvider","_args2","_args3","_args4","_args5","methodName","errorMessage","frameOptionsType","recognizedKeys","unrecognizedFrameOptionNames","_frameOptions$onChang","warnMessage","unrecognizedFrameOptions","getControlUrlInfo","controlFrame","getBodyElement","contextOnChange","urlSearchParams","_document$getElements","getElementsByTagName","Set","createEmbeddingContext","_ref6","_args6","QSE","CommonTypes","EventMessages","EventTypes","EventManagerTypes","EmbeddingContextTypes","IframeTypes","BaseExperienceTypes","ConsoleExperienceTypes","DashboardExperienceTypes","QSearchExperienceTypes","ControlExperienceTypes","VisualExperienceTypes","GenerativeQnAExperienceTypes","InternalQBaseExperienceTypes"],"mappings":"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","x_google_ignoreList":[10,11,12,13,15]}