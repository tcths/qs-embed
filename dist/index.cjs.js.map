{"version":3,"file":"index.cjs.js","sources":["../src/common/events/messages/info/index.ts","../src/common/events/messages/change/index.ts","../src/common/events/messages/setters/index.ts","../src/common/events/messages/getters/index.ts","../src/common/events/messages/invokers/index.ts","../src/common/events/types.ts","../src/experiences/base-experience/types.ts","../src/experiences/dashboard-experience/types.ts","../src/experiences/generative-qna-experience/types.ts","../src/common/events/events.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/v4.js","../src/experiences/base-experience/base-experience.ts","../node_modules/punycode/punycode.es6.js","../src/common/iframe/iframe.ts","../src/experiences/base-experience/frame/experience-frame.ts","../src/experiences/visual-experience/frame/visual-experience-frame.ts","../src/experiences/visual-experience/visual-experience.ts","../src/experiences/console-experience/frame/console-experience-frame.ts","../src/experiences/console-experience/console-experience.ts","../src/experiences/dashboard-experience/frame/dashboard-experience-frame.ts","../src/experiences/dashboard-experience/dashboard-experience.ts","../src/experiences/q-search-experience/frame/q-search-experience-frame.ts","../src/experiences/internal-q-base-experience/internal-q-base-experience.ts","../src/experiences/q-search-experience/q-search-experience.ts","../src/experiences/generative-qna-experience/frame/generative-qna-experience-frame.ts","../src/experiences/generative-qna-experience/generative-qna-experience.ts","../src/experiences/control-experience/frame/control-experience-frame.ts","../src/experiences/control-experience/control-experience.ts","../src/common/event-manager/event-manager.ts","../src/common/log-provider/log-provider.ts","../src/common/embedding-context/embedding-context.ts","../src/index.ts"],"sourcesContent":["import {EmbeddingEvent, TargetedMessageEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {Datapoint} from '@experience/dashboard-experience/types';\n\nexport const InfoMessageEventName = {\n    CALLBACK_OPERATION_INVOKED: 'CALLBACK_OPERATION_INVOKED',\n    CONTENT_LOADED: 'CONTENT_LOADED',\n    EXPERIENCE_INITIALIZED: 'EXPERIENCE_INITIALIZED',\n    ERROR_OCCURRED: 'ERROR_OCCURRED',\n    SIZE_CHANGED: 'SIZE_CHANGED',\n    PARAMETERS_CHANGED: 'PARAMETERS_CHANGED',\n    SELECTED_SHEET_CHANGED: 'SELECTED_SHEET_CHANGED',\n    MODAL_OPENED: 'MODAL_OPENED',\n    Q_SEARCH_CLOSED: 'Q_SEARCH_CLOSED',\n    Q_SEARCH_OPENED: 'Q_SEARCH_OPENED',\n    Q_SEARCH_FOCUSED: 'Q_SEARCH_FOCUSED',\n    Q_SEARCH_SIZE_CHANGED: 'Q_SEARCH_SIZE_CHANGED',\n    Q_SEARCH_ENTERED_FULLSCREEN: 'Q_SEARCH_ENTERED_FULLSCREEN',\n    Q_SEARCH_EXITED_FULLSCREEN: 'Q_SEARCH_EXITED_FULLSCREEN',\n    Q_PANEL_ENTERED_FULLSCREEN: 'Q_PANEL_ENTERED_FULLSCREEN',\n    Q_PANEL_EXITED_FULLSCREEN: 'Q_PANEL_EXITED_FULLSCREEN',\n    PAGE_NAVIGATION: 'PAGE_NAVIGATION',\n} as const;\n\nexport type InfoMessageEventName = (typeof InfoMessageEventName)[keyof typeof InfoMessageEventName];\n\nexport type InfoMessageEvents =\n    | EmbeddingEvent<typeof InfoMessageEventName.CONTENT_LOADED, {title?: string}>\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.CALLBACK_OPERATION_INVOKED,\n          {\n              CustomActionId: string;\n              DashboardId: string;\n              VisualId: string;\n              SheetId: string;\n              Datapoints: Datapoint[];\n          }\n      >\n    | EmbeddingEvent<typeof InfoMessageEventName.SIZE_CHANGED, {height?: string; width?: string}>\n    | TargetedMessageEvent<typeof InfoMessageEventName.EXPERIENCE_INITIALIZED, object>\n    | EmbeddingEvent<typeof InfoMessageEventName.ERROR_OCCURRED, {errorCode?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.MODAL_OPENED, undefined>\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.PARAMETERS_CHANGED,\n          {\n              changedParameters: Parameter[];\n          }\n      >\n    | EmbeddingEvent<\n          typeof InfoMessageEventName.SELECTED_SHEET_CHANGED,\n          {selectedSheet: {Name?: string; SheetId: string}}\n      >\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_CLOSED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_OPENED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_FOCUSED, {height?: string}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_SIZE_CHANGED, {height?: number}>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_ENTERED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_SEARCH_EXITED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_PANEL_ENTERED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.Q_PANEL_EXITED_FULLSCREEN, undefined>\n    | EmbeddingEvent<typeof InfoMessageEventName.PAGE_NAVIGATION, {pageType?: string}>;\n","import {ChangeEvent} from '@common/events/events';\n\nexport const InfoChangeEventName = {\n    FRAME_STARTED: 'FRAME_STARTED',\n    FRAME_MOUNTED: 'FRAME_MOUNTED',\n    FRAME_LOADED: 'FRAME_LOADED',\n    FRAME_REMOVED: 'FRAME_REMOVED',\n} as const;\n\nexport type InfoChangeEventName = (typeof InfoChangeEventName)[keyof typeof InfoChangeEventName];\n\nexport const ErrorChangeEventName = {\n    FRAME_NOT_CREATED: 'FRAME_NOT_CREATED',\n    NO_BODY: 'NO_BODY',\n    NO_CONTAINER: 'NO_CONTAINER',\n    INVALID_CONTAINER: 'INVALID_CONTAINER',\n    NO_URL: 'NO_URL',\n    INVALID_URL: 'INVALID_URL',\n    NO_FRAME_OPTIONS: 'NO_FRAME_OPTIONS',\n    INVALID_FRAME_OPTIONS: 'INVALID_FRAME_OPTIONS',\n} as const;\n\nexport type ErrorChangeEventName = (typeof ErrorChangeEventName)[keyof typeof ErrorChangeEventName];\n\nexport const WarnChangeEventName = {\n    UNRECOGNIZED_CONTENT_OPTIONS: 'UNRECOGNIZED_CONTENT_OPTIONS',\n    UNRECOGNIZED_FRAME_OPTIONS: 'UNRECOGNIZED_FRAME_OPTIONS',\n    UNRECOGNIZED_EVENT_TARGET: 'UNRECOGNIZED_EVENT_TARGET',\n} as const;\n\nexport type WarnChangeEventName = (typeof WarnChangeEventName)[keyof typeof WarnChangeEventName];\n\nexport type ChangeMessageEvents =\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_LOADED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_MOUNTED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_STARTED, string>\n    | ChangeEvent<typeof InfoChangeEventName.FRAME_REMOVED, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_CONTENT_OPTIONS, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_FRAME_OPTIONS, string>\n    | ChangeEvent<typeof WarnChangeEventName.UNRECOGNIZED_EVENT_TARGET, string>\n    | ChangeEvent<typeof ErrorChangeEventName.FRAME_NOT_CREATED, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_BODY, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_CONTAINER, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_CONTAINER, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_URL, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_URL, string>\n    | ChangeEvent<typeof ErrorChangeEventName.NO_FRAME_OPTIONS, string>\n    | ChangeEvent<typeof ErrorChangeEventName.INVALID_FRAME_OPTIONS, string>;\n","import {EmbeddingMessageEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {VisualAction} from '@experience/dashboard-experience/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport const SetterMessageEventName = {\n    SET_PARAMETERS: 'SET_PARAMETERS',\n    SET_SELECTED_SHEET_ID: 'SET_SELECTED_SHEET_ID',\n    SET_Q_SEARCH_QUESTION: 'SET_Q_SEARCH_QUESTION',\n    SET_VISUAL_ACTIONS: 'SET_VISUAL_ACTIONS',\n    SET_THEME: 'SET_THEME',\n    ADD_FILTER_GROUPS: 'ADD_FILTER_GROUPS',\n    UPDATE_FILTER_GROUPS: 'UPDATE_FILTER_GROUPS',\n    REMOVE_FILTER_GROUPS: 'REMOVE_FILTER_GROUPS',\n    ADD_VISUAL_ACTIONS: 'ADD_VISUAL_ACTIONS',\n    REMOVE_VISUAL_ACTIONS: 'REMOVE_VISUAL_ACTIONS',\n    SET_THEME_OVERRIDE: 'SET_THEME_OVERRIDE',\n    PRELOAD_THEMES: 'PRELOAD_THEMES',\n    CREATE_SHARED_VIEW: 'CREATE_SHARED_VIEW',\n} as const;\n\nexport type SetterMessageEventName = (typeof SetterMessageEventName)[keyof typeof SetterMessageEventName];\n\nexport type SetterMessageEvents =\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_PARAMETERS, Parameter[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.REMOVE_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.ADD_FILTER_GROUPS, FilterGroup[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.UPDATE_FILTER_GROUPS, FilterGroup[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.REMOVE_FILTER_GROUPS, FilterGroup[] | string[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.ADD_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_THEME, {themeArn?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_Q_SEARCH_QUESTION, {question?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_SELECTED_SHEET_ID, {sheetId?: string}>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.PRELOAD_THEMES, string[]>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.SET_THEME_OVERRIDE, ThemeConfiguration>\n    | EmbeddingMessageEvent<typeof SetterMessageEventName.CREATE_SHARED_VIEW, {viewId?: string}>;\n","import {EmbeddingEvent} from '@common/events/events';\nimport {Parameter} from '../../../types';\nimport {Sheet, Visual, VisualAction} from '@experience/dashboard-experience/types';\nimport type {FilterGroup} from '@aws-sdk/client-quicksight';\n\nexport const GetterMessageEventName = {\n    GET_PARAMETERS: 'GET_PARAMETERS',\n    GET_SHEETS: 'GET_SHEETS',\n    GET_SHEET_VISUALS: 'GET_SHEET_VISUALS',\n    GET_VISUAL_ACTIONS: 'GET_VISUAL_ACTIONS',\n    GET_SELECTED_SHEET_ID: 'GET_SELECTED_SHEET_ID',\n    GET_FILTER_GROUPS_FOR_SHEET: 'GET_FILTER_GROUPS_FOR_SHEET',\n    GET_FILTER_GROUPS_FOR_VISUAL: 'GET_FILTER_GROUPS_FOR_VISUAL',\n} as const;\n\nexport type GetterMessageEventName = (typeof GetterMessageEventName)[keyof typeof GetterMessageEventName];\n\nexport type GetterMessageEvents =\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_PARAMETERS, Parameter[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SHEETS, Sheet[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SHEET_VISUALS, Visual[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_VISUAL_ACTIONS, VisualAction[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_SELECTED_SHEET_ID, string>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_FILTER_GROUPS_FOR_SHEET, FilterGroup[]>\n    | EmbeddingEvent<typeof GetterMessageEventName.GET_FILTER_GROUPS_FOR_VISUAL, FilterGroup[]>;\n","import {InternalExperiences} from '@experience/base-experience/types';\nimport {EmbeddingMessageEvent, ErrorResponse, SuccessResponse, TargetedMessageEvent} from '@common/events/events';\n\nexport const InvokerMessageEventName = {\n    ACKNOWLEDGE: 'ACKNOWLEDGE',\n    INITIATE_PRINT: 'INITIATE_PRINT',\n    NAVIGATE_TO_DASHBOARD: 'NAVIGATE_TO_DASHBOARD',\n    CLOSE_Q_SEARCH: 'CLOSE_Q_SEARCH',\n    UNDO: 'UNDO',\n    REDO: 'REDO',\n    RESET: 'RESET',\n    TOGGLE_BOOKMARKS_PANE: 'TOGGLE_BOOKMARKS_PANE',\n} as const;\n\nexport type InvokerMessageEventName = (typeof InvokerMessageEventName)[keyof typeof InvokerMessageEventName];\n\nexport type InvokerMessageEvents =\n    | TargetedMessageEvent<\n          typeof InvokerMessageEventName.ACKNOWLEDGE,\n          {eventName: string; eventTarget?: InternalExperiences}\n      >\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.INITIATE_PRINT, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.NAVIGATE_TO_DASHBOARD, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.CLOSE_Q_SEARCH, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.UNDO, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.REDO, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.RESET, SuccessResponse | ErrorResponse>\n    | EmbeddingMessageEvent<typeof InvokerMessageEventName.TOGGLE_BOOKMARKS_PANE, SuccessResponse | ErrorResponse>;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Sheet, Visual, VisualAction} from '../../experiences/dashboard-experience';\nimport {EmbeddingIFrameElement} from '../iframe';\nimport {InternalExperiences} from '../../experiences/base-experience';\nimport {Parameter} from '../types';\nimport {\n    InvokerMessageEventName,\n    GetterMessageEventName,\n    SetterMessageEventName,\n    InfoMessageEventName,\n    InfoChangeEventName,\n    ErrorChangeEventName,\n    WarnChangeEventName,\n    ChangeMessageEvents,\n    GetterMessageEvents,\n    SetterMessageEvents,\n    InfoMessageEvents,\n    InvokerMessageEvents,\n} from './messages';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport const ChangeEventName = {\n    ...InfoChangeEventName,\n    ...ErrorChangeEventName,\n    ...WarnChangeEventName,\n} as const;\n\nexport type ChangeEventName = (typeof ChangeEventName)[keyof typeof ChangeEventName];\n\nexport const MessageEventName = {\n    ...InfoMessageEventName,\n    ...SetterMessageEventName,\n    ...GetterMessageEventName,\n    ...InvokerMessageEventName,\n} as const;\n\nexport type MessageEventName = (typeof MessageEventName)[keyof typeof MessageEventName];\n\nexport const ChangeEventLevel = {\n    ERROR: 'ERROR',\n    INFO: 'INFO',\n    WARN: 'WARN',\n} as const;\n\nexport type ChangeEventLevel = (typeof ChangeEventLevel)[keyof typeof ChangeEventLevel];\n\nexport type EventNames = MessageEventName | ChangeEventName;\n\nexport type EventMessageValues =\n    | string\n    | string[]\n    | {height?: string}\n    | Visual[]\n    | number\n    | EmbeddingIFrameElement\n    | InternalExperiences\n    | Record<string, unknown>\n    | Parameter[]\n    | VisualAction[]\n    | FilterGroup[]\n    | Sheet[]\n    | undefined\n    | {success?: boolean}\n    | ThemeConfiguration;\n\nexport type EventData = Record<\n    string,\n    string | number | string[] | InternalExperiences | {frame?: EmbeddingIFrameElement} | unknown\n>;\n\nexport type EmbeddingEvents =\n    | ChangeMessageEvents\n    | GetterMessageEvents\n    | SetterMessageEvents\n    | InfoMessageEvents\n    | InvokerMessageEvents;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    InternalVisualExperience,\n    IVisualExperience,\n    TransformedVisualContentOptions,\n    VisualContentOptions,\n} from '../visual-experience';\nimport {\n    DashboardContentOptions,\n    IDashboardExperience,\n    InternalDashboardExperience,\n    TransformedDashboardContentOptions,\n} from '../dashboard-experience';\nimport {\n    InternalQSearchExperience,\n    IQSearchExperience,\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n} from '../q-search-experience';\nimport {\n    ConsoleContentOptions,\n    IConsoleExperience,\n    InternalConsoleExperience,\n    TransformedConsoleContentOptions,\n} from '../console-experience';\nimport {\n    GenerativeQnAContentOptions,\n    IGenerativeQnAExperience,\n    InternalGenerativeQnAExperience,\n    TransformedGenerativeQnAContentOptions,\n} from '../generative-qna-experience';\nimport {ControlContentOptions, IControlExperience, InternalControlExperience} from '../control-experience';\nimport {IContextExperience, InternalContextExperience} from '../../common/embedding-context';\nimport {EventListener} from '../../common/event-manager';\n\nexport type ContentOptions =\n    | VisualContentOptions\n    | DashboardContentOptions\n    | QSearchContentOptions\n    | ConsoleContentOptions\n    | ControlContentOptions\n    | GenerativeQnAContentOptions;\n\nexport type FrameOptions = {\n    url: string;\n    container: string | HTMLElement;\n    width?: string;\n    height?: string;\n    resizeHeightOnSizeChangedEvent?: boolean;\n    withIframePlaceholder?: boolean | HTMLElement;\n    className?: string;\n    origin_url?: string;\n    onChange?: EventListener;\n};\n\nexport type TransformedContentOptions =\n    | TransformedConsoleContentOptions\n    | TransformedDashboardContentOptions\n    | TransformedQSearchContentOptions\n    | TransformedVisualContentOptions\n    | TransformedGenerativeQnAContentOptions\n    | object;\n\nexport type Experiences =\n    | IConsoleExperience\n    | IContextExperience\n    | IControlExperience\n    | IVisualExperience\n    | IDashboardExperience\n    | IQSearchExperience\n    | IGenerativeQnAExperience;\n\nexport type InternalExperiences =\n    | InternalConsoleExperience\n    | InternalContextExperience\n    | InternalControlExperience\n    | InternalVisualExperience\n    | InternalDashboardExperience\n    | InternalQSearchExperience\n    | InternalGenerativeQnAExperience;\n\nexport interface InternalExperienceInfo<InternalExperience extends InternalExperiences> {\n    experienceIdentifier: string;\n    internalExperience: InternalExperience;\n}\n\nexport const ExperienceType = {\n    CONSOLE: 'CONSOLE',\n    CONTEXT: 'CONTEXT',\n    CONTROL: 'CONTROL',\n    VISUAL: 'VISUAL',\n    DASHBOARD: 'DASHBOARD',\n    QSEARCH: 'QSEARCH',\n    GENERATIVEQNA: 'QSEARCH', // Internal experience type unchanged from QSEARCH\n} as const;\n\nexport type ExperienceType = (typeof ExperienceType)[keyof typeof ExperienceType];\n\nexport interface IBaseExperience {\n    experienceType: ExperienceType;\n    discriminator?: number;\n}\n\nexport interface BaseContentOptions {\n    onMessage?: EventListener;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Parameter, ParametersAsObject, ThemeOptions} from '../../common';\nimport {BaseContentOptions, ExperienceType, IBaseExperience} from '../base-experience';\nimport type {\n    ColumnIdentifier,\n    AggregationFunction,\n    DateDimensionField,\n    VisualCustomActionOperation,\n    VisualCustomAction,\n    ThemeConfiguration,\n} from '@aws-sdk/client-quicksight';\n\nexport interface IDashboardExperience extends IBaseExperience {\n    experienceType: typeof ExperienceType.DASHBOARD;\n    dashboardId: string;\n}\n\nexport interface InternalDashboardExperience extends IDashboardExperience {\n    contextId: string;\n}\n\nexport interface DashboardContentOptions extends BaseContentOptions {\n    parameters?: Parameter[];\n    locale?: string;\n    attributionOptions?: AttributionOptions;\n    toolbarOptions?: ToolbarOptions;\n    sheetOptions?: SheetOptions;\n    themeOptions?: ThemeOptions;\n    viewId?: string;\n}\n\nexport interface TransformedDashboardContentOptions extends BaseContentOptions {\n    parameters?: ParametersAsObject;\n    locale?: string;\n    sheetId?: string | undefined;\n    footerPaddingEnabled?: boolean;\n    undoRedoDisabled?: boolean;\n    printEnabled?: boolean;\n    showBookmarksIcon?: boolean;\n    resetDisabled?: boolean;\n    sheetTabsDisabled?: boolean;\n    resizeOnSheetChange?: boolean;\n    themeArn?: string;\n    themeOverride?: ThemeConfiguration;\n}\n\nexport interface ToolbarOption {\n    show?: true; // absence implies true\n}\n\nexport interface ExportToolbarOption extends ToolbarOption {\n    print?: boolean;\n}\n\nexport interface ToolbarOptions {\n    export?: boolean | ExportToolbarOption;\n    undoRedo?: boolean | ToolbarOption;\n    reset?: boolean | ToolbarOption;\n    bookmarks?: boolean | ToolbarOption;\n}\n\nexport interface AttributionOptions {\n    overlayContent?: boolean;\n}\n\nexport interface SheetOptions {\n    initialSheetId?: string;\n    singleSheet?: boolean;\n    emitSizeChangedEventOnSheetChange?: boolean;\n}\n\nexport type NavigateToDashboardOptions = {\n    parameters?: Parameter[];\n};\n\nexport interface Sheet {\n    Name: string;\n    SheetId: string;\n}\n\nexport interface Visual {\n    Name: string;\n    VisualId: string;\n}\n\nexport type BinDatapointRawValue = {\n    Min: number | null;\n    Max: number | null;\n    IsMaxInclusive: boolean;\n};\n\nexport interface DatapointRawValue {\n    String?: string;\n    Integer?: number;\n    Decimal?: number;\n    Date?: Date;\n    Bin?: BinDatapointRawValue;\n}\n\nexport const SPECIAL_DATAPOINT_VALUE_TYPES = {\n    NULL: null,\n    OTHER_BUCKET: null,\n} as const;\n\nexport const CALCULATED_METRIC_COLUMN_TYPE = {\n    INTEGER: null,\n    STRING: null,\n    DECIMAL: null,\n    DATETIME: null,\n} as const;\n\nexport interface DatapointFormattedValue {\n    Value: string;\n    Special?: keyof typeof SPECIAL_DATAPOINT_VALUE_TYPES;\n}\n\nexport interface MetricColumn {\n    Integer?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['NumericalAggregationFunction'];\n    };\n    Decimal?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['NumericalAggregationFunction'];\n    };\n    String?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['CategoricalAggregationFunction'];\n    };\n    DateTime?: {\n        Column: ColumnIdentifier;\n        AggregationFunction?: AggregationFunction['DateAggregationFunction'];\n    };\n    Calculated?: {\n        Column: ColumnIdentifier;\n        Expression: string;\n        Type: keyof typeof CALCULATED_METRIC_COLUMN_TYPE;\n    };\n    Bin?: {\n        Column: ColumnIdentifier;\n    };\n}\n\nexport interface FieldColumn {\n    Integer?: {\n        Column: ColumnIdentifier;\n    };\n    Decimal?: {\n        Column: ColumnIdentifier;\n    };\n    String?: {\n        Column: ColumnIdentifier;\n    };\n    DateTime?: {\n        Column: ColumnIdentifier;\n        TimeGranularity: DateDimensionField['DateGranularity'];\n    };\n}\n\nexport interface DatapointColumn {\n    Metric?: MetricColumn;\n    Field?: FieldColumn;\n}\n\nexport interface Datapoint {\n    FormattedValues: DatapointFormattedValue[];\n    RawValues: DatapointRawValue[];\n    Columns: DatapointColumn[];\n    SelectedColumnIndex?: number;\n}\n\nexport interface CallbackOperation {\n    EmbeddingMessage: object;\n}\n\nexport type ActionOperation = {\n    CallbackOperation: CallbackOperation;\n} & VisualCustomActionOperation;\n\nexport interface VisualAction extends VisualCustomAction {\n    ActionOperations: ActionOperation[];\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {BaseContentOptions, ExperienceType, IBaseExperience} from '../base-experience';\n\nexport interface IGenerativeQnAExperience extends IBaseExperience {\n    experienceType: typeof ExperienceType.GENERATIVEQNA;\n}\n\nexport interface InternalGenerativeQnAExperience extends IGenerativeQnAExperience {\n    contextId: string;\n}\n\nexport interface GenerativeQnAContentOptions extends BaseContentOptions {\n    showTopicName?: boolean;\n    showPinboard?: boolean;\n    allowTopicSelection?: boolean;\n    allowFullscreen?: boolean;\n    searchPlaceholderText?: string;\n    panelOptions?: GenerativeQnAPanelOptions;\n    themeOptions?: QThemeOptions;\n}\n\nexport interface TransformedGenerativeQnAContentOptions extends BaseContentOptions {\n    qShowTopicName?: boolean;\n    qShowPinboard?: boolean;\n    qAllowTopicSelection?: boolean;\n    qAllowFullscreen?: boolean;\n    qSearchPlaceholderText?: string;\n    qPanelType?: string;\n    qPanelTitle?: string;\n    qShowPanelIcon?: boolean;\n    qPanelFocusedHeight?: string;\n    qPanelExpandedHeight?: string;\n    themeArn?: string;\n}\n\nexport type GenerativeQnAPanelOptions = GenerativeQnAFullPanelOptions | GenerativeQnASearchBarOptions;\n\nexport const GenerativeQnAPanelType = {\n    FULL: 'FULL',\n    SEARCH_BAR: 'SEARCH_BAR',\n} as const;\n\nexport type GenerativeQnAFullPanelOptions = {\n    panelType: typeof GenerativeQnAPanelType.FULL;\n    title?: string;\n    showQIcon?: boolean;\n};\n\nexport type GenerativeQnASearchBarOptions = {\n    panelType: typeof GenerativeQnAPanelType.SEARCH_BAR;\n    focusedHeight?: string;\n    expandedHeight?: string;\n};\n\nexport type QThemeOptions = {\n    themeArn?: string;\n};\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ChangeEventLevel, ChangeEventName, EventData, EventMessageValues, EventNames, MessageEventName} from './types';\nimport {InternalExperiences} from '@experience/base-experience/types';\n\nexport abstract class EmbeddingEvent<\n    EventName extends EventNames = EventNames,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> {\n    public eventName: EventName;\n    public message?: EventMessageValue;\n    public data?: EventData;\n    public eventTarget?: InternalExperiences;\n\n    protected constructor(eventName: EventName, message?: EventMessageValue, data?: EventData) {\n        this.eventName = eventName;\n        this.message = message;\n        this.data = data;\n    }\n}\n\nexport class ChangeEvent<\n    EventName extends ChangeEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingEvent<EventName, EventMessageValue> {\n    public eventLevel: ChangeEventLevel;\n    constructor(eventName: EventName, eventLevel: ChangeEventLevel, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventLevel = eventLevel;\n    }\n}\n\nexport class EmbeddingMessageEvent<\n    EventName extends MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingEvent<EventName, EventMessageValue> {\n    public eventName: EventName;\n\n    constructor(eventName: EventName, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventName = eventName;\n    }\n}\n\nexport class TargetedMessageEvent<\n    EventName extends MessageEventName = MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends EmbeddingMessageEvent<EventName, EventMessageValue> {\n    public eventTarget: InternalExperiences;\n\n    constructor(eventName: EventName, eventTarget: InternalExperiences, message?: EventMessageValue, data?: EventData) {\n        super(eventName, message, data);\n        this.eventTarget = eventTarget;\n    }\n}\n\nexport class PostMessageEvent<\n    EventName extends MessageEventName = MessageEventName,\n    EventMessageValue extends EventMessageValues = EventMessageValues\n> extends TargetedMessageEvent<EventName, EventMessageValue> {\n    public timestamp: number;\n    public version: string;\n    public eventId: string;\n\n    constructor(\n        eventName: EventName,\n        eventTarget: InternalExperiences,\n        eventId: string,\n        timestamp: number,\n        version: string,\n        message?: EventMessageValue,\n        data?: EventData\n    ) {\n        super(eventName, eventTarget, message, data);\n        this.timestamp = timestamp;\n        this.version = version;\n        this.eventId = eventId;\n    }\n}\n\nexport abstract class ResponseMessage<EventMessageValue extends EventMessageValues = EventMessageValues> {\n    public abstract success: boolean;\n    public message?: EventMessageValue;\n}\n\nexport class SuccessResponse implements ResponseMessage {\n    public success = true;\n}\n\nexport class ErrorResponse<EventMessageValue extends EventMessageValues = EventMessageValues>\n    implements ResponseMessage<EventMessageValue>\n{\n    public success = false;\n    public error?: string;\n    public message?: EventMessageValue;\n    public errorCode: string;\n\n    constructor(errorResponse: ErrorResponse) {\n        this.errorCode = errorResponse.errorCode;\n        this.error = errorResponse.error;\n        this.message = errorResponse.message as EventMessageValue;\n    }\n}\n\nexport class DataResponse<EventMessageValue extends EventMessageValues = EventMessageValues>\n    implements ResponseMessage<EventMessageValue>\n{\n    public success = true;\n    public message?: EventMessageValue;\n\n    constructor(message?: EventMessageValue) {\n        this.message = message;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    ContentOptions,\n    Experiences,\n    ExperienceType,\n    FrameOptions,\n    InternalExperiences,\n    InternalExperienceInfo,\n    TransformedContentOptions,\n} from './types';\nimport {BaseExperienceFrame} from './frame/experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {ChangeEventLevel, ChangeEventName, EventMessageValues, MessageEventName} from '@common/events/types';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage, TargetedMessageEvent} from '@common/events/events';\nimport {EventListener} from '@common/event-manager/types';\nimport {LogProvider} from '../../common';\n\nexport abstract class BaseExperience<\n    ExperienceContentOptions extends ContentOptions,\n    InternalExperience extends InternalExperiences,\n    Experience extends Experiences,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    ExperienceFrame extends BaseExperienceFrame<\n        ExperienceContentOptions,\n        TransformedExperienceContentOptions,\n        InternalExperience\n    >\n> {\n    protected abstract experience: Experience;\n    protected abstract internalExperience: InternalExperience;\n    protected abstract experienceId: string;\n    protected abstract experienceFrame: ExperienceFrame;\n    protected readonly frameOptions: FrameOptions;\n    protected readonly contentOptions: ExperienceContentOptions;\n    protected readonly controlOptions: ControlOptions;\n    protected readonly experienceIdentifiers: Set<string>;\n    protected logger?: LogProvider;\n\n    protected constructor(\n        frameOptions: FrameOptions,\n        contentOptions: ExperienceContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        this.frameOptions = frameOptions;\n        this.contentOptions = contentOptions;\n        this.controlOptions = controlOptions;\n        this.experienceIdentifiers = experienceIdentifiers;\n        this.validateFrameOptions();\n    }\n\n    static getExperienceIdentifier = (experience: InternalExperiences): string => {\n        if (experience.experienceType === ExperienceType.DASHBOARD) {\n            const {contextId, experienceType, dashboardId, discriminator} = experience;\n            return [contextId, experienceType, dashboardId, discriminator].filter(Boolean).join('-');\n        }\n\n        if (experience.experienceType === ExperienceType.VISUAL) {\n            const {contextId, experienceType, dashboardId, sheetId, visualId, discriminator} = experience;\n            return [contextId, experienceType, dashboardId, sheetId, visualId, discriminator].filter(Boolean).join('-');\n        }\n\n        if (\n            [\n                ExperienceType.CONSOLE,\n                ExperienceType.CONTROL,\n                ExperienceType.CONTEXT,\n                ExperienceType.QSEARCH,\n                ExperienceType.GENERATIVEQNA,\n            ].includes(experience.experienceType)\n        ) {\n            const {contextId, experienceType, discriminator} = experience;\n            return [contextId, experienceType, discriminator].filter(Boolean).join('-');\n        }\n\n        throw new Error('Invalid experience unable to build experience identifier');\n    };\n\n    public send = async <EventMessageValue extends EventMessageValues>(\n        messageEvent: EmbeddingMessageEvent<MessageEventName>\n    ): Promise<ResponseMessage<EventMessageValue>> => {\n        if (!this.experienceFrame || !this.internalExperience) {\n            throw new Error('Experience has not been initialized');\n        }\n\n        const targetedMessageEvent = new TargetedMessageEvent(\n            messageEvent.eventName,\n            this.internalExperience,\n            messageEvent.message,\n            messageEvent.data\n        );\n\n        return this.experienceFrame.send(targetedMessageEvent);\n    };\n\n    public addEventListener = (eventName: MessageEventName, listener: EventListener) => {\n        return this.experienceFrame.addInternalEventListener(eventName, listener);\n    };\n\n    public setLogProvider = (logProvider: LogProvider) => {\n        this.logger = logProvider;\n        return this;\n    };\n\n    protected getInternalExperienceInfo = <\n        EmbeddingInternalExperience extends InternalExperiences,\n        EmbeddingExperience extends Experiences\n    >(\n        experience: EmbeddingExperience\n    ): InternalExperienceInfo<EmbeddingInternalExperience> => {\n        let discriminator = -1;\n        let internalExperience: InternalExperiences;\n        let experienceIdentifier: string;\n        do {\n            discriminator++;\n            internalExperience = {\n                ...experience,\n                contextId: this.controlOptions.contextId,\n                discriminator,\n            };\n            experienceIdentifier = BaseExperience.getExperienceIdentifier(internalExperience);\n        } while (this.experienceIdentifiers.has(experienceIdentifier));\n\n        this.experienceIdentifiers.add(experienceIdentifier);\n        return {\n            experienceIdentifier,\n            internalExperience,\n        } as InternalExperienceInfo<EmbeddingInternalExperience>;\n    };\n\n    protected transformContentOptions = <TCO extends TransformedContentOptions>(\n        filteredOptions: TCO,\n        unrecognizedContentOptions: object\n    ): TCO => {\n        this.warnUnrecognizedContentOptions(Object.keys(unrecognizedContentOptions));\n        return filteredOptions;\n    };\n\n    protected warnUnrecognizedContentOptions = (unrecognizedProperties: string[]) => {\n        if (unrecognizedProperties.length > 0) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.UNRECOGNIZED_CONTENT_OPTIONS,\n                    ChangeEventLevel.WARN,\n                    'Experience content options contain unrecognized properties',\n                    {\n                        unrecognizedContentOptions: unrecognizedProperties,\n                    }\n                ),\n                {frame: null}\n            );\n            this.logger?.warn('Experience content options contain unrecognized properties');\n        }\n    };\n\n    protected abstract extractExperienceFromUrl: (url: string) => Experience;\n\n    private validateFrameOptions = () => {\n        if (!this.frameOptions.url) {\n            const message = 'Url is required for the experience';\n            this.frameOptions.onChange?.(new ChangeEvent(ChangeEventName.NO_URL, ChangeEventLevel.ERROR, message), {\n                frame: null,\n            });\n            throw new Error(message);\n        }\n    };\n}\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {CreatePostRequestOptions, PostRequest} from '../types';\nimport {EmbeddingIFrameElement, IframeOptions} from './types';\n\nexport class Iframe {\n    static IFRAME_CLASS_NAME = 'quicksight-embedding-iframe';\n    private readonly iframeName: string;\n    private readonly width: string;\n    private readonly height: string;\n    private readonly loading: IframeOptions['loading'];\n    private readonly container: HTMLElement;\n    private readonly payload: IframeOptions['payload'];\n    private readonly src: string;\n    private readonly onLoad: IframeOptions['onLoad'];\n    private readonly iframe: EmbeddingIFrameElement;\n    private iframePlaceholder?: HTMLElement;\n    private classNames = [Iframe.IFRAME_CLASS_NAME];\n    private postRequest?: PostRequest;\n\n    constructor(options: IframeOptions) {\n        const {\n            id,\n            src,\n            width = '100%',\n            height = '100%',\n            container,\n            onLoad,\n            loading,\n            withIframePlaceholder,\n            payload,\n            className,\n        } = options;\n\n        this.width = width;\n        this.height = height;\n        this.onLoad = onLoad;\n        this.iframeName = id;\n\n        this.loading = loading;\n\n        if (className) {\n            this.classNames.push(className);\n        }\n\n        this.container = container;\n        this.payload = payload;\n        this.src = src;\n\n        if (withIframePlaceholder) {\n            this.createIframePlaceholder(withIframePlaceholder);\n        }\n\n        this.iframe = this.createIframe();\n        this.iframe.addEventListener('load', this.onLoadLocal);\n    }\n\n    public getIframe = () => this.iframe;\n\n    private createIframePlaceholder = (withIframePlaceholder: IframeOptions['withIframePlaceholder']) => {\n        this.iframePlaceholder = document.createElement('div');\n        this.iframePlaceholder.id = `${this.iframeName}-placeholder`;\n        this.iframePlaceholder.style.width = this.width;\n        this.iframePlaceholder.style.backgroundColor = 'rgba(0,0,0,.01)';\n        this.iframePlaceholder.style.display = 'flex';\n        this.iframePlaceholder.style.justifyContent = 'center';\n        this.iframePlaceholder.style.alignItems = 'center';\n        this.iframePlaceholder.className = `${Iframe.IFRAME_CLASS_NAME}-placeholder`;\n\n        if (this.height.endsWith('px')) {\n            this.iframePlaceholder.style.height = this.height;\n        }\n\n        if (withIframePlaceholder && typeof withIframePlaceholder !== 'boolean') {\n            this.iframePlaceholder.appendChild(withIframePlaceholder);\n        } else {\n            const loaderSVG = this.createLoaderSVG();\n            this.iframePlaceholder.appendChild(loaderSVG);\n        }\n\n        this.container.appendChild(this.iframePlaceholder);\n    };\n\n    private createIframe = () => {\n        const iframe = document.createElement('iframe') as EmbeddingIFrameElement;\n        iframe.className = this.classNames.join(' ').trim();\n        iframe.id = this.iframeName;\n        iframe.name = this.iframeName;\n        iframe.width = this.width;\n        iframe.height = this.height;\n\n        if (this.loading) {\n            iframe.loading = this.loading;\n        }\n\n        iframe.style.border = '0px';\n        iframe.style.padding = '0px';\n\n        if (this.iframePlaceholder) {\n            iframe.style.opacity = '0';\n            iframe.style.position = 'absolute';\n        }\n\n        if (this.width === '0px' && this.height === '0px') {\n            iframe.style.position = 'absolute';\n        }\n\n        this.container.appendChild(iframe);\n\n        if (this.payload) {\n            this.postRequest = this.createPostRequest({\n                src: this.src,\n                target: iframe.name,\n                container: this.container,\n                payload: this.payload,\n            });\n        } else {\n            iframe.src = this.src;\n        }\n\n        return iframe;\n    };\n\n    private onLoadLocal = (event: Event) => {\n        if (this.iframePlaceholder) {\n            this.iframePlaceholder.remove();\n            this.iframe.style.position = '';\n            this.iframe.style.opacity = '1';\n            this.iframe.style.transition = 'opacity .5s ease-in-out';\n        }\n\n        this.onLoad?.(event);\n        this.postRequest?.remove();\n    };\n\n    private createPostRequest = (postRequestOptions: CreatePostRequestOptions): PostRequest => {\n        const {src, container, target, payload} = postRequestOptions;\n        if (!src) {\n            throw new Error('No source has been provided.');\n        }\n\n        const form = document.createElement('form');\n        form.style.visibility = 'hidden';\n        form.method = 'POST';\n        form.action = src;\n        form.target = target;\n        form.name = `${target}-form`;\n\n        Object.keys(payload).forEach(payloadItem => {\n            const input = document.createElement('input');\n            input.type = 'hidden';\n            input.name = payloadItem;\n            input.value = payload[payloadItem];\n            form.appendChild(input);\n        });\n\n        container.appendChild(form);\n\n        form?.submit();\n        return {\n            remove: () => {\n                form.remove();\n            },\n        };\n    };\n\n    private createSvgElement = (\n        tagName: string,\n        attributes: Record<string, string>,\n        styles: Record<string, string> = {},\n        children: Element[] = []\n    ) => {\n        const element = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n        Object.entries(attributes).forEach(([name, value]) => element.setAttribute(name, value));\n        Object.entries(styles).forEach(([name, value]) => element.style.setProperty(name, value));\n        children.forEach(child => element.appendChild(child));\n        return element;\n    };\n\n    private createLoaderSVG = () => {\n        const circles: Element[] = [1, 2, 3].map(i => {\n            const animate = this.createSvgElement('animate', {\n                attributeName: 'opacity',\n                dur: '1s',\n                values: '0;1;0',\n                repeatCount: 'indefinite',\n                begin: `${i / 10.0}`,\n            });\n            return this.createSvgElement(\n                'circle',\n                {\n                    fill: '#ccc',\n                    stroke: 'none',\n                    cx: `${i * 20 - 14}`,\n                    cy: '50',\n                    r: '6',\n                },\n                undefined,\n                [animate]\n            );\n        });\n\n        return this.createSvgElement(\n            'svg',\n            {\n                version: '1.1',\n                x: '0px',\n                y: '0px',\n                viewBox: '0 0 100 100',\n                'enable-background': 'new 0 0 0 0',\n            },\n            {\n                width: '100px',\n                height: '100px',\n            },\n            circles\n        );\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {v4} from 'uuid';\nimport {encode} from 'punycode';\nimport {ContentOptions, FrameOptions, InternalExperiences, TransformedContentOptions} from '../types';\nimport {ParametersAsObject} from '../../../common';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\nimport {EmbeddingIFrameElement} from '@common/iframe/types';\nimport {EventListener} from '@common/event-manager/types';\nimport {\n    ChangeEventLevel,\n    ChangeEventName,\n    EmbeddingEvents,\n    EventMessageValues,\n    MessageEventName,\n} from '@common/events/types';\nimport {\n    ChangeEvent,\n    DataResponse,\n    ErrorResponse,\n    PostMessageEvent,\n    SuccessResponse,\n    TargetedMessageEvent,\n} from '@common/events/events';\nimport {Iframe} from '@common/iframe/iframe';\n\nexport const SDK_VERSION = '2.8.0';\n\nexport abstract class BaseExperienceFrame<\n    ExperienceContentOptions extends ContentOptions,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    InternalExperience extends InternalExperiences\n> {\n    protected readonly frameOptions: FrameOptions;\n    protected readonly contentOptions: ExperienceContentOptions;\n    protected readonly controlOptions: ControlOptions;\n    protected readonly transformedContentOptions: TransformedExperienceContentOptions;\n    protected readonly experienceId: string;\n    protected readonly internalExperience: InternalExperience;\n    protected readonly onChange: EventListener;\n    protected url: string;\n    protected origin_url: string\n    private readonly MESSAGE_RESPONSE_TIMEOUT = 5000;\n\n    public iframe: EmbeddingIFrameElement | null = null;\n    public container: HTMLElement;\n    public onMessage: EventListener;\n    public timeoutInstance?: NodeJS.Timeout;\n\n    protected constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: ExperienceContentOptions,\n        transformedContentOptions: TransformedExperienceContentOptions,\n        internalExperience: InternalExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        this.frameOptions = frameOptions;\n        this.contentOptions = contentOptions;\n        this.onChange = this.decorateOnChange(frameOptions.onChange);\n        this.onMessage = this.decorateOnMessage(contentOptions.onMessage, interceptMessage);\n        this.container = this.getContainer(frameOptions.container);\n        this.internalExperience = internalExperience;\n        this.controlOptions = controlOptions;\n        this.transformedContentOptions = transformedContentOptions;\n        this.experienceId = experienceIdentifier;\n        this.url = this.validateBaseUrl(frameOptions.url);\n\n    //this.logger.error('logging frame options origin url')\n    //this.logger.error(frameOptions.origin_url)\n\tif (frameOptions.origin_url != undefined) {\n            //this.logger.error('using origin url')\n    \t    this.origin_url = frameOptions.origin_url\n        } else {\n\t    //this.logger.error('no origin url')\n            this.origin_url = this.url\n        }\n\n        this.controlOptions.eventManager.addEventListener(this.experienceId, this.onMessage, true);\n        this.initializeMutationObserver();\n    }\n\n    public send = async <EventMessageValue extends EventMessageValues = EventMessageValues>(\n        messageEvent: TargetedMessageEvent\n    ): Promise<SuccessResponse | ErrorResponse<EventMessageValue> | DataResponse<EventMessageValue>> => {\n        if (this.controlOptions.sendToControlFrame) {\n            return this.controlOptions.sendToControlFrame(messageEvent);\n        }\n\n        if (!this.iframe) {\n            throw new Error(`Cannot send ${messageEvent.eventName}: No experience frame found`);\n        }\n\n        const eventId = v4();\n        const message = new PostMessageEvent(\n            messageEvent.eventName,\n            messageEvent.eventTarget,\n            eventId,\n            Date.now(),\n            SDK_VERSION,\n            messageEvent.message,\n            messageEvent.data\n        );\n\n\t//this.iframe?.contentWindow?.postMessage(message, 'http://localhost:3000')\n\t//this.iframe?.contentWindow?.postMessage(message, 'http://localhost:3000')\n        //this.iframe?.contentWindow?.postMessage(message, this.origin_url);\n\n        if (messageEvent.eventName === MessageEventName.ACKNOWLEDGE) {\n            return Promise.resolve(new SuccessResponse());\n        }\n\n        return new Promise((resolve, reject) => {\n            const eventHandler = (\n                event: MessageEvent<\n                    PostMessageEvent<\n                        MessageEventName,\n                        | {success: false; errorCode: string; errors?: string}\n                        | {\n                              success: true;\n                          }\n                    >\n                >\n            ) => {\n                const responseMessageEvent = event.data;\n                if (responseMessageEvent?.eventId === eventId) {\n                    window.removeEventListener('message', eventHandler);\n\n                    if (responseMessageEvent.message?.success === true) {\n                        resolve(new SuccessResponse());\n                    } else if (responseMessageEvent.message?.success === false) {\n                        resolve(new ErrorResponse(responseMessageEvent.message));\n                    } else {\n                        resolve(new DataResponse(responseMessageEvent.message));\n                    }\n                }\n            };\n\n            window.addEventListener('message', eventHandler);\n            setTimeout(() => {\n                window.removeEventListener('message', eventHandler);\n                reject(`${messageEvent.eventName} timed out`);\n            }, this.MESSAGE_RESPONSE_TIMEOUT);\n        });\n    };\n\n    public buildParameterString = (parameters?: ParametersAsObject) => {\n        if (!parameters || typeof parameters !== 'object') {\n            return '';\n        }\n\n        return Object.entries(parameters)\n            .map(([key, value]) => {\n                const values = Array.isArray(value) ? value : [value];\n\n                const encodedName = encodeURIComponent(key);\n\n                return values\n                    .map(encodeURIComponent)\n                    .map(encodedValue => `p.${encodedName}=${encodedValue}`)\n                    .join('&');\n            })\n            .join('&');\n    };\n\n    public buildQueryString = (\n        options: Omit<TransformedExperienceContentOptions, 'onMessage' | 'parameters'> &\n            Pick<InternalExperience, 'contextId' | 'discriminator'>\n    ) => {\n        const filteredOptions = Object.entries(options).reduce(\n            (memoizedOptions, [key, value]) => {\n                if (value !== undefined && value !== null) {\n                    return {\n                        ...memoizedOptions,\n                        [key]: `${value}`,\n                    };\n                }\n                return memoizedOptions;\n            },\n            {\n                punyCodeEmbedOrigin: encode(`${window.location.origin}/`),\n                sdkVersion: SDK_VERSION,\n            }\n        );\n\n        return new URLSearchParams(filteredOptions).toString();\n    };\n\n    public createExperienceIframe = () => {\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_STARTED, ChangeEventLevel.INFO, 'Creating the frame', {\n                experience: this.internalExperience,\n            })\n        );\n\n        try {\n            this.setTimeoutInstance();\n            this.iframe = new Iframe({\n                id: this.experienceId,\n                src: this.url,\n                width: this.frameOptions.width,\n                height: this.frameOptions.height,\n                container: this.container,\n                onLoad: this.onLoadHandler,\n                withIframePlaceholder: this.frameOptions.withIframePlaceholder,\n                className: this.frameOptions.className,\n            }).getIframe();\n        } catch (err) {\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.FRAME_NOT_CREATED,\n                    ChangeEventLevel.ERROR,\n                    'Failed to create the frame',\n                    {\n                        experience: this.internalExperience,\n                    }\n                )\n            );\n\n            throw err;\n        }\n\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_MOUNTED, ChangeEventLevel.INFO, 'The frame mounted', {\n                experience: this.internalExperience,\n                frame: this.iframe,\n            })\n        );\n    };\n\n    public addInternalEventListener = (eventName: MessageEventName, listener: EventListener) => {\n        const handler = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n            if (messageEvent.eventName === eventName) {\n                listener(messageEvent, metadata);\n            }\n        };\n\n        this.controlOptions.eventManager.addEventListener(this.experienceId, handler, true);\n\n        return {\n            remove: () => this.controlOptions.eventManager.removeEventListener(this.experienceId, handler),\n        };\n    };\n\n    private validateBaseUrl = (url: string) => {\n        if (!url) {\n            this.onChange(\n                new ChangeEvent(ChangeEventName.NO_URL, ChangeEventLevel.ERROR, 'Url is required for the experience', {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error('Url is required for the experience');\n        }\n\n        return url;\n    };\n\n    private setTimeoutInstance = () => {\n        this.timeoutInstance = setTimeout(() => {\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.FRAME_NOT_CREATED,\n                    ChangeEventLevel.ERROR,\n                    'Creating the frame timed out',\n                    {\n                        experience: this.internalExperience,\n                    }\n                )\n            );\n            throw new Error('Creating the frame timed out');\n        }, this.controlOptions.timeout);\n    };\n\n    private onLoadHandler = async () => {\n        if (this.timeoutInstance) {\n            clearTimeout(this.timeoutInstance);\n        }\n\n        this.onChange(\n            new ChangeEvent(ChangeEventName.FRAME_LOADED, ChangeEventLevel.INFO, 'The experience iframe loaded', {\n                experience: this.internalExperience,\n            })\n        );\n    };\n\n    private getContainer = (container: HTMLElement | string) => {\n        if (!container) {\n            const message = 'Container is required for the experience';\n            this.onChange(\n                new ChangeEvent(ChangeEventName.NO_CONTAINER, ChangeEventLevel.ERROR, message, {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error(message);\n        }\n\n        let _container: HTMLElement | null = null;\n\n        if (typeof container === 'string') {\n            try {\n                _container = document.querySelector(container);\n            } catch (error) {\n                if (error instanceof Error) {\n                    this.onChange(\n                        new ChangeEvent(ChangeEventName.INVALID_CONTAINER, ChangeEventLevel.ERROR, error.message, {\n                            experience: this.internalExperience,\n                        })\n                    );\n                }\n\n                throw error;\n            }\n        } else if (typeof container === 'object' && container.nodeName) {\n            _container = container;\n        }\n\n        if (!_container) {\n            const message = `Invalid container '${container}' for the experience`;\n            this.onChange(\n                new ChangeEvent(ChangeEventName.INVALID_CONTAINER, ChangeEventLevel.ERROR, message, {\n                    experience: this.internalExperience,\n                })\n            );\n\n            throw new Error(message);\n        }\n\n        return _container;\n    };\n\n    private decorateOnChange = (onChange?: EventListener) => {\n        return (changeEvent: EmbeddingEvents) => {\n            if (onChange) {\n                const metadata: ExperienceFrameMetadata = {\n                    frame: this.iframe,\n                };\n                onChange(changeEvent, metadata);\n            }\n        };\n    };\n\n    private decorateOnMessage = (onMessage?: EventListener, interceptOnMessage?: EventListener) => {\n        return (messageEvent: EmbeddingEvents) => {\n            if (interceptOnMessage && this.iframe) {\n                interceptOnMessage(messageEvent, {\n                    frame: this.iframe,\n                });\n            }\n\n            if (onMessage) {\n                onMessage(messageEvent, {\n                    frame: this.iframe,\n                });\n            }\n        };\n    };\n\n    // Add mutation observer to perform cleaning up tasks after container or frame is removed from the dom\n    private initializeMutationObserver = () => {\n        const mutationObserver = new MutationObserver(mutations => {\n            const isRemoved = mutations.some(record =>\n                Array.from(record.removedNodes).some(node => node === this.iframe || node === this.container)\n            );\n\n            if (isRemoved) {\n                this.controlOptions.eventManager.cleanUpCallbacksForExperience(this.experienceId);\n                mutationObserver.disconnect();\n                this.iframe = null;\n\n                this.onChange(\n                    new ChangeEvent(\n                        ChangeEventName.FRAME_REMOVED,\n                        ChangeEventLevel.INFO,\n                        'Frame removed from the DOM',\n                        {\n                            experience: this.internalExperience,\n                        }\n                    )\n                );\n            }\n        });\n\n        mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    };\n\n    protected abstract buildExperienceUrl: (baseUrl: string) => string;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {InternalVisualExperience, TransformedVisualContentOptions, VisualContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class VisualExperienceFrame extends BaseExperienceFrame<\n    VisualContentOptions,\n    TransformedVisualContentOptions,\n    InternalVisualExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: VisualContentOptions,\n        transformedContentOptions: TransformedVisualContentOptions,\n        internalExperience: InternalVisualExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {parameters, ...otherOptions} = this.transformedContentOptions;\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...otherOptions,\n            contextId,\n            discriminator,\n        });\n\n        const parameterString = this.buildParameterString(parameters);\n        const fullQueryString = [queryString, parameterString].join('#');\n\n        return [baseUrl, fullQueryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {FrameOptions, TransformedContentOptions, ExperienceType} from '../base-experience';\nimport {\n    InternalVisualExperience,\n    TransformedVisualContentOptions,\n    IVisualExperience,\n    VisualContentOptions,\n} from './types';\nimport {Parameter, ParametersAsObject} from '../../common';\nimport {VisualExperienceFrame} from './frame/visual-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {VisualAction} from '../dashboard-experience';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport class VisualExperience extends BaseExperience<\n    VisualContentOptions,\n    InternalVisualExperience,\n    IVisualExperience,\n    TransformedContentOptions,\n    VisualExperienceFrame\n> {\n    protected experience: IVisualExperience;\n    protected internalExperience: InternalVisualExperience;\n    protected experienceFrame: VisualExperienceFrame;\n    protected experienceId: string;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: VisualContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalVisualExperience,\n            IVisualExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new VisualExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformVisualContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    setParameters = async (parameters: Parameter[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_PARAMETERS, parameters));\n    };\n\n    reset = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.RESET));\n    };\n\n    addFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.ADD_FILTER_GROUPS, filterGroups));\n    };\n\n    updateFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UPDATE_FILTER_GROUPS, filterGroups));\n    };\n\n    removeFilterGroups = async (filterGroups: FilterGroup[] | string[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REMOVE_FILTER_GROUPS, filterGroups));\n    };\n\n    getFilterGroups = async (): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_VISUAL)\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the visual');\n        }\n\n        return response.message;\n    };\n\n    getActions = async (): Promise<VisualAction[]> => {\n        const response = await this.send<VisualAction[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_VISUAL_ACTIONS)\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the actions');\n        }\n\n        return response.message;\n    };\n\n    addActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.ADD_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    setActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    removeActions = async (actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.REMOVE_VISUAL_ACTIONS, {\n                Actions: actions,\n            })\n        );\n    };\n\n    setTheme = async (themeArn: string): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_THEME, {ThemeArn: themeArn}));\n    };\n\n    setThemeOverride = async (themeOverride: ThemeConfiguration): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME_OVERRIDE, {\n                ThemeOverride: themeOverride,\n            })\n        );\n    };\n\n    setPreloadThemes = async (preloadThemes: string[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.PRELOAD_THEMES, {\n                PreloadThemes: preloadThemes,\n            })\n        );\n    };\n\n    protected extractExperienceFromUrl = (url: string): IVisualExperience => {\n        const matches: Array<string> =\n            /^https:\\/\\/[^/]+\\/embed\\/[^/]+\\/dashboards\\/([\\w-]+)\\/sheets\\/([\\w-]+)\\/visuals\\/([\\w-]+)(\\?|$)/i.exec(\n                url\n            ) || [];\n\n        if (matches.length < 5) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.INVALID_URL, ChangeEventLevel.ERROR, 'Invalid visual experience url', {\n                    url,\n                }),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid visual experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.VISUAL,\n            dashboardId: matches[1],\n            sheetId: matches[2],\n            visualId: matches[3],\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        // Intercepting onMessage\n        // if the resizeHeightOnSizeChangedEvent is true, upon receiving SIZE_CHANGED message, update the height of the iframe\n        if (messageEvent.eventName === 'SIZE_CHANGED' && this.frameOptions.resizeHeightOnSizeChangedEvent) {\n            metadata?.frame?.setAttribute?.('height', `${messageEvent.message?.height}px`);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.themeOverride) {\n            this.setThemeOverride(this.contentOptions.themeOptions.themeOverride);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.preloadThemes) {\n            this.setPreloadThemes(this.contentOptions.themeOptions.preloadThemes);\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformVisualContentOptions = (contentOptions: VisualContentOptions) => {\n        const {\n            fitToIframeWidth,\n            locale,\n            parameters,\n            themeOptions,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedVisualContentOptions>(\n            {\n                fitToIframeWidth: fitToIframeWidth ?? true,\n                locale,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (Array.isArray(parameters)) {\n            transformedContentOptions.parameters = parameters.reduce(\n                (parametersAsObject: ParametersAsObject, parameter: Parameter) => {\n                    return {\n                        ...parametersAsObject,\n                        [parameter.Name]: parameter.Values,\n                    };\n                },\n                {}\n            );\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ConsoleContentOptions, InternalConsoleExperience, TransformedConsoleContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class ConsoleExperienceFrame extends BaseExperienceFrame<\n    ConsoleContentOptions,\n    TransformedConsoleContentOptions,\n    InternalConsoleExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: ConsoleContentOptions,\n        transformedContentOptions: TransformedConsoleContentOptions,\n        internalExperience: InternalConsoleExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ConsoleExperienceFrame} from './frame/console-experience-frame';\nimport {\n    ConsoleContentOptions,\n    InternalConsoleExperience,\n    IConsoleExperience,\n    TransformedConsoleContentOptions,\n} from './types';\nimport {ControlOptions} from '../control-experience';\nimport {ExperienceType, FrameOptions} from '@experience/base-experience/types';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from 'src/common';\n\nexport class ConsoleExperience extends BaseExperience<\n    ConsoleContentOptions,\n    InternalConsoleExperience,\n    IConsoleExperience,\n    TransformedConsoleContentOptions,\n    ConsoleExperienceFrame\n> {\n    protected experience;\n    protected internalExperience;\n    protected experienceId;\n    protected experienceFrame;\n    protected currentPage: string | undefined;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: ConsoleContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalConsoleExperience,\n            IConsoleExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        const {\n            locale,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedConsoleContentOptions>(\n            {locale},\n            unrecognizedContentOptions\n        );\n\n        this.experienceFrame = new ConsoleExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n        this.currentPage = 'START';\n    }\n\n    createSharedView = async (): Promise<ResponseMessage> => {\n        if (\n            this.currentPage !== 'DASHBOARD' &&\n            this.currentPage !== 'DASHBOARD_SHEET' &&\n            this.currentPage !== 'DASHBOARD_VIEW'\n        ) {\n            throw new Error('Cannot call createSharedView from this page');\n        }\n        const response = await this.send(new EmbeddingMessageEvent(MessageEventName.CREATE_SHARED_VIEW));\n        if (!response?.message) {\n            throw new Error('Failed to create shared view');\n        }\n\n        return response;\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        if (messageEvent.eventName === MessageEventName.PAGE_NAVIGATION) {\n            this.currentPage = messageEvent?.message?.pageType;\n        }\n    };\n\n    protected extractExperienceFromUrl = (url: string): IConsoleExperience => {\n        const matches: Array<string> =\n            /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/(start(\\/(favorites|dashboards|analyses))?|dashboards\\/[\\w-]+(\\/views\\/[\\w-]+)?|analyses\\/[\\w-]+)(\\?|$)/i.exec(\n                url\n            ) || [];\n\n        if (matches.length < 5) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.INVALID_URL, ChangeEventLevel.ERROR, 'Invalid console experience url', {\n                    url,\n                }),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid console experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.CONSOLE,\n        };\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {DashboardContentOptions, InternalDashboardExperience, TransformedDashboardContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class DashboardExperienceFrame extends BaseExperienceFrame<\n    DashboardContentOptions,\n    TransformedDashboardContentOptions,\n    InternalDashboardExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: DashboardContentOptions,\n        transformedContentOptions: TransformedDashboardContentOptions,\n        internalExperience: InternalDashboardExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {parameters, ...otherOptions} = this.transformedContentOptions;\n        const {contextId, discriminator} = this.internalExperience;\n        const {viewId} = this.contentOptions;\n\n        // ViewId was passed as content option, need to override url to include custom view\n        if (viewId) {\n            const url = new URL(baseUrl);\n            url.pathname = url.pathname.concat('/views/' + viewId);\n            baseUrl = url.href;\n        }\n\n        const queryString = this.buildQueryString({\n            ...otherOptions,\n            contextId,\n            discriminator,\n        });\n\n        const parameterString = this.buildParameterString(parameters);\n        const fullQueryString = [queryString, parameterString].join('#');\n\n        return [baseUrl, fullQueryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Parameter, ParametersAsObject} from '../../common';\nimport {DashboardExperienceFrame} from './frame/dashboard-experience-frame';\nimport {\n    DashboardContentOptions,\n    ExportToolbarOption,\n    IDashboardExperience,\n    InternalDashboardExperience,\n    NavigateToDashboardOptions,\n    Sheet,\n    TransformedDashboardContentOptions,\n    Visual,\n    VisualAction,\n} from './types';\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {ControlOptions} from '../control-experience';\n\nimport {ExperienceFrameMetadata} from '../../common/embedding-context';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {ChangeEvent, EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport type {FilterGroup, ThemeConfiguration} from '@aws-sdk/client-quicksight';\n\nexport class DashboardExperience extends BaseExperience<\n    DashboardContentOptions,\n    InternalDashboardExperience,\n    IDashboardExperience,\n    TransformedDashboardContentOptions,\n    DashboardExperienceFrame\n> {\n    protected readonly experience;\n    protected readonly internalExperience;\n    protected readonly experienceFrame;\n    protected readonly experienceId: string;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: DashboardContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalDashboardExperience,\n            IDashboardExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new DashboardExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformDashboardContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    initiatePrint = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.INITIATE_PRINT));\n    };\n\n    undo = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UNDO));\n    };\n\n    redo = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REDO));\n    };\n\n    toggleBookmarksPane = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.TOGGLE_BOOKMARKS_PANE));\n    };\n\n    getParameters = async (): Promise<Parameter[]> => {\n        const response = await this.send<Parameter[]>(new EmbeddingMessageEvent(MessageEventName.GET_PARAMETERS));\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the parameters');\n        }\n\n        return response.message;\n    };\n\n    getSheets = async (): Promise<Sheet[]> => {\n        const response = await this.send<Sheet[]>(new EmbeddingMessageEvent(MessageEventName.GET_SHEETS));\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the sheets');\n        }\n\n        return response.message;\n    };\n\n    addFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.ADD_FILTER_GROUPS, filterGroups));\n    };\n\n    updateFilterGroups = async (filterGroups: FilterGroup[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.UPDATE_FILTER_GROUPS, filterGroups));\n    };\n\n    removeFilterGroups = async (filterGroups: FilterGroup[] | string[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.REMOVE_FILTER_GROUPS, filterGroups));\n    };\n\n    getFilterGroupsForSheet = async (sheetId: string): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_SHEET, {\n                SheetId: sheetId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the sheet');\n        }\n\n        return response.message;\n    };\n\n    getFilterGroupsForVisual = async (sheetId: string, visualId: string): Promise<FilterGroup[]> => {\n        const response = await this.send<FilterGroup[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_FILTER_GROUPS_FOR_VISUAL, {\n                SheetId: sheetId,\n                VisualId: visualId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve filter groups for the visual');\n        }\n\n        return response.message;\n    };\n\n    getVisualActions = async (sheetId: string, visualId: string): Promise<VisualAction[]> => {\n        const response = await this.send<VisualAction[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the visual actions');\n        }\n\n        return response.message;\n    };\n\n    addVisualActions = async (sheetId: string, visualId: string, actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.ADD_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    setVisualActions = async (sheetId: string, visualId: string, actions: VisualAction[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    getSelectedSheetId = async (): Promise<string> => {\n        const response = await this.send<string>(new EmbeddingMessageEvent(MessageEventName.GET_SELECTED_SHEET_ID));\n\n        if (!response?.message) {\n            throw new Error('Failed to retrieve the selected sheet id');\n        }\n\n        return response.message;\n    };\n\n    setSelectedSheetId = async (sheetId: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_SELECTED_SHEET_ID, {\n                SheetId: sheetId,\n            })\n        );\n    };\n\n    setTheme = async (themeArn: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME, {\n                ThemeArn: themeArn,\n            })\n        );\n    };\n\n    navigateToDashboard = async (\n        dashboardId: string,\n        navigateToDashboardOptions?: NavigateToDashboardOptions\n    ): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.NAVIGATE_TO_DASHBOARD, {\n                DashboardId: dashboardId,\n                Parameters: navigateToDashboardOptions?.parameters,\n            })\n        );\n    };\n\n    removeVisualActions = async (\n        sheetId: string,\n        visualId: string,\n        actions: VisualAction[]\n    ): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.REMOVE_VISUAL_ACTIONS, {\n                SheetId: sheetId,\n                VisualId: visualId,\n                Actions: actions,\n            })\n        );\n    };\n\n    getSheetVisuals = async (sheetId: string): Promise<Visual[]> => {\n        const response = await this.send<Visual[]>(\n            new EmbeddingMessageEvent(MessageEventName.GET_SHEET_VISUALS, {\n                SheetId: sheetId,\n            })\n        );\n\n        if (!Array.isArray(response?.message)) {\n            throw new Error('Failed to retrieve the sheet visuals');\n        }\n\n        return response.message;\n    };\n\n    setParameters = async (parameters: Parameter[]): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.SET_PARAMETERS, parameters));\n    };\n\n    reset = async (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.RESET));\n    };\n\n    setThemeOverride = async (themeOverride: ThemeConfiguration): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_THEME_OVERRIDE, {\n                ThemeOverride: themeOverride,\n            })\n        );\n    };\n\n    setPreloadThemes = async (preloadThemes: string[]): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.PRELOAD_THEMES, {\n                PreloadThemes: preloadThemes,\n            })\n        );\n    };\n\n    createSharedView = async (): Promise<ResponseMessage> => {\n        const response = await this.send(new EmbeddingMessageEvent(MessageEventName.CREATE_SHARED_VIEW));\n        if (!response?.message) {\n            throw new Error('Failed to create shared view');\n        }\n\n        return response;\n    };\n\n    protected extractExperienceFromUrl = (url: string): IDashboardExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embed\\/[^/]+\\/dashboards\\/([\\w-]+)(\\?|$)/i.exec(url) || [];\n        if (matches.length < 3) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid dashboard experience url',\n                    {\n                        url,\n                    }\n                ),\n                {frame: null}\n            );\n\n            throw new Error('Invalid dashboard experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.DASHBOARD,\n            dashboardId: matches[1],\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        // Intercepting onMessage\n        // if the resizeHeightOnSizeChangedEvent is true, upon receiving SIZE_CHANGED message, update the height of the iframe\n        if (messageEvent.eventName === 'SIZE_CHANGED' && this.frameOptions.resizeHeightOnSizeChangedEvent) {\n            metadata?.frame?.setAttribute?.('height', `${messageEvent?.message?.height}px`);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.themeOverride) {\n            this.setThemeOverride(this.contentOptions.themeOptions.themeOverride);\n        }\n        if (messageEvent.eventName === 'EXPERIENCE_INITIALIZED' && this.contentOptions?.themeOptions?.preloadThemes) {\n            this.setPreloadThemes(this.contentOptions.themeOptions.preloadThemes);\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformDashboardContentOptions = (contentOptions: DashboardContentOptions) => {\n        const {\n            parameters,\n            locale,\n            attributionOptions,\n            sheetOptions,\n            toolbarOptions,\n            themeOptions,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedDashboardContentOptions>(\n            {\n                locale,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (Array.isArray(parameters)) {\n            transformedContentOptions.parameters = parameters.reduce(\n                (parametersAsObject: ParametersAsObject, parameter: Parameter) => {\n                    return {\n                        ...parametersAsObject,\n                        [parameter.Name]: parameter.Values,\n                    };\n                },\n                {}\n            );\n        }\n\n        if (attributionOptions?.overlayContent !== true) {\n            transformedContentOptions.footerPaddingEnabled = true;\n        }\n\n        if (toolbarOptions?.export || (toolbarOptions?.export as ExportToolbarOption)?.print) {\n            transformedContentOptions.printEnabled = true;\n        }\n\n        if (toolbarOptions?.undoRedo !== true) {\n            transformedContentOptions.undoRedoDisabled = true;\n        }\n\n        if (toolbarOptions?.reset !== true) {\n            transformedContentOptions.resetDisabled = true;\n        }\n\n        if (toolbarOptions?.bookmarks === true) {\n            transformedContentOptions.showBookmarksIcon = true;\n        }\n\n        if (sheetOptions?.initialSheetId) {\n            transformedContentOptions.sheetId = sheetOptions.initialSheetId;\n        }\n\n        if (typeof sheetOptions?.singleSheet === 'boolean') {\n            transformedContentOptions.sheetTabsDisabled = sheetOptions.singleSheet;\n        }\n\n        if (sheetOptions?.emitSizeChangedEventOnSheetChange) {\n            transformedContentOptions.resizeOnSheetChange = true;\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {InternalQSearchExperience, QSearchContentOptions, TransformedQSearchContentOptions} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class QSearchExperienceFrame extends BaseExperienceFrame<\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n    InternalQSearchExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: QSearchContentOptions,\n        transformedContentOptions: TransformedQSearchContentOptions,\n        internalExperience: InternalQSearchExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    BaseExperience,\n    BaseExperienceFrame,\n    ContentOptions,\n    Experiences,\n    InternalExperiences,\n    TransformedContentOptions,\n} from '../base-experience';\nimport {FrameStyles} from '../internal-q-base-experience';\nimport {EmbeddingMessageEvent, ResponseMessage} from '@common/events/events';\nimport {MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\n/**\n * Internal base experience for embedded Q,\n * containing shared functionality between q-search-bar and generative-qna experience types.\n */\nexport abstract class InternalQBaseExperience<\n    ExperienceContentOptions extends ContentOptions,\n    InternalExperience extends InternalExperiences,\n    Experience extends Experiences,\n    TransformedExperienceContentOptions extends TransformedContentOptions,\n    ExperienceFrame extends BaseExperienceFrame<\n        ExperienceContentOptions,\n        TransformedExperienceContentOptions,\n        InternalExperience\n    >\n> extends BaseExperience<\n    ExperienceContentOptions,\n    InternalExperience,\n    Experience,\n    TransformedExperienceContentOptions,\n    ExperienceFrame\n> {\n    static readonly MAX_Z_INDEX = '2147483647';\n    protected frameStyles?: FrameStyles;\n\n    close = (): Promise<ResponseMessage> => {\n        return this.send(new EmbeddingMessageEvent(MessageEventName.CLOSE_Q_SEARCH));\n    };\n\n    setQuestion = (question: string): Promise<ResponseMessage> => {\n        return this.send(\n            new EmbeddingMessageEvent(MessageEventName.SET_Q_SEARCH_QUESTION, {\n                question,\n            })\n        );\n    };\n\n    protected trackOutsideClicks = (): void => {\n        const clickHandler = (event: MouseEvent) => {\n            if (!this.experienceFrame.iframe?.contains(event.target as Node)) {\n                this.close();\n            }\n        };\n\n        window.addEventListener('click', clickHandler);\n        this.controlOptions.eventManager.addEventListenerForCleanup(this.experienceId, () =>\n            window.removeEventListener('click', clickHandler)\n        );\n    };\n\n    protected enterFullScreen = (metadata: ExperienceFrameMetadata | undefined): void => {\n        if (!this.frameStyles && metadata?.frame) {\n            this.frameStyles = {\n                position: metadata.frame?.style.position,\n                top: metadata.frame?.style.top,\n                left: metadata.frame.style.left,\n                zIndex: metadata.frame.style.zIndex,\n                width: metadata.frame.style.width,\n                height: metadata.frame.style.height,\n            };\n\n            metadata.frame.style.position = 'fixed';\n            metadata.frame.style.top = '0px';\n            metadata.frame.style.left = '0px';\n            metadata.frame.style.zIndex = InternalQBaseExperience.MAX_Z_INDEX;\n            metadata.frame.style.width = '100vw';\n            metadata.frame.style.height = '100vh';\n        }\n    };\n\n    protected exitFullScreen = (metadata: ExperienceFrameMetadata | undefined): void => {\n        if (this.frameStyles && metadata?.frame) {\n            metadata.frame.style.position = this.frameStyles.position;\n            metadata.frame.style.top = this.frameStyles.top;\n            metadata.frame.style.left = this.frameStyles.left;\n            metadata.frame.style.zIndex = this.frameStyles.zIndex;\n            metadata.frame.style.width = this.frameStyles.width;\n            metadata.frame.style.height = this.frameStyles.height;\n            this.frameStyles = undefined;\n        }\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {\n    InternalQSearchExperience,\n    IQSearchExperience,\n    QSearchContentOptions,\n    TransformedQSearchContentOptions,\n} from './types';\nimport {FrameStyles} from '@experience/internal-q-base-experience/types';\nimport {QSearchExperienceFrame} from './frame/q-search-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {InternalQBaseExperience} from '@experience/internal-q-base-experience/internal-q-base-experience';\nimport {ChangeEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\nexport class QSearchExperience extends InternalQBaseExperience<\n    QSearchContentOptions,\n    InternalQSearchExperience,\n    IQSearchExperience,\n    TransformedQSearchContentOptions,\n    QSearchExperienceFrame\n> {\n    protected experience: IQSearchExperience;\n    protected internalExperience: InternalQSearchExperience;\n    protected experienceFrame: QSearchExperienceFrame;\n    protected experienceId: string;\n    protected frameStyles?: FrameStyles;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: QSearchContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalQSearchExperience,\n            IQSearchExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new QSearchExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformQSearchContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    protected extractExperienceFromUrl = (url: string): IQSearchExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/q\\/search(\\/|\\?|$)/i.exec(url) || [];\n\n        if (matches.length < 2) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid q-search experience URL',\n                    {url}\n                ),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid q-search experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.QSEARCH,\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        switch (messageEvent.eventName) {\n            case MessageEventName.Q_SEARCH_OPENED:\n            case MessageEventName.Q_SEARCH_CLOSED: {\n                if (typeof messageEvent.message === 'object') {\n                    metadata?.frame?.style.setProperty('height', `${messageEvent?.message?.height}px`);\n                }\n                break;\n            }\n            case MessageEventName.CONTENT_LOADED: {\n                this.trackOutsideClicks();\n                break;\n            }\n            case MessageEventName.Q_SEARCH_ENTERED_FULLSCREEN: {\n                this.enterFullScreen(metadata);\n                break;\n            }\n            case MessageEventName.Q_SEARCH_EXITED_FULLSCREEN: {\n                this.exitFullScreen(metadata);\n                break;\n            }\n        }\n    };\n\n    // We add content options into the query string of the iframe url.\n    // Some option names do not match option names that the static content expects\n    // This function converts the property names to the query string parameters that the static content expects\n    private transformQSearchContentOptions = (contentOptions: QSearchContentOptions) => {\n        const {\n            hideIcon,\n            hideTopicName,\n            theme,\n            allowTopicSelection,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        const transformedContentOptions = this.transformContentOptions<TransformedQSearchContentOptions>(\n            {\n                allowTopicSelection,\n            },\n            unrecognizedContentOptions\n        );\n\n        if (hideIcon !== undefined) {\n            transformedContentOptions.qBarIconDisabled = hideIcon;\n        }\n\n        if (hideTopicName !== undefined) {\n            transformedContentOptions.qBarTopicNameDisabled = hideTopicName;\n        }\n\n        if (theme !== undefined) {\n            transformedContentOptions.themeId = theme;\n        }\n\n        return transformedContentOptions;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n    InternalGenerativeQnAExperience,\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n} from '../types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {EventListener} from '@common/event-manager/types';\n\nexport class GenerativeQnAExperienceFrame extends BaseExperienceFrame<\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n    InternalGenerativeQnAExperience\n> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: GenerativeQnAContentOptions,\n        transformedContentOptions: TransformedGenerativeQnAContentOptions,\n        internalExperience: InternalGenerativeQnAExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join(baseUrl.includes('?') ? '&' : '?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceType, FrameOptions} from '../base-experience';\nimport {\n    InternalGenerativeQnAExperience,\n    IGenerativeQnAExperience,\n    GenerativeQnAContentOptions,\n    TransformedGenerativeQnAContentOptions,\n    GenerativeQnAPanelType,\n} from './types';\nimport {FrameStyles} from '@experience/internal-q-base-experience/types';\nimport {GenerativeQnAExperienceFrame} from './frame/generative-qna-experience-frame';\nimport {ControlOptions} from '../control-experience';\nimport {InternalQBaseExperience} from '@experience/internal-q-base-experience/internal-q-base-experience';\nimport {ChangeEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {ExperienceFrameMetadata} from '@common/embedding-context/types';\n\nexport class GenerativeQnAExperience extends InternalQBaseExperience<\n    GenerativeQnAContentOptions,\n    InternalGenerativeQnAExperience,\n    IGenerativeQnAExperience,\n    TransformedGenerativeQnAContentOptions,\n    GenerativeQnAExperienceFrame\n> {\n    protected experience: IGenerativeQnAExperience;\n    protected internalExperience: InternalGenerativeQnAExperience;\n    protected experienceFrame: GenerativeQnAExperienceFrame;\n    protected experienceId: string;\n    protected frameStyles?: FrameStyles;\n    static readonly TEXT_PROPERTY_MAX_LENGTH = 200;\n\n    constructor(\n        frameOptions: FrameOptions,\n        contentOptions: GenerativeQnAContentOptions,\n        controlOptions: ControlOptions,\n        experienceIdentifiers: Set<string>\n    ) {\n        super(frameOptions, contentOptions, controlOptions, experienceIdentifiers);\n\n        this.experience = this.extractExperienceFromUrl(frameOptions.url);\n\n        const {experienceIdentifier, internalExperience} = this.getInternalExperienceInfo<\n            InternalGenerativeQnAExperience,\n            IGenerativeQnAExperience\n        >(this.experience);\n\n        this.internalExperience = internalExperience;\n        this.experienceId = experienceIdentifier;\n\n        this.experienceFrame = new GenerativeQnAExperienceFrame(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            this.transformGenerativeQnAContentOptions(contentOptions),\n            internalExperience,\n            experienceIdentifier,\n            this.interceptMessage\n        );\n    }\n\n    protected extractExperienceFromUrl = (url: string): IGenerativeQnAExperience => {\n        const matches: Array<string> = /^https:\\/\\/[^/]+\\/embedding\\/[^/]+\\/q\\/search(\\/|\\?|$)/i.exec(url) || [];\n\n        if (matches.length < 2) {\n            this.frameOptions.onChange?.(\n                new ChangeEvent(\n                    ChangeEventName.INVALID_URL,\n                    ChangeEventLevel.ERROR,\n                    'Invalid generative-qna experience URL',\n                    {url}\n                ),\n                {frame: this.experienceFrame.iframe}\n            );\n\n            throw new Error('Invalid generative-qna experience URL');\n        }\n\n        return {\n            experienceType: ExperienceType.GENERATIVEQNA,\n        };\n    };\n\n    private interceptMessage = (messageEvent: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        switch (messageEvent.eventName) {\n            case MessageEventName.Q_SEARCH_OPENED:\n            case MessageEventName.Q_SEARCH_CLOSED:\n            case MessageEventName.Q_SEARCH_FOCUSED: {\n                if (typeof messageEvent.message === 'object') {\n                    metadata?.frame?.style.setProperty('height', `${messageEvent?.message?.height}`);\n                }\n                break;\n            }\n            case MessageEventName.CONTENT_LOADED: {\n                if (this.contentOptions?.panelOptions?.panelType === GenerativeQnAPanelType.SEARCH_BAR) {\n                    this.trackOutsideClicks();\n                }\n                break;\n            }\n            case MessageEventName.Q_PANEL_ENTERED_FULLSCREEN: {\n                this.enterFullScreen(metadata);\n                break;\n            }\n            case MessageEventName.Q_PANEL_EXITED_FULLSCREEN: {\n                this.exitFullScreen(metadata);\n                break;\n            }\n        }\n    };\n\n    private transformGenerativeQnAContentOptions = (contentOptions: GenerativeQnAContentOptions) => {\n        const unrecognizedProperties: string[] = [];\n\n        const markUnrecognized = (properties: object, prefix = '') => {\n            Object.keys(properties).forEach(key => {\n                unrecognizedProperties.push(prefix + key);\n            });\n        };\n\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onMessage, // excluded from unrecognized\n            showTopicName,\n            showPinboard,\n            allowTopicSelection,\n            allowFullscreen,\n            searchPlaceholderText,\n            panelOptions,\n            themeOptions,\n            ...unrecognizedContentOptions\n        } = contentOptions;\n\n        markUnrecognized(unrecognizedContentOptions);\n\n        const transformedContentOptions: TransformedGenerativeQnAContentOptions = {\n            qShowTopicName: showTopicName,\n            qShowPinboard: showPinboard,\n            qAllowTopicSelection: allowTopicSelection,\n            qAllowFullscreen: allowFullscreen,\n        };\n\n        if (typeof searchPlaceholderText === 'string') {\n            this.checkMaxLength(searchPlaceholderText, 'searchPlaceholderText');\n            transformedContentOptions.qSearchPlaceholderText = encodeURIComponent(searchPlaceholderText);\n        }\n\n        if (panelOptions) {\n            const {panelType} = panelOptions;\n            transformedContentOptions.qPanelType = panelType;\n\n            if (panelType === GenerativeQnAPanelType.FULL) {\n                const {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    panelType: unusedPanelType, // excluded from unrecognized\n                    title,\n                    showQIcon,\n                    ...unrecognizedPanelOptions\n                } = panelOptions;\n\n                if (typeof title === 'string') {\n                    this.checkMaxLength(title, 'panelOptions.title');\n                    transformedContentOptions.qPanelTitle = encodeURIComponent(title);\n                }\n                transformedContentOptions.qShowPanelIcon = showQIcon;\n\n                markUnrecognized(unrecognizedPanelOptions, 'panelOptions.');\n            } else if (panelType === GenerativeQnAPanelType.SEARCH_BAR) {\n                const {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    panelType: unusedPanelType, // excluded from unrecognized\n                    focusedHeight,\n                    expandedHeight,\n                    ...unrecognizedPanelOptions\n                } = panelOptions;\n\n                transformedContentOptions.qPanelFocusedHeight = focusedHeight;\n                transformedContentOptions.qPanelExpandedHeight = expandedHeight;\n\n                markUnrecognized(unrecognizedPanelOptions, 'panelOptions.');\n            } else {\n                throw new Error('panelOptions.panelType should be one of following: [FULL, SEARCH_BAR]');\n            }\n        }\n\n        if (themeOptions?.themeArn) {\n            transformedContentOptions.themeArn = themeOptions.themeArn;\n        }\n\n        this.warnUnrecognizedContentOptions(unrecognizedProperties);\n\n        return transformedContentOptions;\n    };\n\n    private checkMaxLength = (value: string, propertyName: string) => {\n        const maxLength = GenerativeQnAExperience.TEXT_PROPERTY_MAX_LENGTH;\n        if (value.length > maxLength) {\n            throw new Error(`${propertyName} should be less than ${maxLength} characters`);\n        }\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ControlOptions, InternalControlExperience} from '../types';\nimport {EventListener} from '@common/event-manager/types';\nimport {BaseExperienceFrame} from '@experience/base-experience/frame/experience-frame';\nimport {BaseContentOptions, FrameOptions} from '@experience/base-experience/types';\n\nexport class ControlExperienceFrame extends BaseExperienceFrame<object, BaseContentOptions, InternalControlExperience> {\n    constructor(\n        frameOptions: FrameOptions,\n        controlOptions: ControlOptions,\n        contentOptions: BaseContentOptions,\n        transformedContentOptions: object,\n        internalExperience: InternalControlExperience,\n        experienceIdentifier: string,\n        interceptMessage?: EventListener\n    ) {\n        super(\n            frameOptions,\n            controlOptions,\n            contentOptions,\n            transformedContentOptions,\n            internalExperience,\n            experienceIdentifier,\n            interceptMessage\n        );\n        this.url = this.buildExperienceUrl(frameOptions.url);\n        this.createExperienceIframe();\n    }\n\n    buildExperienceUrl = (baseUrl: string) => {\n        const {contextId, discriminator} = this.internalExperience;\n\n        const queryString = this.buildQueryString({\n            ...this.transformedContentOptions,\n            contextId,\n            discriminator,\n        });\n\n        return [baseUrl, queryString].join('?');\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ControlExperienceFrame} from './frame/control-experience-frame';\nimport {ControlOptions, IControlExperience, InternalControlExperience, UrlInfo} from './types';\nimport {ExperienceType} from '../base-experience';\nimport {EventManager} from '@common/event-manager/event-manager';\nimport {ChangeEvent, TargetedMessageEvent} from '@common/events/events';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents, MessageEventName} from '@common/events/types';\nimport {BaseExperience} from '@experience/base-experience/base-experience';\nimport {EventListener} from '@common/event-manager/types';\nimport {LogProvider} from '../../common';\n\nexport class ControlExperience {\n    static FRAME_TIMEOUT = 60000;\n    private readonly container: HTMLBodyElement;\n    private readonly urlInfo: UrlInfo;\n    private readonly internalExperience: InternalControlExperience;\n    private readonly eventManager: EventManager;\n    private readonly onChange?: EventListener;\n    private readonly experience: IControlExperience = {\n        experienceType: ExperienceType.CONTROL,\n    };\n    private readonly logger?: LogProvider;\n    private readonly controlExperienceFrame: ControlExperienceFrame;\n\n    constructor(\n        container: HTMLBodyElement,\n        controlOptions: ControlOptions,\n        onChange?: EventListener,\n        logger?: LogProvider\n    ) {\n        this.container = container;\n        this.eventManager = controlOptions.eventManager;\n        this.urlInfo = controlOptions.urlInfo;\n        this.onChange = onChange;\n        this.logger = logger;\n\n        this.internalExperience = {\n            ...this.experience,\n            contextId: controlOptions.contextId,\n            discriminator: 0,\n        };\n\n        const controlExperienceId = this.getControlExperienceId();\n\n        this.controlExperienceFrame = new ControlExperienceFrame(\n            {\n                url: this.getControlExperienceBaseUrl(),\n                container: this.container,\n                width: '0px',\n                height: '0px',\n                onChange: this.onChange,\n            },\n            {\n                eventManager: this.eventManager,\n                contextId: this.internalExperience.contextId,\n                timeout: ControlExperience.FRAME_TIMEOUT,\n                urlInfo: this.urlInfo,\n            },\n            {},\n            {},\n            this.internalExperience,\n            controlExperienceId\n        );\n\n        window.addEventListener('message', this.controlFrameMessageListener);\n        this.eventManager.addEventListenerForCleanup(controlExperienceId, () =>\n            window.removeEventListener('message', this.controlFrameMessageListener)\n        );\n    }\n\n    public send = (messageEvent: TargetedMessageEvent) => {\n        return this.controlExperienceFrame.send(messageEvent);\n    };\n\n    public controlFrameMessageListener = (event: MessageEvent<EmbeddingEvents>) => {\n        if (this.isMessageEvent(event.data)) {\n            const messageEvent = event.data;\n            try {\n                if (messageEvent.eventTarget) {\n                    const incomingExperienceIdentifier = BaseExperience.getExperienceIdentifier(\n                        messageEvent.eventTarget\n                    );\n\n                    this.eventManager.invokeEventListener(incomingExperienceIdentifier, messageEvent);\n                }\n\n                this.sendAcknowledgment(messageEvent);\n            } catch (error) {\n                this.onChange?.(\n                    new ChangeEvent(\n                        ChangeEventName.UNRECOGNIZED_EVENT_TARGET,\n                        ChangeEventLevel.WARN,\n                        'Message with unrecognized event target received',\n                        {\n                            eventTarget: messageEvent.eventTarget,\n                        }\n                    ),\n                    {frame: this.controlExperienceFrame.iframe}\n                );\n                this.logger?.warn('Message with unrecognized event target received');\n            }\n        }\n    };\n\n    private sendAcknowledgment = (messageEvent: EmbeddingEvents) => {\n        const acknowledgment = new TargetedMessageEvent(MessageEventName.ACKNOWLEDGE, this.internalExperience, {\n            eventName: messageEvent.eventName,\n            eventTarget: messageEvent.eventTarget,\n        });\n\n        window.requestIdleCallback?.(() => this.send(acknowledgment)) || this.send(acknowledgment);\n    };\n\n    private getControlExperienceId = () => {\n        return [\n            this.internalExperience.contextId,\n            this.internalExperience.experienceType,\n            this.internalExperience.discriminator,\n        ]\n            .filter(Boolean)\n            .join('-');\n    };\n\n    private getControlExperienceBaseUrl = () => {\n        const {host, sessionId} = this.urlInfo;\n        const urlString = `${host}/embed/${sessionId}/embedControl`;\n        return new URL(urlString).href;\n    };\n\n    private isMessageEvent = (messageEvent: EmbeddingEvents) => {\n        return !!messageEvent && !!messageEvent.eventTarget && !!messageEvent.eventName;\n    };\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ExperienceIdentifier, EventListener} from './types';\nimport {EmbeddingEvents} from '../events';\nimport {CleanUpCallback} from '../types';\n\n/**\n * Manages the event listeners for the experiences within an embedding context\n */\nexport class EventManager {\n    private eventListeners: Map<ExperienceIdentifier, EventListener[]>;\n    private cleanUpCallbacks: Map<ExperienceIdentifier, CleanUpCallback[]>;\n\n    constructor() {\n        this.eventListeners = new Map();\n        this.cleanUpCallbacks = new Map();\n    }\n\n    public addEventListener = (experienceId: ExperienceIdentifier, listener: EventListener, cleanUp?: boolean) => {\n        if (!experienceId) {\n            throw new Error('Experience identifier is required when calling addEventListener');\n        }\n\n        if (typeof listener !== 'function') {\n            throw new Error('Invalid type provided for event listener');\n        }\n\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (cleanUp) {\n            this.addEventListenerForCleanup(experienceId, () => this.removeEventListener(experienceId, listener));\n        }\n\n        if (!experienceIdentifierSpecificListeners) {\n            this.eventListeners.set(experienceId, [listener]);\n            return this;\n        }\n\n        experienceIdentifierSpecificListeners.push(listener);\n        return this;\n    };\n\n    public invokeEventListener = (experienceId: ExperienceIdentifier, event: EmbeddingEvents) => {\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (!experienceIdentifierSpecificListeners) {\n            throw new Error(`Unable to find experience specific event listeners: ${experienceId}`);\n        }\n\n        experienceIdentifierSpecificListeners.forEach((listener: EventListener) => {\n            listener(event);\n        });\n\n        return this;\n    };\n\n    public removeEventListener = (experienceId: ExperienceIdentifier, listener: EventListener) => {\n        const experienceIdentifierSpecificListeners = this.eventListeners.get(experienceId);\n\n        if (!experienceIdentifierSpecificListeners) {\n            throw new Error(`Unable to find experience specific event listeners: ${experienceId}`);\n        }\n\n        const updateEventListeners = experienceIdentifierSpecificListeners.filter(\n            listenerItem => listenerItem !== listener\n        );\n\n        this.eventListeners.set(experienceId, updateEventListeners);\n\n        return this;\n    };\n\n    public addEventListenerForCleanup = (experienceId: ExperienceIdentifier, cleanupCallback: CleanUpCallback) => {\n        const experienceIdentifierSpecificListenersForCleanup = this.cleanUpCallbacks.get(experienceId) ?? [];\n        experienceIdentifierSpecificListenersForCleanup.push(cleanupCallback);\n\n        this.cleanUpCallbacks.set(experienceId, experienceIdentifierSpecificListenersForCleanup);\n    };\n\n    public cleanUpCallbacksForExperience = (experienceId: ExperienceIdentifier) => {\n        const experienceIdentifierSpecificListenersForCleanup = this.cleanUpCallbacks.get(experienceId);\n\n        if (experienceIdentifierSpecificListenersForCleanup) {\n            experienceIdentifierSpecificListenersForCleanup.forEach(callback => callback());\n            this.cleanUpCallbacks.delete(experienceId);\n            this.eventListeners.set(experienceId, []);\n        }\n    };\n}\n","export interface LogProvider {\n    log: typeof console.log;\n    warn: typeof console.warn;\n    error: typeof console.error;\n    debug: typeof console.debug;\n    info: typeof console.info;\n}\n\n/**\n * Temporary abstraction for customer provided logger\n *\n */\nexport class DefaultLogger implements LogProvider {\n    log = console.log;\n\n    warn = console.warn;\n\n    error = console.error;\n\n    debug = console.debug;\n\n    info = console.info;\n}\n","// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {v4} from 'uuid';\nimport {\n    EmbeddingContextFrameOptions,\n    ExperienceFrameMetadata,\n    IEmbeddingContext,\n} from '@common/embedding-context/types';\nimport {FrameOptions} from '@experience/base-experience/types';\nimport {ControlOptions} from '@experience/control-experience/types';\nimport {VisualContentOptions} from '@experience/visual-experience/types';\nimport {VisualExperience} from '@experience/visual-experience/visual-experience';\nimport {DashboardContentOptions} from '@experience/dashboard-experience/types';\nimport {ConsoleContentOptions} from '@experience/console-experience/types';\nimport {QSearchContentOptions} from '@experience/q-search-experience/types';\nimport {GenerativeQnAContentOptions} from '@experience/generative-qna-experience/types';\nimport {ConsoleExperience} from '@experience/console-experience/console-experience';\nimport {DashboardExperience} from '@experience/dashboard-experience/dashboard-experience';\nimport {QSearchExperience} from '@experience/q-search-experience/q-search-experience';\nimport {GenerativeQnAExperience} from '@experience/generative-qna-experience/generative-qna-experience';\nimport {ChangeEventLevel, ChangeEventName, EmbeddingEvents} from '@common/events/types';\nimport {ChangeEvent} from '@common/events/events';\nimport {ControlExperience} from '@experience/control-experience/control-experience';\nimport {EventManager} from '@common/event-manager/event-manager';\nimport {DefaultLogger, LogProvider} from '../log-provider/log-provider';\n\n/**\n * The embedding context creates an additional zero-pixel iframe and appends it into the body element on the page to centralize communication between the SDK and the embedded QuickSight content\n */\nexport class EmbeddingContext implements IEmbeddingContext {\n    private readonly experienceIdentifiers: Set<string>;\n    private readonly eventManager: EventManager;\n    private readonly contextId: string;\n    private readonly contextOnChange;\n    private controlOptions?: ControlOptions;\n    private readonly logger: LogProvider;\n\n    constructor(contextFrameOptions: EmbeddingContextFrameOptions) {\n        // The contextId is shared with experiences to create a communication context\n        // Experiences with not-matching contextId is outside the communication context\n        this.contextId = v4();\n        this.experienceIdentifiers = new Set();\n\n        // The eventManager instance below is passed to all experiences to create a unified event management\n        this.eventManager = new EventManager();\n        this.contextOnChange = contextFrameOptions.onChange;\n        this.logger = new DefaultLogger();\n    }\n\n    public embedVisual = async (\n        frameOptions: FrameOptions,\n        contentOptions: VisualContentOptions = {}\n    ): Promise<VisualExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedVisual');\n        const controlOptions = this.buildControlOptions(frameOptions);\n\n        return new VisualExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedDashboard = async (\n        frameOptions: FrameOptions,\n        contentOptions: DashboardContentOptions = {}\n    ): Promise<DashboardExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedDashboard');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new DashboardExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedConsole = async (\n        frameOptions: FrameOptions,\n        contentOptions: ConsoleContentOptions = {}\n    ): Promise<ConsoleExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedConsole');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new ConsoleExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedQSearchBar = async (\n        frameOptions: FrameOptions,\n        contentOptions: QSearchContentOptions = {}\n    ): Promise<QSearchExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedQSearchBar');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new QSearchExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    public embedGenerativeQnA = async (\n        frameOptions: FrameOptions,\n        contentOptions: GenerativeQnAContentOptions = {}\n    ): Promise<GenerativeQnAExperience> => {\n        this.validateFrameOptions(frameOptions, 'embedGenerativeQnA');\n        const controlOptions = this.buildControlOptions(frameOptions);\n        return new GenerativeQnAExperience(\n            frameOptions,\n            contentOptions,\n            controlOptions,\n            this.experienceIdentifiers\n        ).setLogProvider(this.logger);\n    };\n\n    private validateFrameOptions = (frameOptions: FrameOptions, methodName: string) => {\n        if (!frameOptions) {\n            const errorMessage = `${methodName} is called without frameOptions`;\n            this.onChange(\n                new ChangeEvent(\n                    ChangeEventName.NO_FRAME_OPTIONS,\n                    ChangeEventLevel.ERROR,\n                    `${methodName} is called without frameOptions`,\n                    {\n                        methodName,\n                    }\n                ),\n                {frame: null}\n            );\n            throw new Error(errorMessage);\n        }\n\n        if (typeof frameOptions !== 'object' || Array.isArray(frameOptions)) {\n            const errorMessage = `${methodName} is called with non-object frameOptions`;\n            this.onChange(\n                new ChangeEvent(ChangeEventName.INVALID_FRAME_OPTIONS, ChangeEventLevel.ERROR, errorMessage, {\n                    methodName,\n                    frameOptionsType: Array.isArray(frameOptions) ? 'array' : typeof frameOptions,\n                }),\n                {frame: null}\n            );\n            throw new Error(errorMessage);\n        }\n\n        const recognizedKeys = [\n            'url',\n            'container',\n            'width',\n            'height',\n            'resizeHeightOnSizeChangedEvent',\n            'withIframePlaceholder',\n            'onChange',\n            'className',\n        ];\n\n        const unrecognizedFrameOptionNames = Object.keys(frameOptions).filter(key => !recognizedKeys.includes(key));\n\n        if (unrecognizedFrameOptionNames.length > 0) {\n            const warnMessage = `${methodName} is called with unrecognized properties`;\n            frameOptions.onChange?.(\n                new ChangeEvent(ChangeEventName.UNRECOGNIZED_FRAME_OPTIONS, ChangeEventLevel.WARN, warnMessage, {\n                    unrecognizedFrameOptions: unrecognizedFrameOptionNames,\n                }),\n                {frame: null}\n            );\n\n            this.logger?.warn(warnMessage);\n        }\n    };\n\n    private buildControlOptions = (frameOptions: FrameOptions): ControlOptions => {\n        if (!this.controlOptions) {\n            if (!frameOptions.url) {\n                throw new Error('URL is missing in frame options, but is a required field');\n            }\n\n            const urlInfo = this.getControlUrlInfo(frameOptions.url);\n\n            const controlFrame = new ControlExperience(\n                this.getBodyElement(),\n                {\n                    eventManager: this.eventManager,\n                    urlInfo,\n                    contextId: this.contextId,\n                },\n                this.onChange,\n                this.logger\n            );\n\n            this.controlOptions = {\n                eventManager: this.eventManager,\n                sendToControlFrame: controlFrame.send,\n                contextId: this.contextId,\n                timeout: ControlExperience.FRAME_TIMEOUT,\n                urlInfo,\n            };\n        }\n\n        return this.controlOptions;\n    };\n\n    private onChange = (event: EmbeddingEvents, metadata?: ExperienceFrameMetadata) => {\n        if (this.contextOnChange) {\n            this.contextOnChange(event, metadata);\n        }\n    };\n\n    private getControlUrlInfo = (url: string) => {\n        const matches: Array<string> = /^(https:\\/\\/[^/]+)\\/(embedding|embed)\\/([^/]+)\\/[^?]+\\?(.*)/i.exec(url) || [];\n\n        if (matches?.length < 4) {\n            throw new Error(`Invalid embedding url: \"${url}\"`);\n        }\n\n        return {\n            sessionId: matches[3],\n            host: matches[1],\n            urlSearchParams: new URLSearchParams(matches[4]),\n        };\n    };\n\n    private getBodyElement = () => {\n        // body element on a page is required to embed the redeem and control frames\n        const body = document.getElementsByTagName('body')?.[0];\n\n        if (!body) {\n            const message = 'could not locate <body> element in the page';\n            this.onChange(new ChangeEvent(ChangeEventName.NO_BODY, ChangeEventLevel.ERROR, message), {frame: null});\n\n            throw new Error(message);\n        }\n\n        return body;\n    };\n}\n\nexport const createEmbeddingContext = async (frameOptions: EmbeddingContextFrameOptions = {}) => {\n    return new EmbeddingContext(frameOptions);\n};\n","import * as EventMessages from '@common/events/messages';\nimport * as EventTypes from '@common/events/types';\nimport * as EventManagerTypes from '@common/event-manager/types';\nimport * as EmbeddingContextTypes from '@common/embedding-context/types';\nimport * as IframeTypes from '@common/iframe/types';\nimport * as CommonTypes from './common/types';\n\nimport * as BaseExperienceTypes from '@experience/base-experience/types';\nimport * as ConsoleExperienceTypes from '@experience/console-experience/types';\nimport * as DashboardExperienceTypes from '@experience/dashboard-experience/types';\nimport * as ControlExperienceTypes from '@experience/control-experience/types';\nimport * as QSearchExperienceTypes from '@experience/q-search-experience/types';\nimport * as VisualExperienceTypes from '@experience/visual-experience/types';\nimport * as GenerativeQnAExperienceTypes from '@experience/generative-qna-experience/types';\nimport * as InternalQBaseExperienceTypes from '@experience/internal-q-base-experience/types';\n\nexport * from './common';\nexport * from './experiences';\n\n/**\n * Namespaces enums under one import for convenience\n *\n * @deprecated - Enums can be imported directly\n */\nexport const QSE = {\n    ...CommonTypes,\n    ...EventMessages,\n    ...EventTypes,\n    ...EventManagerTypes,\n    ...EmbeddingContextTypes,\n    ...IframeTypes,\n    ...BaseExperienceTypes,\n    ...ConsoleExperienceTypes,\n    ...DashboardExperienceTypes,\n    ...QSearchExperienceTypes,\n    ...ControlExperienceTypes,\n    ...VisualExperienceTypes,\n    ...GenerativeQnAExperienceTypes,\n    ...InternalQBaseExperienceTypes,\n};\n"],"names":["InfoMessageEventName","CALLBACK_OPERATION_INVOKED","CONTENT_LOADED","EXPERIENCE_INITIALIZED","ERROR_OCCURRED","SIZE_CHANGED","PARAMETERS_CHANGED","SELECTED_SHEET_CHANGED","MODAL_OPENED","Q_SEARCH_CLOSED","Q_SEARCH_OPENED","Q_SEARCH_FOCUSED","Q_SEARCH_SIZE_CHANGED","Q_SEARCH_ENTERED_FULLSCREEN","Q_SEARCH_EXITED_FULLSCREEN","Q_PANEL_ENTERED_FULLSCREEN","Q_PANEL_EXITED_FULLSCREEN","PAGE_NAVIGATION","InfoChangeEventName","FRAME_STARTED","FRAME_MOUNTED","FRAME_LOADED","FRAME_REMOVED","ErrorChangeEventName","FRAME_NOT_CREATED","NO_BODY","NO_CONTAINER","INVALID_CONTAINER","NO_URL","INVALID_URL","NO_FRAME_OPTIONS","INVALID_FRAME_OPTIONS","WarnChangeEventName","UNRECOGNIZED_CONTENT_OPTIONS","UNRECOGNIZED_FRAME_OPTIONS","UNRECOGNIZED_EVENT_TARGET","SetterMessageEventName","SET_PARAMETERS","SET_SELECTED_SHEET_ID","SET_Q_SEARCH_QUESTION","SET_VISUAL_ACTIONS","SET_THEME","ADD_FILTER_GROUPS","UPDATE_FILTER_GROUPS","REMOVE_FILTER_GROUPS","ADD_VISUAL_ACTIONS","REMOVE_VISUAL_ACTIONS","SET_THEME_OVERRIDE","PRELOAD_THEMES","CREATE_SHARED_VIEW","GetterMessageEventName","GET_PARAMETERS","GET_SHEETS","GET_SHEET_VISUALS","GET_VISUAL_ACTIONS","GET_SELECTED_SHEET_ID","GET_FILTER_GROUPS_FOR_SHEET","GET_FILTER_GROUPS_FOR_VISUAL","InvokerMessageEventName","ACKNOWLEDGE","INITIATE_PRINT","NAVIGATE_TO_DASHBOARD","CLOSE_Q_SEARCH","UNDO","REDO","RESET","TOGGLE_BOOKMARKS_PANE","ChangeEventName","_objectSpread","MessageEventName","ChangeEventLevel","ERROR","INFO","WARN","ExperienceType","CONSOLE","CONTEXT","CONTROL","VISUAL","DASHBOARD","QSEARCH","GENERATIVEQNA","SPECIAL_DATAPOINT_VALUE_TYPES","NULL","OTHER_BUCKET","CALCULATED_METRIC_COLUMN_TYPE","INTEGER","STRING","DECIMAL","DATETIME","GenerativeQnAPanelType","FULL","SEARCH_BAR","EmbeddingEvent","_createClass","eventName","message","data","_classCallCheck","this","ChangeEvent","eventLevel","_this","_callSuper","_inherits","EmbeddingMessageEvent","_this2","TargetedMessageEvent","eventTarget","_this3","PostMessageEvent","eventId","timestamp","version","_this4","ResponseMessage","SuccessResponse","_defineProperty","ErrorResponse","errorResponse","errorCode","error","DataResponse","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","Error","byteToHex","i","push","toString","slice","native","randomUUID","v4","options","buf","offset","rnds","random","arr","unsafeStringify","BaseExperience","frameOptions","contentOptions","controlOptions","experienceIdentifiers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messageEvent","targetedMessageEvent","wrap","_context","prev","next","experienceFrame","internalExperience","abrupt","send","stop","_x","apply","arguments","listener","addInternalEventListener","logProvider","logger","experience","experienceIdentifier","discriminator","contextId","getExperienceIdentifier","has","add","filteredOptions","unrecognizedContentOptions","warnUnrecognizedContentOptions","Object","keys","unrecognizedProperties","_this$frameOptions$on","_this$frameOptions","_this$logger","length","onChange","call","frame","warn","url","_this$frameOptions$on2","_this$frameOptions2","validateFrameOptions","experienceType","dashboardId","filter","Boolean","join","sheetId","visualId","includes","maxInt","errors","overflow","floor","Math","stringFromCharCode","String","fromCharCode","type","RangeError","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","baseMinusTMin","base","encode","input","output","string","counter","value","charCodeAt","extra","ucs2decode","inputLength","n","bias","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","t","qMinusT","baseMinusT","Iframe","IFRAME_CLASS_NAME","iframe","withIframePlaceholder","iframePlaceholder","document","createElement","id","concat","iframeName","style","width","backgroundColor","display","justifyContent","alignItems","className","height","endsWith","appendChild","loaderSVG","createLoaderSVG","container","classNames","trim","name","loading","border","padding","opacity","position","payload","postRequest","createPostRequest","src","target","event","_this$onLoad","_this$postRequest","remove","transition","onLoad","postRequestOptions","form","visibility","method","action","forEach","payloadItem","submit","tagName","attributes","styles","undefined","children","element","createElementNS","entries","_ref2","_slicedToArray","setAttribute","_ref3","_ref4","setProperty","child","circles","map","animate","createSvgElement","attributeName","dur","values","repeatCount","begin","fill","stroke","cx","cy","r","x","y","viewBox","_options$width","_options$height","createIframePlaceholder","createIframe","addEventListener","onLoadLocal","SDK_VERSION","BaseExperienceFrame","transformedContentOptions","interceptMessage","sendToControlFrame","Date","now","Promise","resolve","reject","eventHandler","_responseMessageEvent","_responseMessageEvent2","responseMessageEvent","window","removeEventListener","success","setTimeout","MESSAGE_RESPONSE_TIMEOUT","parameters","_typeof","key","Array","isArray","encodedName","encodeURIComponent","encodedValue","reduce","memoizedOptions","_ref5","punyCodeEmbedOrigin","location","origin","sdkVersion","URLSearchParams","setTimeoutInstance","experienceId","onLoadHandler","getIframe","err","handler","metadata","eventManager","timeoutInstance","timeout","_callee2","_context2","clearTimeout","_container","querySelector","nodeName","changeEvent","onMessage","interceptOnMessage","mutationObserver","MutationObserver","mutations","some","record","from","removedNodes","node","cleanUpCallbacksForExperience","disconnect","observe","body","childList","subtree","decorateOnChange","decorateOnMessage","getContainer","validateBaseUrl","origin_url","initializeMutationObserver","VisualExperienceFrame","baseUrl","_this$transformedCont","otherOptions","_objectWithoutProperties","_excluded","_this$internalExperie","buildQueryString","buildParameterString","buildExperienceUrl","createExperienceIframe","VisualExperience","_callee3","filterGroups","_context3","_x2","_callee4","_context4","_x3","_callee5","_context5","_x4","_callee6","response","_context6","sent","_callee7","_context7","_ref8","_callee8","actions","_context8","Actions","_x5","_ref9","_callee9","_context9","_x6","_ref10","_callee10","_context10","_x7","_ref11","_callee11","themeArn","_context11","ThemeArn","_x8","_ref12","_callee12","themeOverride","_context12","ThemeOverride","_x9","_ref13","_callee13","preloadThemes","_context13","PreloadThemes","_x10","matches","exec","_this$contentOptions","_this$contentOptions2","_metadata$frame","_metadata$frame$setAt","_messageEvent$message","resizeHeightOnSizeChangedEvent","themeOptions","setThemeOverride","setPreloadThemes","fitToIframeWidth","locale","transformContentOptions","parametersAsObject","parameter","Name","Values","extractExperienceFromUrl","_this$getInternalExpe","getInternalExperienceInfo","transformVisualContentOptions","ConsoleExperienceFrame","ConsoleExperience","currentPage","pageType","DashboardExperienceFrame","viewId","URL","pathname","href","DashboardExperience","_ref7","SheetId","VisualId","_x11","_ref14","_callee14","_context14","_x12","_x13","_x14","_callee15","_context15","_ref16","_callee16","_context16","_x15","_ref17","_callee17","_context17","_x16","_ref18","_callee18","navigateToDashboardOptions","_context18","DashboardId","Parameters","_x17","_x18","_ref19","_callee19","_context19","_x19","_x20","_x21","_ref20","_callee20","_context20","_x22","_ref21","_callee21","_context21","_x23","_callee22","_context22","_ref23","_callee23","_context23","_x24","_ref24","_callee24","_context24","_x25","_callee25","_context25","_toolbarOptions$expor","attributionOptions","sheetOptions","toolbarOptions","overlayContent","footerPaddingEnabled","print","printEnabled","undoRedo","undoRedoDisabled","reset","resetDisabled","bookmarks","showBookmarksIcon","initialSheetId","singleSheet","sheetTabsDisabled","emitSizeChangedEventOnSheetChange","resizeOnSheetChange","transformDashboardContentOptions","QSearchExperienceFrame","InternalQBaseExperience","_len","args","_key","question","clickHandler","_this$experienceFrame","contains","close","addEventListenerForCleanup","_metadata$frame2","frameStyles","top","left","zIndex","MAX_Z_INDEX","QSearchExperience","trackOutsideClicks","enterFullScreen","exitFullScreen","hideIcon","hideTopicName","theme","allowTopicSelection","qBarIconDisabled","qBarTopicNameDisabled","themeId","transformQSearchContentOptions","GenerativeQnAExperienceFrame","GenerativeQnAExperience","panelOptions","panelType","markUnrecognized","properties","prefix","showTopicName","showPinboard","allowFullscreen","searchPlaceholderText","qShowTopicName","qShowPinboard","qAllowTopicSelection","qAllowFullscreen","checkMaxLength","qSearchPlaceholderText","qPanelType","title","showQIcon","unrecognizedPanelOptions","_excluded2","qPanelTitle","qShowPanelIcon","focusedHeight","expandedHeight","_excluded3","qPanelFocusedHeight","qPanelExpandedHeight","propertyName","maxLength","TEXT_PROPERTY_MAX_LENGTH","transformGenerativeQnAContentOptions","ControlExperienceFrame","ControlExperience","controlExperienceFrame","isMessageEvent","incomingExperienceIdentifier","invokeEventListener","sendAcknowledgment","_this$onChange","_window$requestIdleCa","_window","acknowledgment","requestIdleCallback","_this$urlInfo","urlInfo","host","sessionId","urlString","controlExperienceId","getControlExperienceId","getControlExperienceBaseUrl","FRAME_TIMEOUT","controlFrameMessageListener","EventManager","cleanUp","experienceIdentifierSpecificListeners","eventListeners","get","set","updateEventListeners","listenerItem","cleanupCallback","_this$cleanUpCallback","experienceIdentifierSpecificListenersForCleanup","cleanUpCallbacks","callback","Map","DefaultLogger","console","log","debug","info","EmbeddingContext","contextFrameOptions","_args","buildControlOptions","setLogProvider","_args2","_args3","_args4","_args5","methodName","errorMessage","frameOptionsType","recognizedKeys","unrecognizedFrameOptionNames","_frameOptions$onChang","warnMessage","unrecognizedFrameOptions","getControlUrlInfo","controlFrame","getBodyElement","contextOnChange","urlSearchParams","_document$getElements","getElementsByTagName","Set","createEmbeddingContext","_ref6","_args6","QSE","CommonTypes","EventMessages","EventTypes","EventManagerTypes","EmbeddingContextTypes","IframeTypes","BaseExperienceTypes","ConsoleExperienceTypes","DashboardExperienceTypes","QSearchExperienceTypes","ControlExperienceTypes","VisualExperienceTypes","GenerativeQnAExperienceTypes","InternalQBaseExperienceTypes"],"mappings":"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","x_google_ignoreList":[10,11,12,13,15]}